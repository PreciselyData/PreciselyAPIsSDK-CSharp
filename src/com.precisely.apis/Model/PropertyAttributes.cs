/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// PropertyAttributes
    /// </summary>
    [DataContract]
    public partial class PropertyAttributes :  IEquatable<PropertyAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyAttributes" /> class.
        /// </summary>
        /// <param name="PbKey">PbKey.</param>
        /// <param name="PropApn">PropApn.</param>
        /// <param name="PropType">PropType.</param>
        /// <param name="PropSqFt">PropSqFt.</param>
        /// <param name="BuildgSqFt">BuildgSqFt.</param>
        /// <param name="BuildgSqSource">BuildgSqSource.</param>
        /// <param name="LandUse">LandUse.</param>
        /// <param name="Construction">Construction.</param>
        /// <param name="RoofType">RoofType.</param>
        /// <param name="Subdivision">Subdivision.</param>
        /// <param name="Geometry">Geometry.</param>
        /// <param name="BuiltYear">BuiltYear.</param>
        /// <param name="Bedrooms">Bedrooms.</param>
        /// <param name="Baths">Baths.</param>
        /// <param name="Pool">Pool.</param>
        /// <param name="FirePlace">FirePlace.</param>
        /// <param name="MobileHome">MobileHome.</param>
        /// <param name="HeatingType">HeatingType.</param>
        /// <param name="CoolingType">CoolingType.</param>
        /// <param name="AssessedValue">AssessedValue.</param>
        /// <param name="MarketValue">MarketValue.</param>
        /// <param name="AppraisedValue">AppraisedValue.</param>
        /// <param name="TaxAmount">TaxAmount.</param>
        /// <param name="TaxExemptions">TaxExemptions.</param>
        /// <param name="CaExemptions">CaExemptions.</param>
        /// <param name="SalesDate">SalesDate.</param>
        /// <param name="PriorSaleDate">PriorSaleDate.</param>
        /// <param name="PriorSalesPrice">PriorSalesPrice.</param>
        public PropertyAttributes(string PbKey = null, string PropApn = null, string PropType = null, string PropSqFt = null, string BuildgSqFt = null, BuildingSqftSource BuildgSqSource = null, LandUse LandUse = null, Construction Construction = null, RoofType RoofType = null, string Subdivision = null, Geometry Geometry = null, string BuiltYear = null, string Bedrooms = null, string Baths = null, string Pool = null, string FirePlace = null, string MobileHome = null, HeatingType HeatingType = null, CoolingType CoolingType = null, string AssessedValue = null, string MarketValue = null, string AppraisedValue = null, string TaxAmount = null, List<TaxExemption> TaxExemptions = null, CaExemptions CaExemptions = null, string SalesDate = null, string PriorSaleDate = null, string PriorSalesPrice = null)
        {
            this.PbKey = PbKey;
            this.PropApn = PropApn;
            this.PropType = PropType;
            this.PropSqFt = PropSqFt;
            this.BuildgSqFt = BuildgSqFt;
            this.BuildgSqSource = BuildgSqSource;
            this.LandUse = LandUse;
            this.Construction = Construction;
            this.RoofType = RoofType;
            this.Subdivision = Subdivision;
            this.Geometry = Geometry;
            this.BuiltYear = BuiltYear;
            this.Bedrooms = Bedrooms;
            this.Baths = Baths;
            this.Pool = Pool;
            this.FirePlace = FirePlace;
            this.MobileHome = MobileHome;
            this.HeatingType = HeatingType;
            this.CoolingType = CoolingType;
            this.AssessedValue = AssessedValue;
            this.MarketValue = MarketValue;
            this.AppraisedValue = AppraisedValue;
            this.TaxAmount = TaxAmount;
            this.TaxExemptions = TaxExemptions;
            this.CaExemptions = CaExemptions;
            this.SalesDate = SalesDate;
            this.PriorSaleDate = PriorSaleDate;
            this.PriorSalesPrice = PriorSalesPrice;
        }
        
        /// <summary>
        /// Gets or Sets PbKey
        /// </summary>
        [DataMember(Name="pbKey", EmitDefaultValue=false)]
        public string PbKey { get; set; }
        /// <summary>
        /// Gets or Sets PropApn
        /// </summary>
        [DataMember(Name="propApn", EmitDefaultValue=false)]
        public string PropApn { get; set; }
        /// <summary>
        /// Gets or Sets PropType
        /// </summary>
        [DataMember(Name="propType", EmitDefaultValue=false)]
        public string PropType { get; set; }
        /// <summary>
        /// Gets or Sets PropSqFt
        /// </summary>
        [DataMember(Name="propSqFt", EmitDefaultValue=false)]
        public string PropSqFt { get; set; }
        /// <summary>
        /// Gets or Sets BuildgSqFt
        /// </summary>
        [DataMember(Name="buildgSqFt", EmitDefaultValue=false)]
        public string BuildgSqFt { get; set; }
        /// <summary>
        /// Gets or Sets BuildgSqSource
        /// </summary>
        [DataMember(Name="buildgSqSource", EmitDefaultValue=false)]
        public BuildingSqftSource BuildgSqSource { get; set; }
        /// <summary>
        /// Gets or Sets LandUse
        /// </summary>
        [DataMember(Name="landUse", EmitDefaultValue=false)]
        public LandUse LandUse { get; set; }
        /// <summary>
        /// Gets or Sets Construction
        /// </summary>
        [DataMember(Name="construction", EmitDefaultValue=false)]
        public Construction Construction { get; set; }
        /// <summary>
        /// Gets or Sets RoofType
        /// </summary>
        [DataMember(Name="roofType", EmitDefaultValue=false)]
        public RoofType RoofType { get; set; }
        /// <summary>
        /// Gets or Sets Subdivision
        /// </summary>
        [DataMember(Name="subdivision", EmitDefaultValue=false)]
        public string Subdivision { get; set; }
        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public Geometry Geometry { get; set; }
        /// <summary>
        /// Gets or Sets BuiltYear
        /// </summary>
        [DataMember(Name="builtYear", EmitDefaultValue=false)]
        public string BuiltYear { get; set; }
        /// <summary>
        /// Gets or Sets Bedrooms
        /// </summary>
        [DataMember(Name="bedrooms", EmitDefaultValue=false)]
        public string Bedrooms { get; set; }
        /// <summary>
        /// Gets or Sets Baths
        /// </summary>
        [DataMember(Name="baths", EmitDefaultValue=false)]
        public string Baths { get; set; }
        /// <summary>
        /// Gets or Sets Pool
        /// </summary>
        [DataMember(Name="pool", EmitDefaultValue=false)]
        public string Pool { get; set; }
        /// <summary>
        /// Gets or Sets FirePlace
        /// </summary>
        [DataMember(Name="firePlace", EmitDefaultValue=false)]
        public string FirePlace { get; set; }
        /// <summary>
        /// Gets or Sets MobileHome
        /// </summary>
        [DataMember(Name="mobileHome", EmitDefaultValue=false)]
        public string MobileHome { get; set; }
        /// <summary>
        /// Gets or Sets HeatingType
        /// </summary>
        [DataMember(Name="heatingType", EmitDefaultValue=false)]
        public HeatingType HeatingType { get; set; }
        /// <summary>
        /// Gets or Sets CoolingType
        /// </summary>
        [DataMember(Name="coolingType", EmitDefaultValue=false)]
        public CoolingType CoolingType { get; set; }
        /// <summary>
        /// Gets or Sets AssessedValue
        /// </summary>
        [DataMember(Name="assessedValue", EmitDefaultValue=false)]
        public string AssessedValue { get; set; }
        /// <summary>
        /// Gets or Sets MarketValue
        /// </summary>
        [DataMember(Name="marketValue", EmitDefaultValue=false)]
        public string MarketValue { get; set; }
        /// <summary>
        /// Gets or Sets AppraisedValue
        /// </summary>
        [DataMember(Name="appraisedValue", EmitDefaultValue=false)]
        public string AppraisedValue { get; set; }
        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }
        /// <summary>
        /// Gets or Sets TaxExemptions
        /// </summary>
        [DataMember(Name="taxExemptions", EmitDefaultValue=false)]
        public List<TaxExemption> TaxExemptions { get; set; }
        /// <summary>
        /// Gets or Sets CaExemptions
        /// </summary>
        [DataMember(Name="caExemptions", EmitDefaultValue=false)]
        public CaExemptions CaExemptions { get; set; }
        /// <summary>
        /// Gets or Sets SalesDate
        /// </summary>
        [DataMember(Name="salesDate", EmitDefaultValue=false)]
        public string SalesDate { get; set; }
        /// <summary>
        /// Gets or Sets PriorSaleDate
        /// </summary>
        [DataMember(Name="priorSaleDate", EmitDefaultValue=false)]
        public string PriorSaleDate { get; set; }
        /// <summary>
        /// Gets or Sets PriorSalesPrice
        /// </summary>
        [DataMember(Name="priorSalesPrice", EmitDefaultValue=false)]
        public string PriorSalesPrice { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyAttributes {\n");
            sb.Append("  PbKey: ").Append(PbKey).Append("\n");
            sb.Append("  PropApn: ").Append(PropApn).Append("\n");
            sb.Append("  PropType: ").Append(PropType).Append("\n");
            sb.Append("  PropSqFt: ").Append(PropSqFt).Append("\n");
            sb.Append("  BuildgSqFt: ").Append(BuildgSqFt).Append("\n");
            sb.Append("  BuildgSqSource: ").Append(BuildgSqSource).Append("\n");
            sb.Append("  LandUse: ").Append(LandUse).Append("\n");
            sb.Append("  Construction: ").Append(Construction).Append("\n");
            sb.Append("  RoofType: ").Append(RoofType).Append("\n");
            sb.Append("  Subdivision: ").Append(Subdivision).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  BuiltYear: ").Append(BuiltYear).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  Baths: ").Append(Baths).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  FirePlace: ").Append(FirePlace).Append("\n");
            sb.Append("  MobileHome: ").Append(MobileHome).Append("\n");
            sb.Append("  HeatingType: ").Append(HeatingType).Append("\n");
            sb.Append("  CoolingType: ").Append(CoolingType).Append("\n");
            sb.Append("  AssessedValue: ").Append(AssessedValue).Append("\n");
            sb.Append("  MarketValue: ").Append(MarketValue).Append("\n");
            sb.Append("  AppraisedValue: ").Append(AppraisedValue).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxExemptions: ").Append(TaxExemptions).Append("\n");
            sb.Append("  CaExemptions: ").Append(CaExemptions).Append("\n");
            sb.Append("  SalesDate: ").Append(SalesDate).Append("\n");
            sb.Append("  PriorSaleDate: ").Append(PriorSaleDate).Append("\n");
            sb.Append("  PriorSalesPrice: ").Append(PriorSalesPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PropertyAttributes);
        }

        /// <summary>
        /// Returns true if PropertyAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of PropertyAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PbKey == other.PbKey ||
                    this.PbKey != null &&
                    this.PbKey.Equals(other.PbKey)
                ) && 
                (
                    this.PropApn == other.PropApn ||
                    this.PropApn != null &&
                    this.PropApn.Equals(other.PropApn)
                ) && 
                (
                    this.PropType == other.PropType ||
                    this.PropType != null &&
                    this.PropType.Equals(other.PropType)
                ) && 
                (
                    this.PropSqFt == other.PropSqFt ||
                    this.PropSqFt != null &&
                    this.PropSqFt.Equals(other.PropSqFt)
                ) && 
                (
                    this.BuildgSqFt == other.BuildgSqFt ||
                    this.BuildgSqFt != null &&
                    this.BuildgSqFt.Equals(other.BuildgSqFt)
                ) && 
                (
                    this.BuildgSqSource == other.BuildgSqSource ||
                    this.BuildgSqSource != null &&
                    this.BuildgSqSource.Equals(other.BuildgSqSource)
                ) && 
                (
                    this.LandUse == other.LandUse ||
                    this.LandUse != null &&
                    this.LandUse.Equals(other.LandUse)
                ) && 
                (
                    this.Construction == other.Construction ||
                    this.Construction != null &&
                    this.Construction.Equals(other.Construction)
                ) && 
                (
                    this.RoofType == other.RoofType ||
                    this.RoofType != null &&
                    this.RoofType.Equals(other.RoofType)
                ) && 
                (
                    this.Subdivision == other.Subdivision ||
                    this.Subdivision != null &&
                    this.Subdivision.Equals(other.Subdivision)
                ) && 
                (
                    this.Geometry == other.Geometry ||
                    this.Geometry != null &&
                    this.Geometry.Equals(other.Geometry)
                ) && 
                (
                    this.BuiltYear == other.BuiltYear ||
                    this.BuiltYear != null &&
                    this.BuiltYear.Equals(other.BuiltYear)
                ) && 
                (
                    this.Bedrooms == other.Bedrooms ||
                    this.Bedrooms != null &&
                    this.Bedrooms.Equals(other.Bedrooms)
                ) && 
                (
                    this.Baths == other.Baths ||
                    this.Baths != null &&
                    this.Baths.Equals(other.Baths)
                ) && 
                (
                    this.Pool == other.Pool ||
                    this.Pool != null &&
                    this.Pool.Equals(other.Pool)
                ) && 
                (
                    this.FirePlace == other.FirePlace ||
                    this.FirePlace != null &&
                    this.FirePlace.Equals(other.FirePlace)
                ) && 
                (
                    this.MobileHome == other.MobileHome ||
                    this.MobileHome != null &&
                    this.MobileHome.Equals(other.MobileHome)
                ) && 
                (
                    this.HeatingType == other.HeatingType ||
                    this.HeatingType != null &&
                    this.HeatingType.Equals(other.HeatingType)
                ) && 
                (
                    this.CoolingType == other.CoolingType ||
                    this.CoolingType != null &&
                    this.CoolingType.Equals(other.CoolingType)
                ) && 
                (
                    this.AssessedValue == other.AssessedValue ||
                    this.AssessedValue != null &&
                    this.AssessedValue.Equals(other.AssessedValue)
                ) && 
                (
                    this.MarketValue == other.MarketValue ||
                    this.MarketValue != null &&
                    this.MarketValue.Equals(other.MarketValue)
                ) && 
                (
                    this.AppraisedValue == other.AppraisedValue ||
                    this.AppraisedValue != null &&
                    this.AppraisedValue.Equals(other.AppraisedValue)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.TaxExemptions == other.TaxExemptions ||
                    this.TaxExemptions != null &&
                    this.TaxExemptions.SequenceEqual(other.TaxExemptions)
                ) && 
                (
                    this.CaExemptions == other.CaExemptions ||
                    this.CaExemptions != null &&
                    this.CaExemptions.Equals(other.CaExemptions)
                ) && 
                (
                    this.SalesDate == other.SalesDate ||
                    this.SalesDate != null &&
                    this.SalesDate.Equals(other.SalesDate)
                ) && 
                (
                    this.PriorSaleDate == other.PriorSaleDate ||
                    this.PriorSaleDate != null &&
                    this.PriorSaleDate.Equals(other.PriorSaleDate)
                ) && 
                (
                    this.PriorSalesPrice == other.PriorSalesPrice ||
                    this.PriorSalesPrice != null &&
                    this.PriorSalesPrice.Equals(other.PriorSalesPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PbKey != null)
                    hash = hash * 59 + this.PbKey.GetHashCode();
                if (this.PropApn != null)
                    hash = hash * 59 + this.PropApn.GetHashCode();
                if (this.PropType != null)
                    hash = hash * 59 + this.PropType.GetHashCode();
                if (this.PropSqFt != null)
                    hash = hash * 59 + this.PropSqFt.GetHashCode();
                if (this.BuildgSqFt != null)
                    hash = hash * 59 + this.BuildgSqFt.GetHashCode();
                if (this.BuildgSqSource != null)
                    hash = hash * 59 + this.BuildgSqSource.GetHashCode();
                if (this.LandUse != null)
                    hash = hash * 59 + this.LandUse.GetHashCode();
                if (this.Construction != null)
                    hash = hash * 59 + this.Construction.GetHashCode();
                if (this.RoofType != null)
                    hash = hash * 59 + this.RoofType.GetHashCode();
                if (this.Subdivision != null)
                    hash = hash * 59 + this.Subdivision.GetHashCode();
                if (this.Geometry != null)
                    hash = hash * 59 + this.Geometry.GetHashCode();
                if (this.BuiltYear != null)
                    hash = hash * 59 + this.BuiltYear.GetHashCode();
                if (this.Bedrooms != null)
                    hash = hash * 59 + this.Bedrooms.GetHashCode();
                if (this.Baths != null)
                    hash = hash * 59 + this.Baths.GetHashCode();
                if (this.Pool != null)
                    hash = hash * 59 + this.Pool.GetHashCode();
                if (this.FirePlace != null)
                    hash = hash * 59 + this.FirePlace.GetHashCode();
                if (this.MobileHome != null)
                    hash = hash * 59 + this.MobileHome.GetHashCode();
                if (this.HeatingType != null)
                    hash = hash * 59 + this.HeatingType.GetHashCode();
                if (this.CoolingType != null)
                    hash = hash * 59 + this.CoolingType.GetHashCode();
                if (this.AssessedValue != null)
                    hash = hash * 59 + this.AssessedValue.GetHashCode();
                if (this.MarketValue != null)
                    hash = hash * 59 + this.MarketValue.GetHashCode();
                if (this.AppraisedValue != null)
                    hash = hash * 59 + this.AppraisedValue.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxExemptions != null)
                    hash = hash * 59 + this.TaxExemptions.GetHashCode();
                if (this.CaExemptions != null)
                    hash = hash * 59 + this.CaExemptions.GetHashCode();
                if (this.SalesDate != null)
                    hash = hash * 59 + this.SalesDate.GetHashCode();
                if (this.PriorSaleDate != null)
                    hash = hash * 59 + this.PriorSaleDate.GetHashCode();
                if (this.PriorSalesPrice != null)
                    hash = hash * 59 + this.PriorSalesPrice.GetHashCode();
                return hash;
            }
        }
    }

}
