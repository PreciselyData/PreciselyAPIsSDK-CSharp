/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// PropertyAttributes
    /// </summary>
    [DataContract]
    public partial class PropertyAttributes :  IEquatable<PropertyAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyAttributes" /> class.
        /// </summary>
        /// <param name="pbKey">pbKey.</param>
        /// <param name="propApn">propApn.</param>
        /// <param name="propType">propType.</param>
        /// <param name="propSqFt">propSqFt.</param>
        /// <param name="buildgSqFt">buildgSqFt.</param>
        /// <param name="buildgSqFtSource">buildgSqFtSource.</param>
        /// <param name="landUse">landUse.</param>
        /// <param name="construction">construction.</param>
        /// <param name="roofCoverType">roofCoverType.</param>
        /// <param name="subdivision">subdivision.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="builtYear">builtYear.</param>
        /// <param name="bedrooms">bedrooms.</param>
        /// <param name="baths">baths.</param>
        /// <param name="pool">pool.</param>
        /// <param name="fireplace">fireplace.</param>
        /// <param name="mobileHome">mobileHome.</param>
        /// <param name="heatingType">heatingType.</param>
        /// <param name="coolingType">coolingType.</param>
        /// <param name="assessedValue">assessedValue.</param>
        /// <param name="marketValue">marketValue.</param>
        /// <param name="appraisedValue">appraisedValue.</param>
        /// <param name="taxAmount">taxAmount.</param>
        /// <param name="taxExemptions">taxExemptions.</param>
        /// <param name="caExemptions">caExemptions.</param>
        /// <param name="salesDate">salesDate.</param>
        /// <param name="priorSaleDate">priorSaleDate.</param>
        /// <param name="priorSalesPrice">priorSalesPrice.</param>
        /// <param name="stories">stories.</param>
        /// <param name="livingSqFt">livingSqFt.</param>
        /// <param name="roofFrameType">roofFrameType.</param>
        /// <param name="foundation">foundation.</param>
        /// <param name="buildgCondition">buildgCondition.</param>
        /// <param name="buildgCount">buildgCount.</param>
        /// <param name="buildgUnitNo">buildgUnitNo.</param>
        /// <param name="buildgFeaturesSqFt">buildgFeaturesSqFt.</param>
        /// <param name="businessName">businessName.</param>
        /// <param name="taxAddress">taxAddress.</param>
        /// <param name="vacancy">vacancy.</param>
        /// <param name="owners">owners.</param>
        /// <param name="appraisedValueImp">appraisedValueImp.</param>
        /// <param name="assessedValueImp">assessedValueImp.</param>
        /// <param name="buildgType">buildgType.</param>
        /// <param name="basementType">basementType.</param>
        /// <param name="effectiveBuiltYear">effectiveBuiltYear.</param>
        /// <param name="exteriorWalls">exteriorWalls.</param>
        /// <param name="garageType">garageType.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        /// <param name="marketValueImp">marketValueImp.</param>
        /// <param name="absenteeOwner">absenteeOwner.</param>
        /// <param name="parkingSqFt">parkingSqFt.</param>
        /// <param name="replacementCost">replacementCost.</param>
        /// <param name="roofShapeType">roofShapeType.</param>
        /// <param name="buildgStyle">buildgStyle.</param>
        /// <param name="basementSqFt">basementSqFt.</param>
        public PropertyAttributes(string pbKey = default(string), string propApn = default(string), string propType = default(string), string propSqFt = default(string), string buildgSqFt = default(string), BuildingSqftSource buildgSqFtSource = default(BuildingSqftSource), LandUse landUse = default(LandUse), Construction construction = default(Construction), RoofCoverType roofCoverType = default(RoofCoverType), string subdivision = default(string), PropertyGeometry geometry = default(PropertyGeometry), string builtYear = default(string), string bedrooms = default(string), string baths = default(string), string pool = default(string), string fireplace = default(string), string mobileHome = default(string), HeatingType heatingType = default(HeatingType), CoolingType coolingType = default(CoolingType), string assessedValue = default(string), string marketValue = default(string), string appraisedValue = default(string), string taxAmount = default(string), List<TaxExemption> taxExemptions = default(List<TaxExemption>), CaExemptions caExemptions = default(CaExemptions), string salesDate = default(string), string priorSaleDate = default(string), string priorSalesPrice = default(string), Stories stories = default(Stories), string livingSqFt = default(string), RoofFrameType roofFrameType = default(RoofFrameType), Foundation foundation = default(Foundation), BuildgCondition buildgCondition = default(BuildgCondition), string buildgCount = default(string), string buildgUnitNo = default(string), List<BuildgFeaturesSqft> buildgFeaturesSqFt = default(List<BuildgFeaturesSqft>), string businessName = default(string), string taxAddress = default(string), Vacancy vacancy = default(Vacancy), List<Owners> owners = default(List<Owners>), string appraisedValueImp = default(string), string assessedValueImp = default(string), BuildgType buildgType = default(BuildgType), BasementType basementType = default(BasementType), string effectiveBuiltYear = default(string), ExteriorWalls exteriorWalls = default(ExteriorWalls), GarageType garageType = default(GarageType), string lastUpdated = default(string), string marketValueImp = default(string), AbsenteeOwner absenteeOwner = default(AbsenteeOwner), string parkingSqFt = default(string), string replacementCost = default(string), RoofShapeType roofShapeType = default(RoofShapeType), BuildgStyle buildgStyle = default(BuildgStyle), string basementSqFt = default(string))
        {
            this.PbKey = pbKey;
            this.PropApn = propApn;
            this.PropType = propType;
            this.PropSqFt = propSqFt;
            this.BuildgSqFt = buildgSqFt;
            this.BuildgSqFtSource = buildgSqFtSource;
            this.LandUse = landUse;
            this.Construction = construction;
            this.RoofCoverType = roofCoverType;
            this.Subdivision = subdivision;
            this.Geometry = geometry;
            this.BuiltYear = builtYear;
            this.Bedrooms = bedrooms;
            this.Baths = baths;
            this.Pool = pool;
            this.Fireplace = fireplace;
            this.MobileHome = mobileHome;
            this.HeatingType = heatingType;
            this.CoolingType = coolingType;
            this.AssessedValue = assessedValue;
            this.MarketValue = marketValue;
            this.AppraisedValue = appraisedValue;
            this.TaxAmount = taxAmount;
            this.TaxExemptions = taxExemptions;
            this.CaExemptions = caExemptions;
            this.SalesDate = salesDate;
            this.PriorSaleDate = priorSaleDate;
            this.PriorSalesPrice = priorSalesPrice;
            this.Stories = stories;
            this.LivingSqFt = livingSqFt;
            this.RoofFrameType = roofFrameType;
            this.Foundation = foundation;
            this.BuildgCondition = buildgCondition;
            this.BuildgCount = buildgCount;
            this.BuildgUnitNo = buildgUnitNo;
            this.BuildgFeaturesSqFt = buildgFeaturesSqFt;
            this.BusinessName = businessName;
            this.TaxAddress = taxAddress;
            this.Vacancy = vacancy;
            this.Owners = owners;
            this.AppraisedValueImp = appraisedValueImp;
            this.AssessedValueImp = assessedValueImp;
            this.BuildgType = buildgType;
            this.BasementType = basementType;
            this.EffectiveBuiltYear = effectiveBuiltYear;
            this.ExteriorWalls = exteriorWalls;
            this.GarageType = garageType;
            this.LastUpdated = lastUpdated;
            this.MarketValueImp = marketValueImp;
            this.AbsenteeOwner = absenteeOwner;
            this.ParkingSqFt = parkingSqFt;
            this.ReplacementCost = replacementCost;
            this.RoofShapeType = roofShapeType;
            this.BuildgStyle = buildgStyle;
            this.BasementSqFt = basementSqFt;
        }

        /// <summary>
        /// Gets or Sets PbKey
        /// </summary>
        [DataMember(Name="pbKey", EmitDefaultValue=false)]
        public string PbKey { get; set; }

        /// <summary>
        /// Gets or Sets PropApn
        /// </summary>
        [DataMember(Name="propApn", EmitDefaultValue=false)]
        public string PropApn { get; set; }

        /// <summary>
        /// Gets or Sets PropType
        /// </summary>
        [DataMember(Name="propType", EmitDefaultValue=false)]
        public string PropType { get; set; }

        /// <summary>
        /// Gets or Sets PropSqFt
        /// </summary>
        [DataMember(Name="propSqFt", EmitDefaultValue=false)]
        public string PropSqFt { get; set; }

        /// <summary>
        /// Gets or Sets BuildgSqFt
        /// </summary>
        [DataMember(Name="buildgSqFt", EmitDefaultValue=false)]
        public string BuildgSqFt { get; set; }

        /// <summary>
        /// Gets or Sets BuildgSqFtSource
        /// </summary>
        [DataMember(Name="buildgSqFtSource", EmitDefaultValue=false)]
        public BuildingSqftSource BuildgSqFtSource { get; set; }

        /// <summary>
        /// Gets or Sets LandUse
        /// </summary>
        [DataMember(Name="landUse", EmitDefaultValue=false)]
        public LandUse LandUse { get; set; }

        /// <summary>
        /// Gets or Sets Construction
        /// </summary>
        [DataMember(Name="construction", EmitDefaultValue=false)]
        public Construction Construction { get; set; }

        /// <summary>
        /// Gets or Sets RoofCoverType
        /// </summary>
        [DataMember(Name="roofCoverType", EmitDefaultValue=false)]
        public RoofCoverType RoofCoverType { get; set; }

        /// <summary>
        /// Gets or Sets Subdivision
        /// </summary>
        [DataMember(Name="subdivision", EmitDefaultValue=false)]
        public string Subdivision { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public PropertyGeometry Geometry { get; set; }

        /// <summary>
        /// Gets or Sets BuiltYear
        /// </summary>
        [DataMember(Name="builtYear", EmitDefaultValue=false)]
        public string BuiltYear { get; set; }

        /// <summary>
        /// Gets or Sets Bedrooms
        /// </summary>
        [DataMember(Name="bedrooms", EmitDefaultValue=false)]
        public string Bedrooms { get; set; }

        /// <summary>
        /// Gets or Sets Baths
        /// </summary>
        [DataMember(Name="baths", EmitDefaultValue=false)]
        public string Baths { get; set; }

        /// <summary>
        /// Gets or Sets Pool
        /// </summary>
        [DataMember(Name="pool", EmitDefaultValue=false)]
        public string Pool { get; set; }

        /// <summary>
        /// Gets or Sets Fireplace
        /// </summary>
        [DataMember(Name="fireplace", EmitDefaultValue=false)]
        public string Fireplace { get; set; }

        /// <summary>
        /// Gets or Sets MobileHome
        /// </summary>
        [DataMember(Name="mobileHome", EmitDefaultValue=false)]
        public string MobileHome { get; set; }

        /// <summary>
        /// Gets or Sets HeatingType
        /// </summary>
        [DataMember(Name="heatingType", EmitDefaultValue=false)]
        public HeatingType HeatingType { get; set; }

        /// <summary>
        /// Gets or Sets CoolingType
        /// </summary>
        [DataMember(Name="coolingType", EmitDefaultValue=false)]
        public CoolingType CoolingType { get; set; }

        /// <summary>
        /// Gets or Sets AssessedValue
        /// </summary>
        [DataMember(Name="assessedValue", EmitDefaultValue=false)]
        public string AssessedValue { get; set; }

        /// <summary>
        /// Gets or Sets MarketValue
        /// </summary>
        [DataMember(Name="marketValue", EmitDefaultValue=false)]
        public string MarketValue { get; set; }

        /// <summary>
        /// Gets or Sets AppraisedValue
        /// </summary>
        [DataMember(Name="appraisedValue", EmitDefaultValue=false)]
        public string AppraisedValue { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxExemptions
        /// </summary>
        [DataMember(Name="taxExemptions", EmitDefaultValue=false)]
        public List<TaxExemption> TaxExemptions { get; set; }

        /// <summary>
        /// Gets or Sets CaExemptions
        /// </summary>
        [DataMember(Name="caExemptions", EmitDefaultValue=false)]
        public CaExemptions CaExemptions { get; set; }

        /// <summary>
        /// Gets or Sets SalesDate
        /// </summary>
        [DataMember(Name="salesDate", EmitDefaultValue=false)]
        public string SalesDate { get; set; }

        /// <summary>
        /// Gets or Sets PriorSaleDate
        /// </summary>
        [DataMember(Name="priorSaleDate", EmitDefaultValue=false)]
        public string PriorSaleDate { get; set; }

        /// <summary>
        /// Gets or Sets PriorSalesPrice
        /// </summary>
        [DataMember(Name="priorSalesPrice", EmitDefaultValue=false)]
        public string PriorSalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets Stories
        /// </summary>
        [DataMember(Name="stories", EmitDefaultValue=false)]
        public Stories Stories { get; set; }

        /// <summary>
        /// Gets or Sets LivingSqFt
        /// </summary>
        [DataMember(Name="livingSqFt", EmitDefaultValue=false)]
        public string LivingSqFt { get; set; }

        /// <summary>
        /// Gets or Sets RoofFrameType
        /// </summary>
        [DataMember(Name="roofFrameType", EmitDefaultValue=false)]
        public RoofFrameType RoofFrameType { get; set; }

        /// <summary>
        /// Gets or Sets Foundation
        /// </summary>
        [DataMember(Name="foundation", EmitDefaultValue=false)]
        public Foundation Foundation { get; set; }

        /// <summary>
        /// Gets or Sets BuildgCondition
        /// </summary>
        [DataMember(Name="buildgCondition", EmitDefaultValue=false)]
        public BuildgCondition BuildgCondition { get; set; }

        /// <summary>
        /// Gets or Sets BuildgCount
        /// </summary>
        [DataMember(Name="buildgCount", EmitDefaultValue=false)]
        public string BuildgCount { get; set; }

        /// <summary>
        /// Gets or Sets BuildgUnitNo
        /// </summary>
        [DataMember(Name="buildgUnitNo", EmitDefaultValue=false)]
        public string BuildgUnitNo { get; set; }

        /// <summary>
        /// Gets or Sets BuildgFeaturesSqFt
        /// </summary>
        [DataMember(Name="buildgFeaturesSqFt", EmitDefaultValue=false)]
        public List<BuildgFeaturesSqft> BuildgFeaturesSqFt { get; set; }

        /// <summary>
        /// Gets or Sets BusinessName
        /// </summary>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Gets or Sets TaxAddress
        /// </summary>
        [DataMember(Name="taxAddress", EmitDefaultValue=false)]
        public string TaxAddress { get; set; }

        /// <summary>
        /// Gets or Sets Vacancy
        /// </summary>
        [DataMember(Name="vacancy", EmitDefaultValue=false)]
        public Vacancy Vacancy { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=false)]
        public List<Owners> Owners { get; set; }

        /// <summary>
        /// Gets or Sets AppraisedValueImp
        /// </summary>
        [DataMember(Name="appraisedValueImp", EmitDefaultValue=false)]
        public string AppraisedValueImp { get; set; }

        /// <summary>
        /// Gets or Sets AssessedValueImp
        /// </summary>
        [DataMember(Name="assessedValueImp", EmitDefaultValue=false)]
        public string AssessedValueImp { get; set; }

        /// <summary>
        /// Gets or Sets BuildgType
        /// </summary>
        [DataMember(Name="buildgType", EmitDefaultValue=false)]
        public BuildgType BuildgType { get; set; }

        /// <summary>
        /// Gets or Sets BasementType
        /// </summary>
        [DataMember(Name="basementType", EmitDefaultValue=false)]
        public BasementType BasementType { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveBuiltYear
        /// </summary>
        [DataMember(Name="effectiveBuiltYear", EmitDefaultValue=false)]
        public string EffectiveBuiltYear { get; set; }

        /// <summary>
        /// Gets or Sets ExteriorWalls
        /// </summary>
        [DataMember(Name="exteriorWalls", EmitDefaultValue=false)]
        public ExteriorWalls ExteriorWalls { get; set; }

        /// <summary>
        /// Gets or Sets GarageType
        /// </summary>
        [DataMember(Name="garageType", EmitDefaultValue=false)]
        public GarageType GarageType { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets MarketValueImp
        /// </summary>
        [DataMember(Name="marketValueImp", EmitDefaultValue=false)]
        public string MarketValueImp { get; set; }

        /// <summary>
        /// Gets or Sets AbsenteeOwner
        /// </summary>
        [DataMember(Name="absenteeOwner", EmitDefaultValue=false)]
        public AbsenteeOwner AbsenteeOwner { get; set; }

        /// <summary>
        /// Gets or Sets ParkingSqFt
        /// </summary>
        [DataMember(Name="parkingSqFt", EmitDefaultValue=false)]
        public string ParkingSqFt { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementCost
        /// </summary>
        [DataMember(Name="replacementCost", EmitDefaultValue=false)]
        public string ReplacementCost { get; set; }

        /// <summary>
        /// Gets or Sets RoofShapeType
        /// </summary>
        [DataMember(Name="roofShapeType", EmitDefaultValue=false)]
        public RoofShapeType RoofShapeType { get; set; }

        /// <summary>
        /// Gets or Sets BuildgStyle
        /// </summary>
        [DataMember(Name="buildgStyle", EmitDefaultValue=false)]
        public BuildgStyle BuildgStyle { get; set; }

        /// <summary>
        /// Gets or Sets BasementSqFt
        /// </summary>
        [DataMember(Name="basementSqFt", EmitDefaultValue=false)]
        public string BasementSqFt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyAttributes {\n");
            sb.Append("  PbKey: ").Append(PbKey).Append("\n");
            sb.Append("  PropApn: ").Append(PropApn).Append("\n");
            sb.Append("  PropType: ").Append(PropType).Append("\n");
            sb.Append("  PropSqFt: ").Append(PropSqFt).Append("\n");
            sb.Append("  BuildgSqFt: ").Append(BuildgSqFt).Append("\n");
            sb.Append("  BuildgSqFtSource: ").Append(BuildgSqFtSource).Append("\n");
            sb.Append("  LandUse: ").Append(LandUse).Append("\n");
            sb.Append("  Construction: ").Append(Construction).Append("\n");
            sb.Append("  RoofCoverType: ").Append(RoofCoverType).Append("\n");
            sb.Append("  Subdivision: ").Append(Subdivision).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  BuiltYear: ").Append(BuiltYear).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  Baths: ").Append(Baths).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  Fireplace: ").Append(Fireplace).Append("\n");
            sb.Append("  MobileHome: ").Append(MobileHome).Append("\n");
            sb.Append("  HeatingType: ").Append(HeatingType).Append("\n");
            sb.Append("  CoolingType: ").Append(CoolingType).Append("\n");
            sb.Append("  AssessedValue: ").Append(AssessedValue).Append("\n");
            sb.Append("  MarketValue: ").Append(MarketValue).Append("\n");
            sb.Append("  AppraisedValue: ").Append(AppraisedValue).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxExemptions: ").Append(TaxExemptions).Append("\n");
            sb.Append("  CaExemptions: ").Append(CaExemptions).Append("\n");
            sb.Append("  SalesDate: ").Append(SalesDate).Append("\n");
            sb.Append("  PriorSaleDate: ").Append(PriorSaleDate).Append("\n");
            sb.Append("  PriorSalesPrice: ").Append(PriorSalesPrice).Append("\n");
            sb.Append("  Stories: ").Append(Stories).Append("\n");
            sb.Append("  LivingSqFt: ").Append(LivingSqFt).Append("\n");
            sb.Append("  RoofFrameType: ").Append(RoofFrameType).Append("\n");
            sb.Append("  Foundation: ").Append(Foundation).Append("\n");
            sb.Append("  BuildgCondition: ").Append(BuildgCondition).Append("\n");
            sb.Append("  BuildgCount: ").Append(BuildgCount).Append("\n");
            sb.Append("  BuildgUnitNo: ").Append(BuildgUnitNo).Append("\n");
            sb.Append("  BuildgFeaturesSqFt: ").Append(BuildgFeaturesSqFt).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  TaxAddress: ").Append(TaxAddress).Append("\n");
            sb.Append("  Vacancy: ").Append(Vacancy).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  AppraisedValueImp: ").Append(AppraisedValueImp).Append("\n");
            sb.Append("  AssessedValueImp: ").Append(AssessedValueImp).Append("\n");
            sb.Append("  BuildgType: ").Append(BuildgType).Append("\n");
            sb.Append("  BasementType: ").Append(BasementType).Append("\n");
            sb.Append("  EffectiveBuiltYear: ").Append(EffectiveBuiltYear).Append("\n");
            sb.Append("  ExteriorWalls: ").Append(ExteriorWalls).Append("\n");
            sb.Append("  GarageType: ").Append(GarageType).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  MarketValueImp: ").Append(MarketValueImp).Append("\n");
            sb.Append("  AbsenteeOwner: ").Append(AbsenteeOwner).Append("\n");
            sb.Append("  ParkingSqFt: ").Append(ParkingSqFt).Append("\n");
            sb.Append("  ReplacementCost: ").Append(ReplacementCost).Append("\n");
            sb.Append("  RoofShapeType: ").Append(RoofShapeType).Append("\n");
            sb.Append("  BuildgStyle: ").Append(BuildgStyle).Append("\n");
            sb.Append("  BasementSqFt: ").Append(BasementSqFt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyAttributes);
        }

        /// <summary>
        /// Returns true if PropertyAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PbKey == input.PbKey ||
                    (this.PbKey != null &&
                    this.PbKey.Equals(input.PbKey))
                ) && 
                (
                    this.PropApn == input.PropApn ||
                    (this.PropApn != null &&
                    this.PropApn.Equals(input.PropApn))
                ) && 
                (
                    this.PropType == input.PropType ||
                    (this.PropType != null &&
                    this.PropType.Equals(input.PropType))
                ) && 
                (
                    this.PropSqFt == input.PropSqFt ||
                    (this.PropSqFt != null &&
                    this.PropSqFt.Equals(input.PropSqFt))
                ) && 
                (
                    this.BuildgSqFt == input.BuildgSqFt ||
                    (this.BuildgSqFt != null &&
                    this.BuildgSqFt.Equals(input.BuildgSqFt))
                ) && 
                (
                    this.BuildgSqFtSource == input.BuildgSqFtSource ||
                    (this.BuildgSqFtSource != null &&
                    this.BuildgSqFtSource.Equals(input.BuildgSqFtSource))
                ) && 
                (
                    this.LandUse == input.LandUse ||
                    (this.LandUse != null &&
                    this.LandUse.Equals(input.LandUse))
                ) && 
                (
                    this.Construction == input.Construction ||
                    (this.Construction != null &&
                    this.Construction.Equals(input.Construction))
                ) && 
                (
                    this.RoofCoverType == input.RoofCoverType ||
                    (this.RoofCoverType != null &&
                    this.RoofCoverType.Equals(input.RoofCoverType))
                ) && 
                (
                    this.Subdivision == input.Subdivision ||
                    (this.Subdivision != null &&
                    this.Subdivision.Equals(input.Subdivision))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.BuiltYear == input.BuiltYear ||
                    (this.BuiltYear != null &&
                    this.BuiltYear.Equals(input.BuiltYear))
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    (this.Bedrooms != null &&
                    this.Bedrooms.Equals(input.Bedrooms))
                ) && 
                (
                    this.Baths == input.Baths ||
                    (this.Baths != null &&
                    this.Baths.Equals(input.Baths))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.Fireplace == input.Fireplace ||
                    (this.Fireplace != null &&
                    this.Fireplace.Equals(input.Fireplace))
                ) && 
                (
                    this.MobileHome == input.MobileHome ||
                    (this.MobileHome != null &&
                    this.MobileHome.Equals(input.MobileHome))
                ) && 
                (
                    this.HeatingType == input.HeatingType ||
                    (this.HeatingType != null &&
                    this.HeatingType.Equals(input.HeatingType))
                ) && 
                (
                    this.CoolingType == input.CoolingType ||
                    (this.CoolingType != null &&
                    this.CoolingType.Equals(input.CoolingType))
                ) && 
                (
                    this.AssessedValue == input.AssessedValue ||
                    (this.AssessedValue != null &&
                    this.AssessedValue.Equals(input.AssessedValue))
                ) && 
                (
                    this.MarketValue == input.MarketValue ||
                    (this.MarketValue != null &&
                    this.MarketValue.Equals(input.MarketValue))
                ) && 
                (
                    this.AppraisedValue == input.AppraisedValue ||
                    (this.AppraisedValue != null &&
                    this.AppraisedValue.Equals(input.AppraisedValue))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.TaxExemptions == input.TaxExemptions ||
                    this.TaxExemptions != null &&
                    input.TaxExemptions != null &&
                    this.TaxExemptions.SequenceEqual(input.TaxExemptions)
                ) && 
                (
                    this.CaExemptions == input.CaExemptions ||
                    (this.CaExemptions != null &&
                    this.CaExemptions.Equals(input.CaExemptions))
                ) && 
                (
                    this.SalesDate == input.SalesDate ||
                    (this.SalesDate != null &&
                    this.SalesDate.Equals(input.SalesDate))
                ) && 
                (
                    this.PriorSaleDate == input.PriorSaleDate ||
                    (this.PriorSaleDate != null &&
                    this.PriorSaleDate.Equals(input.PriorSaleDate))
                ) && 
                (
                    this.PriorSalesPrice == input.PriorSalesPrice ||
                    (this.PriorSalesPrice != null &&
                    this.PriorSalesPrice.Equals(input.PriorSalesPrice))
                ) && 
                (
                    this.Stories == input.Stories ||
                    (this.Stories != null &&
                    this.Stories.Equals(input.Stories))
                ) && 
                (
                    this.LivingSqFt == input.LivingSqFt ||
                    (this.LivingSqFt != null &&
                    this.LivingSqFt.Equals(input.LivingSqFt))
                ) && 
                (
                    this.RoofFrameType == input.RoofFrameType ||
                    (this.RoofFrameType != null &&
                    this.RoofFrameType.Equals(input.RoofFrameType))
                ) && 
                (
                    this.Foundation == input.Foundation ||
                    (this.Foundation != null &&
                    this.Foundation.Equals(input.Foundation))
                ) && 
                (
                    this.BuildgCondition == input.BuildgCondition ||
                    (this.BuildgCondition != null &&
                    this.BuildgCondition.Equals(input.BuildgCondition))
                ) && 
                (
                    this.BuildgCount == input.BuildgCount ||
                    (this.BuildgCount != null &&
                    this.BuildgCount.Equals(input.BuildgCount))
                ) && 
                (
                    this.BuildgUnitNo == input.BuildgUnitNo ||
                    (this.BuildgUnitNo != null &&
                    this.BuildgUnitNo.Equals(input.BuildgUnitNo))
                ) && 
                (
                    this.BuildgFeaturesSqFt == input.BuildgFeaturesSqFt ||
                    this.BuildgFeaturesSqFt != null &&
                    input.BuildgFeaturesSqFt != null &&
                    this.BuildgFeaturesSqFt.SequenceEqual(input.BuildgFeaturesSqFt)
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.TaxAddress == input.TaxAddress ||
                    (this.TaxAddress != null &&
                    this.TaxAddress.Equals(input.TaxAddress))
                ) && 
                (
                    this.Vacancy == input.Vacancy ||
                    (this.Vacancy != null &&
                    this.Vacancy.Equals(input.Vacancy))
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.AppraisedValueImp == input.AppraisedValueImp ||
                    (this.AppraisedValueImp != null &&
                    this.AppraisedValueImp.Equals(input.AppraisedValueImp))
                ) && 
                (
                    this.AssessedValueImp == input.AssessedValueImp ||
                    (this.AssessedValueImp != null &&
                    this.AssessedValueImp.Equals(input.AssessedValueImp))
                ) && 
                (
                    this.BuildgType == input.BuildgType ||
                    (this.BuildgType != null &&
                    this.BuildgType.Equals(input.BuildgType))
                ) && 
                (
                    this.BasementType == input.BasementType ||
                    (this.BasementType != null &&
                    this.BasementType.Equals(input.BasementType))
                ) && 
                (
                    this.EffectiveBuiltYear == input.EffectiveBuiltYear ||
                    (this.EffectiveBuiltYear != null &&
                    this.EffectiveBuiltYear.Equals(input.EffectiveBuiltYear))
                ) && 
                (
                    this.ExteriorWalls == input.ExteriorWalls ||
                    (this.ExteriorWalls != null &&
                    this.ExteriorWalls.Equals(input.ExteriorWalls))
                ) && 
                (
                    this.GarageType == input.GarageType ||
                    (this.GarageType != null &&
                    this.GarageType.Equals(input.GarageType))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.MarketValueImp == input.MarketValueImp ||
                    (this.MarketValueImp != null &&
                    this.MarketValueImp.Equals(input.MarketValueImp))
                ) && 
                (
                    this.AbsenteeOwner == input.AbsenteeOwner ||
                    (this.AbsenteeOwner != null &&
                    this.AbsenteeOwner.Equals(input.AbsenteeOwner))
                ) && 
                (
                    this.ParkingSqFt == input.ParkingSqFt ||
                    (this.ParkingSqFt != null &&
                    this.ParkingSqFt.Equals(input.ParkingSqFt))
                ) && 
                (
                    this.ReplacementCost == input.ReplacementCost ||
                    (this.ReplacementCost != null &&
                    this.ReplacementCost.Equals(input.ReplacementCost))
                ) && 
                (
                    this.RoofShapeType == input.RoofShapeType ||
                    (this.RoofShapeType != null &&
                    this.RoofShapeType.Equals(input.RoofShapeType))
                ) && 
                (
                    this.BuildgStyle == input.BuildgStyle ||
                    (this.BuildgStyle != null &&
                    this.BuildgStyle.Equals(input.BuildgStyle))
                ) && 
                (
                    this.BasementSqFt == input.BasementSqFt ||
                    (this.BasementSqFt != null &&
                    this.BasementSqFt.Equals(input.BasementSqFt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PbKey != null)
                    hashCode = hashCode * 59 + this.PbKey.GetHashCode();
                if (this.PropApn != null)
                    hashCode = hashCode * 59 + this.PropApn.GetHashCode();
                if (this.PropType != null)
                    hashCode = hashCode * 59 + this.PropType.GetHashCode();
                if (this.PropSqFt != null)
                    hashCode = hashCode * 59 + this.PropSqFt.GetHashCode();
                if (this.BuildgSqFt != null)
                    hashCode = hashCode * 59 + this.BuildgSqFt.GetHashCode();
                if (this.BuildgSqFtSource != null)
                    hashCode = hashCode * 59 + this.BuildgSqFtSource.GetHashCode();
                if (this.LandUse != null)
                    hashCode = hashCode * 59 + this.LandUse.GetHashCode();
                if (this.Construction != null)
                    hashCode = hashCode * 59 + this.Construction.GetHashCode();
                if (this.RoofCoverType != null)
                    hashCode = hashCode * 59 + this.RoofCoverType.GetHashCode();
                if (this.Subdivision != null)
                    hashCode = hashCode * 59 + this.Subdivision.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.BuiltYear != null)
                    hashCode = hashCode * 59 + this.BuiltYear.GetHashCode();
                if (this.Bedrooms != null)
                    hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                if (this.Baths != null)
                    hashCode = hashCode * 59 + this.Baths.GetHashCode();
                if (this.Pool != null)
                    hashCode = hashCode * 59 + this.Pool.GetHashCode();
                if (this.Fireplace != null)
                    hashCode = hashCode * 59 + this.Fireplace.GetHashCode();
                if (this.MobileHome != null)
                    hashCode = hashCode * 59 + this.MobileHome.GetHashCode();
                if (this.HeatingType != null)
                    hashCode = hashCode * 59 + this.HeatingType.GetHashCode();
                if (this.CoolingType != null)
                    hashCode = hashCode * 59 + this.CoolingType.GetHashCode();
                if (this.AssessedValue != null)
                    hashCode = hashCode * 59 + this.AssessedValue.GetHashCode();
                if (this.MarketValue != null)
                    hashCode = hashCode * 59 + this.MarketValue.GetHashCode();
                if (this.AppraisedValue != null)
                    hashCode = hashCode * 59 + this.AppraisedValue.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxExemptions != null)
                    hashCode = hashCode * 59 + this.TaxExemptions.GetHashCode();
                if (this.CaExemptions != null)
                    hashCode = hashCode * 59 + this.CaExemptions.GetHashCode();
                if (this.SalesDate != null)
                    hashCode = hashCode * 59 + this.SalesDate.GetHashCode();
                if (this.PriorSaleDate != null)
                    hashCode = hashCode * 59 + this.PriorSaleDate.GetHashCode();
                if (this.PriorSalesPrice != null)
                    hashCode = hashCode * 59 + this.PriorSalesPrice.GetHashCode();
                if (this.Stories != null)
                    hashCode = hashCode * 59 + this.Stories.GetHashCode();
                if (this.LivingSqFt != null)
                    hashCode = hashCode * 59 + this.LivingSqFt.GetHashCode();
                if (this.RoofFrameType != null)
                    hashCode = hashCode * 59 + this.RoofFrameType.GetHashCode();
                if (this.Foundation != null)
                    hashCode = hashCode * 59 + this.Foundation.GetHashCode();
                if (this.BuildgCondition != null)
                    hashCode = hashCode * 59 + this.BuildgCondition.GetHashCode();
                if (this.BuildgCount != null)
                    hashCode = hashCode * 59 + this.BuildgCount.GetHashCode();
                if (this.BuildgUnitNo != null)
                    hashCode = hashCode * 59 + this.BuildgUnitNo.GetHashCode();
                if (this.BuildgFeaturesSqFt != null)
                    hashCode = hashCode * 59 + this.BuildgFeaturesSqFt.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.TaxAddress != null)
                    hashCode = hashCode * 59 + this.TaxAddress.GetHashCode();
                if (this.Vacancy != null)
                    hashCode = hashCode * 59 + this.Vacancy.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                if (this.AppraisedValueImp != null)
                    hashCode = hashCode * 59 + this.AppraisedValueImp.GetHashCode();
                if (this.AssessedValueImp != null)
                    hashCode = hashCode * 59 + this.AssessedValueImp.GetHashCode();
                if (this.BuildgType != null)
                    hashCode = hashCode * 59 + this.BuildgType.GetHashCode();
                if (this.BasementType != null)
                    hashCode = hashCode * 59 + this.BasementType.GetHashCode();
                if (this.EffectiveBuiltYear != null)
                    hashCode = hashCode * 59 + this.EffectiveBuiltYear.GetHashCode();
                if (this.ExteriorWalls != null)
                    hashCode = hashCode * 59 + this.ExteriorWalls.GetHashCode();
                if (this.GarageType != null)
                    hashCode = hashCode * 59 + this.GarageType.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.MarketValueImp != null)
                    hashCode = hashCode * 59 + this.MarketValueImp.GetHashCode();
                if (this.AbsenteeOwner != null)
                    hashCode = hashCode * 59 + this.AbsenteeOwner.GetHashCode();
                if (this.ParkingSqFt != null)
                    hashCode = hashCode * 59 + this.ParkingSqFt.GetHashCode();
                if (this.ReplacementCost != null)
                    hashCode = hashCode * 59 + this.ReplacementCost.GetHashCode();
                if (this.RoofShapeType != null)
                    hashCode = hashCode * 59 + this.RoofShapeType.GetHashCode();
                if (this.BuildgStyle != null)
                    hashCode = hashCode * 59 + this.BuildgStyle.GetHashCode();
                if (this.BasementSqFt != null)
                    hashCode = hashCode * 59 + this.BasementSqFt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
