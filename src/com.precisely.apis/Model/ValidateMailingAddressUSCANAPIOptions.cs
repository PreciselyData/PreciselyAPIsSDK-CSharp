/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressUSCANAPIOptions
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressUSCANAPIOptions :  IEquatable<ValidateMailingAddressUSCANAPIOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressUSCANAPIOptions" /> class.
        /// </summary>
        /// <param name="OutputAddressBlocks">Specifies whether to return a formatted version of the address. (default to &quot;Y&quot;).</param>
        /// <param name="PerformUSProcessing">Specifies whether or not to process U.S. addresses. (default to &quot;Y&quot;).</param>
        /// <param name="PerformDPV">Delivery Point Validation (DPV®) validates that a specific address exists (default to &quot;N&quot;).</param>
        /// <param name="OutputFormattedOnFail">Specifies whether to return a formatted address when an address cannot be validated. (default to &quot;N&quot;).</param>
        /// <param name="OutputPostalCodeSeparator">Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes. (default to &quot;Y&quot;).</param>
        /// <param name="OutputCountryFormat">Specifies the format to use for the country name returned in the Country output field. (default to &quot;E&quot;).</param>
        /// <param name="KeepMultimatch">Indicates whether to return multiple address for input addresses that have more than one possible matches. (default to &quot;N&quot;).</param>
        /// <param name="OutputCasing">Specifies the casing of the output address. M for mixed case and U for upper case. (default to &quot;M&quot;).</param>
        /// <param name="MaximumResults">Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned. (default to &quot;10&quot;).</param>
        /// <param name="OutputRecordType">Specifies the type of the output record. (default to &quot;A&quot;).</param>
        /// <param name="OutputFieldLevelReturnCodes">Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes. (default to &quot;N&quot;).</param>
        /// <param name="DPVDetermineNoStat">Determines the no stat status of an address which means it exists but cannot receive mails. (default to &quot;N&quot;).</param>
        /// <param name="StreetMatchingStrictness">Specifies the algorithm to determe if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="CanFrenchApartmentLabel">Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address.  (default to &quot;Appartement&quot;).</param>
        /// <param name="OutputAbbreviatedAlias">Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters. (default to &quot;N&quot;).</param>
        /// <param name="DPVSuccessfulStatusCondition">Selecting the match condition where a DPV result does NOT cause a record to fail. (default to &quot;A&quot;).</param>
        /// <param name="StandardAddressPMBLine">Specifies where Private Mailbox (PMB) information is placed. (default to &quot;N&quot;).</param>
        /// <param name="FirmMatchingStrictness">Specifies the algorithm to determining if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="CanRuralRouteFormat">Specifies where to place rural route delivery information. (default to &quot;A&quot;).</param>
        /// <param name="CanPreferHouseNum">Specifies whether to select a house number of postal code in case of conflict. (default to &quot;N&quot;).</param>
        /// <param name="OutputPreferredAlias">Specifies whether to use a street&#39;s preferred alias in the output. (default to &quot;N&quot;).</param>
        /// <param name="DirectionalMatchingStrictness">Specifies the algorithm to determine if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="ExtractFirm">Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field. (default to &quot;N&quot;).</param>
        /// <param name="FailOnCMRAMatch">Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures? (default to &quot;N&quot;).</param>
        /// <param name="CanNonCivicFormat">Specifies whether or not non-civic keywords are abbreviated in the output.  (default to &quot;A&quot;).</param>
        /// <param name="CanSSLVRFlg">Changes the civic and/or suite information to match the LVR or single-single record. (default to &quot;N&quot;).</param>
        /// <param name="OutputStreetNameAlias">Specifies how to handle street name aliases used in the input. This is specific to US. (default to &quot;Y&quot;).</param>
        /// <param name="PerformEWS">Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database. (default to &quot;N&quot;).</param>
        /// <param name="CanOutputCityFormat">Specifies whether to use the long, medium, or short version of the city if the city has a long name. (default to &quot;D&quot;).</param>
        /// <param name="DualAddressLogic">Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.) (default to &quot;N&quot;).</param>
        /// <param name="PerformSuiteLink">Specifies whether to perform SuiteLink processing. (default to &quot;N&quot;).</param>
        /// <param name="CanStandardAddressFormat">Specifies where to place secondary address information in the output address. (default to &quot;D&quot;).</param>
        /// <param name="OutputPreferredCity">Specifies whether the preferred last line city name should be stored. (default to &quot;Z&quot;).</param>
        /// <param name="OutputMultinationalCharacters">Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents. (default to &quot;N&quot;).</param>
        /// <param name="CanDeliveryOfficeFormat">Specifies where to place station information. (default to &quot;I&quot;).</param>
        /// <param name="PerformLACSLink">Facilitates the conversion of rural route address converting into street-style address using the LACS. (default to &quot;Y&quot;).</param>
        /// <param name="CanDualAddressLogic">Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information. (default to &quot;D&quot;).</param>
        /// <param name="ExtractUrb">Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field.  (default to &quot;N&quot;).</param>
        /// <param name="StandardAddressFormat">Specifies where to place secondary address information for U.S. addresses. (default to &quot;C&quot;).</param>
        /// <param name="CanFrenchFormat">Specifies how to determine the language (English or French) to use to format the address and directional. (default to &quot;C&quot;).</param>
        /// <param name="DPVDetermineVacancy">Determines if the location has been unoccupied for at least 90 days. (default to &quot;N&quot;).</param>
        /// <param name="CanEnglishApartmentLabel">Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses. (default to &quot;Apt&quot;).</param>
        /// <param name="SuppressZplusPhantomCarrierR777">Specifies whether to supress addresses with Carrier Route R777. (default to &quot;N&quot;).</param>
        /// <param name="CanOutputCityAlias">Specifies whether or not to return the city alias when the alias is in the input address. (default to &quot;N&quot;).</param>
        /// <param name="OutputShortCityName">Specifies how to format city names that have short city name or non-mailing city name alternatives. (default to &quot;N&quot;).</param>
        public ValidateMailingAddressUSCANAPIOptions(string OutputAddressBlocks = null, string PerformUSProcessing = null, string PerformDPV = null, string OutputFormattedOnFail = null, string OutputPostalCodeSeparator = null, string OutputCountryFormat = null, string KeepMultimatch = null, string OutputCasing = null, string MaximumResults = null, string OutputRecordType = null, string OutputFieldLevelReturnCodes = null, string DPVDetermineNoStat = null, string StreetMatchingStrictness = null, string CanFrenchApartmentLabel = null, string OutputAbbreviatedAlias = null, string DPVSuccessfulStatusCondition = null, string StandardAddressPMBLine = null, string FirmMatchingStrictness = null, string CanRuralRouteFormat = null, string CanPreferHouseNum = null, string OutputPreferredAlias = null, string DirectionalMatchingStrictness = null, string ExtractFirm = null, string FailOnCMRAMatch = null, string CanNonCivicFormat = null, string CanSSLVRFlg = null, string OutputStreetNameAlias = null, string PerformEWS = null, string CanOutputCityFormat = null, string DualAddressLogic = null, string PerformSuiteLink = null, string CanStandardAddressFormat = null, string OutputPreferredCity = null, string OutputMultinationalCharacters = null, string CanDeliveryOfficeFormat = null, string PerformLACSLink = null, string CanDualAddressLogic = null, string ExtractUrb = null, string StandardAddressFormat = null, string CanFrenchFormat = null, string DPVDetermineVacancy = null, string CanEnglishApartmentLabel = null, string SuppressZplusPhantomCarrierR777 = null, string CanOutputCityAlias = null, string OutputShortCityName = null)
        {
            // use default value if no "OutputAddressBlocks" provided
            if (OutputAddressBlocks == null)
            {
                this.OutputAddressBlocks = "Y";
            }
            else
            {
                this.OutputAddressBlocks = OutputAddressBlocks;
            }
            // use default value if no "PerformUSProcessing" provided
            if (PerformUSProcessing == null)
            {
                this.PerformUSProcessing = "Y";
            }
            else
            {
                this.PerformUSProcessing = PerformUSProcessing;
            }
            // use default value if no "PerformDPV" provided
            if (PerformDPV == null)
            {
                this.PerformDPV = "N";
            }
            else
            {
                this.PerformDPV = PerformDPV;
            }
            // use default value if no "OutputFormattedOnFail" provided
            if (OutputFormattedOnFail == null)
            {
                this.OutputFormattedOnFail = "N";
            }
            else
            {
                this.OutputFormattedOnFail = OutputFormattedOnFail;
            }
            // use default value if no "OutputPostalCodeSeparator" provided
            if (OutputPostalCodeSeparator == null)
            {
                this.OutputPostalCodeSeparator = "Y";
            }
            else
            {
                this.OutputPostalCodeSeparator = OutputPostalCodeSeparator;
            }
            // use default value if no "OutputCountryFormat" provided
            if (OutputCountryFormat == null)
            {
                this.OutputCountryFormat = "E";
            }
            else
            {
                this.OutputCountryFormat = OutputCountryFormat;
            }
            // use default value if no "KeepMultimatch" provided
            if (KeepMultimatch == null)
            {
                this.KeepMultimatch = "N";
            }
            else
            {
                this.KeepMultimatch = KeepMultimatch;
            }
            // use default value if no "OutputCasing" provided
            if (OutputCasing == null)
            {
                this.OutputCasing = "M";
            }
            else
            {
                this.OutputCasing = OutputCasing;
            }
            // use default value if no "MaximumResults" provided
            if (MaximumResults == null)
            {
                this.MaximumResults = "10";
            }
            else
            {
                this.MaximumResults = MaximumResults;
            }
            // use default value if no "OutputRecordType" provided
            if (OutputRecordType == null)
            {
                this.OutputRecordType = "A";
            }
            else
            {
                this.OutputRecordType = OutputRecordType;
            }
            // use default value if no "OutputFieldLevelReturnCodes" provided
            if (OutputFieldLevelReturnCodes == null)
            {
                this.OutputFieldLevelReturnCodes = "N";
            }
            else
            {
                this.OutputFieldLevelReturnCodes = OutputFieldLevelReturnCodes;
            }
            // use default value if no "DPVDetermineNoStat" provided
            if (DPVDetermineNoStat == null)
            {
                this.DPVDetermineNoStat = "N";
            }
            else
            {
                this.DPVDetermineNoStat = DPVDetermineNoStat;
            }
            // use default value if no "StreetMatchingStrictness" provided
            if (StreetMatchingStrictness == null)
            {
                this.StreetMatchingStrictness = "M";
            }
            else
            {
                this.StreetMatchingStrictness = StreetMatchingStrictness;
            }
            // use default value if no "CanFrenchApartmentLabel" provided
            if (CanFrenchApartmentLabel == null)
            {
                this.CanFrenchApartmentLabel = "Appartement";
            }
            else
            {
                this.CanFrenchApartmentLabel = CanFrenchApartmentLabel;
            }
            // use default value if no "OutputAbbreviatedAlias" provided
            if (OutputAbbreviatedAlias == null)
            {
                this.OutputAbbreviatedAlias = "N";
            }
            else
            {
                this.OutputAbbreviatedAlias = OutputAbbreviatedAlias;
            }
            // use default value if no "DPVSuccessfulStatusCondition" provided
            if (DPVSuccessfulStatusCondition == null)
            {
                this.DPVSuccessfulStatusCondition = "A";
            }
            else
            {
                this.DPVSuccessfulStatusCondition = DPVSuccessfulStatusCondition;
            }
            // use default value if no "StandardAddressPMBLine" provided
            if (StandardAddressPMBLine == null)
            {
                this.StandardAddressPMBLine = "N";
            }
            else
            {
                this.StandardAddressPMBLine = StandardAddressPMBLine;
            }
            // use default value if no "FirmMatchingStrictness" provided
            if (FirmMatchingStrictness == null)
            {
                this.FirmMatchingStrictness = "M";
            }
            else
            {
                this.FirmMatchingStrictness = FirmMatchingStrictness;
            }
            // use default value if no "CanRuralRouteFormat" provided
            if (CanRuralRouteFormat == null)
            {
                this.CanRuralRouteFormat = "A";
            }
            else
            {
                this.CanRuralRouteFormat = CanRuralRouteFormat;
            }
            // use default value if no "CanPreferHouseNum" provided
            if (CanPreferHouseNum == null)
            {
                this.CanPreferHouseNum = "N";
            }
            else
            {
                this.CanPreferHouseNum = CanPreferHouseNum;
            }
            // use default value if no "OutputPreferredAlias" provided
            if (OutputPreferredAlias == null)
            {
                this.OutputPreferredAlias = "N";
            }
            else
            {
                this.OutputPreferredAlias = OutputPreferredAlias;
            }
            // use default value if no "DirectionalMatchingStrictness" provided
            if (DirectionalMatchingStrictness == null)
            {
                this.DirectionalMatchingStrictness = "M";
            }
            else
            {
                this.DirectionalMatchingStrictness = DirectionalMatchingStrictness;
            }
            // use default value if no "ExtractFirm" provided
            if (ExtractFirm == null)
            {
                this.ExtractFirm = "N";
            }
            else
            {
                this.ExtractFirm = ExtractFirm;
            }
            // use default value if no "FailOnCMRAMatch" provided
            if (FailOnCMRAMatch == null)
            {
                this.FailOnCMRAMatch = "N";
            }
            else
            {
                this.FailOnCMRAMatch = FailOnCMRAMatch;
            }
            // use default value if no "CanNonCivicFormat" provided
            if (CanNonCivicFormat == null)
            {
                this.CanNonCivicFormat = "A";
            }
            else
            {
                this.CanNonCivicFormat = CanNonCivicFormat;
            }
            // use default value if no "CanSSLVRFlg" provided
            if (CanSSLVRFlg == null)
            {
                this.CanSSLVRFlg = "N";
            }
            else
            {
                this.CanSSLVRFlg = CanSSLVRFlg;
            }
            // use default value if no "OutputStreetNameAlias" provided
            if (OutputStreetNameAlias == null)
            {
                this.OutputStreetNameAlias = "Y";
            }
            else
            {
                this.OutputStreetNameAlias = OutputStreetNameAlias;
            }
            // use default value if no "PerformEWS" provided
            if (PerformEWS == null)
            {
                this.PerformEWS = "N";
            }
            else
            {
                this.PerformEWS = PerformEWS;
            }
            // use default value if no "CanOutputCityFormat" provided
            if (CanOutputCityFormat == null)
            {
                this.CanOutputCityFormat = "D";
            }
            else
            {
                this.CanOutputCityFormat = CanOutputCityFormat;
            }
            // use default value if no "DualAddressLogic" provided
            if (DualAddressLogic == null)
            {
                this.DualAddressLogic = "N";
            }
            else
            {
                this.DualAddressLogic = DualAddressLogic;
            }
            // use default value if no "PerformSuiteLink" provided
            if (PerformSuiteLink == null)
            {
                this.PerformSuiteLink = "N";
            }
            else
            {
                this.PerformSuiteLink = PerformSuiteLink;
            }
            // use default value if no "CanStandardAddressFormat" provided
            if (CanStandardAddressFormat == null)
            {
                this.CanStandardAddressFormat = "D";
            }
            else
            {
                this.CanStandardAddressFormat = CanStandardAddressFormat;
            }
            // use default value if no "OutputPreferredCity" provided
            if (OutputPreferredCity == null)
            {
                this.OutputPreferredCity = "Z";
            }
            else
            {
                this.OutputPreferredCity = OutputPreferredCity;
            }
            // use default value if no "OutputMultinationalCharacters" provided
            if (OutputMultinationalCharacters == null)
            {
                this.OutputMultinationalCharacters = "N";
            }
            else
            {
                this.OutputMultinationalCharacters = OutputMultinationalCharacters;
            }
            // use default value if no "CanDeliveryOfficeFormat" provided
            if (CanDeliveryOfficeFormat == null)
            {
                this.CanDeliveryOfficeFormat = "I";
            }
            else
            {
                this.CanDeliveryOfficeFormat = CanDeliveryOfficeFormat;
            }
            // use default value if no "PerformLACSLink" provided
            if (PerformLACSLink == null)
            {
                this.PerformLACSLink = "Y";
            }
            else
            {
                this.PerformLACSLink = PerformLACSLink;
            }
            // use default value if no "CanDualAddressLogic" provided
            if (CanDualAddressLogic == null)
            {
                this.CanDualAddressLogic = "D";
            }
            else
            {
                this.CanDualAddressLogic = CanDualAddressLogic;
            }
            // use default value if no "ExtractUrb" provided
            if (ExtractUrb == null)
            {
                this.ExtractUrb = "N";
            }
            else
            {
                this.ExtractUrb = ExtractUrb;
            }
            // use default value if no "StandardAddressFormat" provided
            if (StandardAddressFormat == null)
            {
                this.StandardAddressFormat = "C";
            }
            else
            {
                this.StandardAddressFormat = StandardAddressFormat;
            }
            // use default value if no "CanFrenchFormat" provided
            if (CanFrenchFormat == null)
            {
                this.CanFrenchFormat = "C";
            }
            else
            {
                this.CanFrenchFormat = CanFrenchFormat;
            }
            // use default value if no "DPVDetermineVacancy" provided
            if (DPVDetermineVacancy == null)
            {
                this.DPVDetermineVacancy = "N";
            }
            else
            {
                this.DPVDetermineVacancy = DPVDetermineVacancy;
            }
            // use default value if no "CanEnglishApartmentLabel" provided
            if (CanEnglishApartmentLabel == null)
            {
                this.CanEnglishApartmentLabel = "Apt";
            }
            else
            {
                this.CanEnglishApartmentLabel = CanEnglishApartmentLabel;
            }
            // use default value if no "SuppressZplusPhantomCarrierR777" provided
            if (SuppressZplusPhantomCarrierR777 == null)
            {
                this.SuppressZplusPhantomCarrierR777 = "N";
            }
            else
            {
                this.SuppressZplusPhantomCarrierR777 = SuppressZplusPhantomCarrierR777;
            }
            // use default value if no "CanOutputCityAlias" provided
            if (CanOutputCityAlias == null)
            {
                this.CanOutputCityAlias = "N";
            }
            else
            {
                this.CanOutputCityAlias = CanOutputCityAlias;
            }
            // use default value if no "OutputShortCityName" provided
            if (OutputShortCityName == null)
            {
                this.OutputShortCityName = "N";
            }
            else
            {
                this.OutputShortCityName = OutputShortCityName;
            }
        }
        
        /// <summary>
        /// Specifies whether to return a formatted version of the address.
        /// </summary>
        /// <value>Specifies whether to return a formatted version of the address.</value>
        [DataMember(Name="OutputAddressBlocks", EmitDefaultValue=false)]
        public string OutputAddressBlocks { get; set; }
        /// <summary>
        /// Specifies whether or not to process U.S. addresses.
        /// </summary>
        /// <value>Specifies whether or not to process U.S. addresses.</value>
        [DataMember(Name="PerformUSProcessing", EmitDefaultValue=false)]
        public string PerformUSProcessing { get; set; }
        /// <summary>
        /// Delivery Point Validation (DPV®) validates that a specific address exists
        /// </summary>
        /// <value>Delivery Point Validation (DPV®) validates that a specific address exists</value>
        [DataMember(Name="PerformDPV", EmitDefaultValue=false)]
        public string PerformDPV { get; set; }
        /// <summary>
        /// Specifies whether to return a formatted address when an address cannot be validated.
        /// </summary>
        /// <value>Specifies whether to return a formatted address when an address cannot be validated.</value>
        [DataMember(Name="OutputFormattedOnFail", EmitDefaultValue=false)]
        public string OutputFormattedOnFail { get; set; }
        /// <summary>
        /// Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes.
        /// </summary>
        /// <value>Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes.</value>
        [DataMember(Name="OutputPostalCodeSeparator", EmitDefaultValue=false)]
        public string OutputPostalCodeSeparator { get; set; }
        /// <summary>
        /// Specifies the format to use for the country name returned in the Country output field.
        /// </summary>
        /// <value>Specifies the format to use for the country name returned in the Country output field.</value>
        [DataMember(Name="OutputCountryFormat", EmitDefaultValue=false)]
        public string OutputCountryFormat { get; set; }
        /// <summary>
        /// Indicates whether to return multiple address for input addresses that have more than one possible matches.
        /// </summary>
        /// <value>Indicates whether to return multiple address for input addresses that have more than one possible matches.</value>
        [DataMember(Name="KeepMultimatch", EmitDefaultValue=false)]
        public string KeepMultimatch { get; set; }
        /// <summary>
        /// Specifies the casing of the output address. M for mixed case and U for upper case.
        /// </summary>
        /// <value>Specifies the casing of the output address. M for mixed case and U for upper case.</value>
        [DataMember(Name="OutputCasing", EmitDefaultValue=false)]
        public string OutputCasing { get; set; }
        /// <summary>
        /// Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned.
        /// </summary>
        /// <value>Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned.</value>
        [DataMember(Name="MaximumResults", EmitDefaultValue=false)]
        public string MaximumResults { get; set; }
        /// <summary>
        /// Specifies the type of the output record.
        /// </summary>
        /// <value>Specifies the type of the output record.</value>
        [DataMember(Name="OutputRecordType", EmitDefaultValue=false)]
        public string OutputRecordType { get; set; }
        /// <summary>
        /// Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes.
        /// </summary>
        /// <value>Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes.</value>
        [DataMember(Name="OutputFieldLevelReturnCodes", EmitDefaultValue=false)]
        public string OutputFieldLevelReturnCodes { get; set; }
        /// <summary>
        /// Determines the no stat status of an address which means it exists but cannot receive mails.
        /// </summary>
        /// <value>Determines the no stat status of an address which means it exists but cannot receive mails.</value>
        [DataMember(Name="DPVDetermineNoStat", EmitDefaultValue=false)]
        public string DPVDetermineNoStat { get; set; }
        /// <summary>
        /// Specifies the algorithm to determe if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determe if an input address matches in the postal database.</value>
        [DataMember(Name="StreetMatchingStrictness", EmitDefaultValue=false)]
        public string StreetMatchingStrictness { get; set; }
        /// <summary>
        /// Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address. 
        /// </summary>
        /// <value>Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address. </value>
        [DataMember(Name="CanFrenchApartmentLabel", EmitDefaultValue=false)]
        public string CanFrenchApartmentLabel { get; set; }
        /// <summary>
        /// Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters.
        /// </summary>
        /// <value>Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters.</value>
        [DataMember(Name="OutputAbbreviatedAlias", EmitDefaultValue=false)]
        public string OutputAbbreviatedAlias { get; set; }
        /// <summary>
        /// Selecting the match condition where a DPV result does NOT cause a record to fail.
        /// </summary>
        /// <value>Selecting the match condition where a DPV result does NOT cause a record to fail.</value>
        [DataMember(Name="DPVSuccessfulStatusCondition", EmitDefaultValue=false)]
        public string DPVSuccessfulStatusCondition { get; set; }
        /// <summary>
        /// Specifies where Private Mailbox (PMB) information is placed.
        /// </summary>
        /// <value>Specifies where Private Mailbox (PMB) information is placed.</value>
        [DataMember(Name="StandardAddressPMBLine", EmitDefaultValue=false)]
        public string StandardAddressPMBLine { get; set; }
        /// <summary>
        /// Specifies the algorithm to determining if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determining if an input address matches in the postal database.</value>
        [DataMember(Name="FirmMatchingStrictness", EmitDefaultValue=false)]
        public string FirmMatchingStrictness { get; set; }
        /// <summary>
        /// Specifies where to place rural route delivery information.
        /// </summary>
        /// <value>Specifies where to place rural route delivery information.</value>
        [DataMember(Name="CanRuralRouteFormat", EmitDefaultValue=false)]
        public string CanRuralRouteFormat { get; set; }
        /// <summary>
        /// Specifies whether to select a house number of postal code in case of conflict.
        /// </summary>
        /// <value>Specifies whether to select a house number of postal code in case of conflict.</value>
        [DataMember(Name="CanPreferHouseNum", EmitDefaultValue=false)]
        public string CanPreferHouseNum { get; set; }
        /// <summary>
        /// Specifies whether to use a street&#39;s preferred alias in the output.
        /// </summary>
        /// <value>Specifies whether to use a street&#39;s preferred alias in the output.</value>
        [DataMember(Name="OutputPreferredAlias", EmitDefaultValue=false)]
        public string OutputPreferredAlias { get; set; }
        /// <summary>
        /// Specifies the algorithm to determine if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determine if an input address matches in the postal database.</value>
        [DataMember(Name="DirectionalMatchingStrictness", EmitDefaultValue=false)]
        public string DirectionalMatchingStrictness { get; set; }
        /// <summary>
        /// Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field.
        /// </summary>
        /// <value>Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field.</value>
        [DataMember(Name="ExtractFirm", EmitDefaultValue=false)]
        public string ExtractFirm { get; set; }
        /// <summary>
        /// Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures?
        /// </summary>
        /// <value>Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures?</value>
        [DataMember(Name="FailOnCMRAMatch", EmitDefaultValue=false)]
        public string FailOnCMRAMatch { get; set; }
        /// <summary>
        /// Specifies whether or not non-civic keywords are abbreviated in the output. 
        /// </summary>
        /// <value>Specifies whether or not non-civic keywords are abbreviated in the output. </value>
        [DataMember(Name="CanNonCivicFormat", EmitDefaultValue=false)]
        public string CanNonCivicFormat { get; set; }
        /// <summary>
        /// Changes the civic and/or suite information to match the LVR or single-single record.
        /// </summary>
        /// <value>Changes the civic and/or suite information to match the LVR or single-single record.</value>
        [DataMember(Name="CanSSLVRFlg", EmitDefaultValue=false)]
        public string CanSSLVRFlg { get; set; }
        /// <summary>
        /// Specifies how to handle street name aliases used in the input. This is specific to US.
        /// </summary>
        /// <value>Specifies how to handle street name aliases used in the input. This is specific to US.</value>
        [DataMember(Name="OutputStreetNameAlias", EmitDefaultValue=false)]
        public string OutputStreetNameAlias { get; set; }
        /// <summary>
        /// Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database.
        /// </summary>
        /// <value>Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database.</value>
        [DataMember(Name="PerformEWS", EmitDefaultValue=false)]
        public string PerformEWS { get; set; }
        /// <summary>
        /// Specifies whether to use the long, medium, or short version of the city if the city has a long name.
        /// </summary>
        /// <value>Specifies whether to use the long, medium, or short version of the city if the city has a long name.</value>
        [DataMember(Name="CanOutputCityFormat", EmitDefaultValue=false)]
        public string CanOutputCityFormat { get; set; }
        /// <summary>
        /// Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.)
        /// </summary>
        /// <value>Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.)</value>
        [DataMember(Name="DualAddressLogic", EmitDefaultValue=false)]
        public string DualAddressLogic { get; set; }
        /// <summary>
        /// Specifies whether to perform SuiteLink processing.
        /// </summary>
        /// <value>Specifies whether to perform SuiteLink processing.</value>
        [DataMember(Name="PerformSuiteLink", EmitDefaultValue=false)]
        public string PerformSuiteLink { get; set; }
        /// <summary>
        /// Specifies where to place secondary address information in the output address.
        /// </summary>
        /// <value>Specifies where to place secondary address information in the output address.</value>
        [DataMember(Name="CanStandardAddressFormat", EmitDefaultValue=false)]
        public string CanStandardAddressFormat { get; set; }
        /// <summary>
        /// Specifies whether the preferred last line city name should be stored.
        /// </summary>
        /// <value>Specifies whether the preferred last line city name should be stored.</value>
        [DataMember(Name="OutputPreferredCity", EmitDefaultValue=false)]
        public string OutputPreferredCity { get; set; }
        /// <summary>
        /// Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents.
        /// </summary>
        /// <value>Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents.</value>
        [DataMember(Name="OutputMultinationalCharacters", EmitDefaultValue=false)]
        public string OutputMultinationalCharacters { get; set; }
        /// <summary>
        /// Specifies where to place station information.
        /// </summary>
        /// <value>Specifies where to place station information.</value>
        [DataMember(Name="CanDeliveryOfficeFormat", EmitDefaultValue=false)]
        public string CanDeliveryOfficeFormat { get; set; }
        /// <summary>
        /// Facilitates the conversion of rural route address converting into street-style address using the LACS.
        /// </summary>
        /// <value>Facilitates the conversion of rural route address converting into street-style address using the LACS.</value>
        [DataMember(Name="PerformLACSLink", EmitDefaultValue=false)]
        public string PerformLACSLink { get; set; }
        /// <summary>
        /// Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information.
        /// </summary>
        /// <value>Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information.</value>
        [DataMember(Name="CanDualAddressLogic", EmitDefaultValue=false)]
        public string CanDualAddressLogic { get; set; }
        /// <summary>
        /// Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field. 
        /// </summary>
        /// <value>Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field. </value>
        [DataMember(Name="ExtractUrb", EmitDefaultValue=false)]
        public string ExtractUrb { get; set; }
        /// <summary>
        /// Specifies where to place secondary address information for U.S. addresses.
        /// </summary>
        /// <value>Specifies where to place secondary address information for U.S. addresses.</value>
        [DataMember(Name="StandardAddressFormat", EmitDefaultValue=false)]
        public string StandardAddressFormat { get; set; }
        /// <summary>
        /// Specifies how to determine the language (English or French) to use to format the address and directional.
        /// </summary>
        /// <value>Specifies how to determine the language (English or French) to use to format the address and directional.</value>
        [DataMember(Name="CanFrenchFormat", EmitDefaultValue=false)]
        public string CanFrenchFormat { get; set; }
        /// <summary>
        /// Determines if the location has been unoccupied for at least 90 days.
        /// </summary>
        /// <value>Determines if the location has been unoccupied for at least 90 days.</value>
        [DataMember(Name="DPVDetermineVacancy", EmitDefaultValue=false)]
        public string DPVDetermineVacancy { get; set; }
        /// <summary>
        /// Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses.
        /// </summary>
        /// <value>Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses.</value>
        [DataMember(Name="CanEnglishApartmentLabel", EmitDefaultValue=false)]
        public string CanEnglishApartmentLabel { get; set; }
        /// <summary>
        /// Specifies whether to supress addresses with Carrier Route R777.
        /// </summary>
        /// <value>Specifies whether to supress addresses with Carrier Route R777.</value>
        [DataMember(Name="SuppressZplusPhantomCarrierR777", EmitDefaultValue=false)]
        public string SuppressZplusPhantomCarrierR777 { get; set; }
        /// <summary>
        /// Specifies whether or not to return the city alias when the alias is in the input address.
        /// </summary>
        /// <value>Specifies whether or not to return the city alias when the alias is in the input address.</value>
        [DataMember(Name="CanOutputCityAlias", EmitDefaultValue=false)]
        public string CanOutputCityAlias { get; set; }
        /// <summary>
        /// Specifies how to format city names that have short city name or non-mailing city name alternatives.
        /// </summary>
        /// <value>Specifies how to format city names that have short city name or non-mailing city name alternatives.</value>
        [DataMember(Name="OutputShortCityName", EmitDefaultValue=false)]
        public string OutputShortCityName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressUSCANAPIOptions {\n");
            sb.Append("  OutputAddressBlocks: ").Append(OutputAddressBlocks).Append("\n");
            sb.Append("  PerformUSProcessing: ").Append(PerformUSProcessing).Append("\n");
            sb.Append("  PerformDPV: ").Append(PerformDPV).Append("\n");
            sb.Append("  OutputFormattedOnFail: ").Append(OutputFormattedOnFail).Append("\n");
            sb.Append("  OutputPostalCodeSeparator: ").Append(OutputPostalCodeSeparator).Append("\n");
            sb.Append("  OutputCountryFormat: ").Append(OutputCountryFormat).Append("\n");
            sb.Append("  KeepMultimatch: ").Append(KeepMultimatch).Append("\n");
            sb.Append("  OutputCasing: ").Append(OutputCasing).Append("\n");
            sb.Append("  MaximumResults: ").Append(MaximumResults).Append("\n");
            sb.Append("  OutputRecordType: ").Append(OutputRecordType).Append("\n");
            sb.Append("  OutputFieldLevelReturnCodes: ").Append(OutputFieldLevelReturnCodes).Append("\n");
            sb.Append("  DPVDetermineNoStat: ").Append(DPVDetermineNoStat).Append("\n");
            sb.Append("  StreetMatchingStrictness: ").Append(StreetMatchingStrictness).Append("\n");
            sb.Append("  CanFrenchApartmentLabel: ").Append(CanFrenchApartmentLabel).Append("\n");
            sb.Append("  OutputAbbreviatedAlias: ").Append(OutputAbbreviatedAlias).Append("\n");
            sb.Append("  DPVSuccessfulStatusCondition: ").Append(DPVSuccessfulStatusCondition).Append("\n");
            sb.Append("  StandardAddressPMBLine: ").Append(StandardAddressPMBLine).Append("\n");
            sb.Append("  FirmMatchingStrictness: ").Append(FirmMatchingStrictness).Append("\n");
            sb.Append("  CanRuralRouteFormat: ").Append(CanRuralRouteFormat).Append("\n");
            sb.Append("  CanPreferHouseNum: ").Append(CanPreferHouseNum).Append("\n");
            sb.Append("  OutputPreferredAlias: ").Append(OutputPreferredAlias).Append("\n");
            sb.Append("  DirectionalMatchingStrictness: ").Append(DirectionalMatchingStrictness).Append("\n");
            sb.Append("  ExtractFirm: ").Append(ExtractFirm).Append("\n");
            sb.Append("  FailOnCMRAMatch: ").Append(FailOnCMRAMatch).Append("\n");
            sb.Append("  CanNonCivicFormat: ").Append(CanNonCivicFormat).Append("\n");
            sb.Append("  CanSSLVRFlg: ").Append(CanSSLVRFlg).Append("\n");
            sb.Append("  OutputStreetNameAlias: ").Append(OutputStreetNameAlias).Append("\n");
            sb.Append("  PerformEWS: ").Append(PerformEWS).Append("\n");
            sb.Append("  CanOutputCityFormat: ").Append(CanOutputCityFormat).Append("\n");
            sb.Append("  DualAddressLogic: ").Append(DualAddressLogic).Append("\n");
            sb.Append("  PerformSuiteLink: ").Append(PerformSuiteLink).Append("\n");
            sb.Append("  CanStandardAddressFormat: ").Append(CanStandardAddressFormat).Append("\n");
            sb.Append("  OutputPreferredCity: ").Append(OutputPreferredCity).Append("\n");
            sb.Append("  OutputMultinationalCharacters: ").Append(OutputMultinationalCharacters).Append("\n");
            sb.Append("  CanDeliveryOfficeFormat: ").Append(CanDeliveryOfficeFormat).Append("\n");
            sb.Append("  PerformLACSLink: ").Append(PerformLACSLink).Append("\n");
            sb.Append("  CanDualAddressLogic: ").Append(CanDualAddressLogic).Append("\n");
            sb.Append("  ExtractUrb: ").Append(ExtractUrb).Append("\n");
            sb.Append("  StandardAddressFormat: ").Append(StandardAddressFormat).Append("\n");
            sb.Append("  CanFrenchFormat: ").Append(CanFrenchFormat).Append("\n");
            sb.Append("  DPVDetermineVacancy: ").Append(DPVDetermineVacancy).Append("\n");
            sb.Append("  CanEnglishApartmentLabel: ").Append(CanEnglishApartmentLabel).Append("\n");
            sb.Append("  SuppressZplusPhantomCarrierR777: ").Append(SuppressZplusPhantomCarrierR777).Append("\n");
            sb.Append("  CanOutputCityAlias: ").Append(CanOutputCityAlias).Append("\n");
            sb.Append("  OutputShortCityName: ").Append(OutputShortCityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ValidateMailingAddressUSCANAPIOptions);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressUSCANAPIOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidateMailingAddressUSCANAPIOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressUSCANAPIOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OutputAddressBlocks == other.OutputAddressBlocks ||
                    this.OutputAddressBlocks != null &&
                    this.OutputAddressBlocks.Equals(other.OutputAddressBlocks)
                ) && 
                (
                    this.PerformUSProcessing == other.PerformUSProcessing ||
                    this.PerformUSProcessing != null &&
                    this.PerformUSProcessing.Equals(other.PerformUSProcessing)
                ) && 
                (
                    this.PerformDPV == other.PerformDPV ||
                    this.PerformDPV != null &&
                    this.PerformDPV.Equals(other.PerformDPV)
                ) && 
                (
                    this.OutputFormattedOnFail == other.OutputFormattedOnFail ||
                    this.OutputFormattedOnFail != null &&
                    this.OutputFormattedOnFail.Equals(other.OutputFormattedOnFail)
                ) && 
                (
                    this.OutputPostalCodeSeparator == other.OutputPostalCodeSeparator ||
                    this.OutputPostalCodeSeparator != null &&
                    this.OutputPostalCodeSeparator.Equals(other.OutputPostalCodeSeparator)
                ) && 
                (
                    this.OutputCountryFormat == other.OutputCountryFormat ||
                    this.OutputCountryFormat != null &&
                    this.OutputCountryFormat.Equals(other.OutputCountryFormat)
                ) && 
                (
                    this.KeepMultimatch == other.KeepMultimatch ||
                    this.KeepMultimatch != null &&
                    this.KeepMultimatch.Equals(other.KeepMultimatch)
                ) && 
                (
                    this.OutputCasing == other.OutputCasing ||
                    this.OutputCasing != null &&
                    this.OutputCasing.Equals(other.OutputCasing)
                ) && 
                (
                    this.MaximumResults == other.MaximumResults ||
                    this.MaximumResults != null &&
                    this.MaximumResults.Equals(other.MaximumResults)
                ) && 
                (
                    this.OutputRecordType == other.OutputRecordType ||
                    this.OutputRecordType != null &&
                    this.OutputRecordType.Equals(other.OutputRecordType)
                ) && 
                (
                    this.OutputFieldLevelReturnCodes == other.OutputFieldLevelReturnCodes ||
                    this.OutputFieldLevelReturnCodes != null &&
                    this.OutputFieldLevelReturnCodes.Equals(other.OutputFieldLevelReturnCodes)
                ) && 
                (
                    this.DPVDetermineNoStat == other.DPVDetermineNoStat ||
                    this.DPVDetermineNoStat != null &&
                    this.DPVDetermineNoStat.Equals(other.DPVDetermineNoStat)
                ) && 
                (
                    this.StreetMatchingStrictness == other.StreetMatchingStrictness ||
                    this.StreetMatchingStrictness != null &&
                    this.StreetMatchingStrictness.Equals(other.StreetMatchingStrictness)
                ) && 
                (
                    this.CanFrenchApartmentLabel == other.CanFrenchApartmentLabel ||
                    this.CanFrenchApartmentLabel != null &&
                    this.CanFrenchApartmentLabel.Equals(other.CanFrenchApartmentLabel)
                ) && 
                (
                    this.OutputAbbreviatedAlias == other.OutputAbbreviatedAlias ||
                    this.OutputAbbreviatedAlias != null &&
                    this.OutputAbbreviatedAlias.Equals(other.OutputAbbreviatedAlias)
                ) && 
                (
                    this.DPVSuccessfulStatusCondition == other.DPVSuccessfulStatusCondition ||
                    this.DPVSuccessfulStatusCondition != null &&
                    this.DPVSuccessfulStatusCondition.Equals(other.DPVSuccessfulStatusCondition)
                ) && 
                (
                    this.StandardAddressPMBLine == other.StandardAddressPMBLine ||
                    this.StandardAddressPMBLine != null &&
                    this.StandardAddressPMBLine.Equals(other.StandardAddressPMBLine)
                ) && 
                (
                    this.FirmMatchingStrictness == other.FirmMatchingStrictness ||
                    this.FirmMatchingStrictness != null &&
                    this.FirmMatchingStrictness.Equals(other.FirmMatchingStrictness)
                ) && 
                (
                    this.CanRuralRouteFormat == other.CanRuralRouteFormat ||
                    this.CanRuralRouteFormat != null &&
                    this.CanRuralRouteFormat.Equals(other.CanRuralRouteFormat)
                ) && 
                (
                    this.CanPreferHouseNum == other.CanPreferHouseNum ||
                    this.CanPreferHouseNum != null &&
                    this.CanPreferHouseNum.Equals(other.CanPreferHouseNum)
                ) && 
                (
                    this.OutputPreferredAlias == other.OutputPreferredAlias ||
                    this.OutputPreferredAlias != null &&
                    this.OutputPreferredAlias.Equals(other.OutputPreferredAlias)
                ) && 
                (
                    this.DirectionalMatchingStrictness == other.DirectionalMatchingStrictness ||
                    this.DirectionalMatchingStrictness != null &&
                    this.DirectionalMatchingStrictness.Equals(other.DirectionalMatchingStrictness)
                ) && 
                (
                    this.ExtractFirm == other.ExtractFirm ||
                    this.ExtractFirm != null &&
                    this.ExtractFirm.Equals(other.ExtractFirm)
                ) && 
                (
                    this.FailOnCMRAMatch == other.FailOnCMRAMatch ||
                    this.FailOnCMRAMatch != null &&
                    this.FailOnCMRAMatch.Equals(other.FailOnCMRAMatch)
                ) && 
                (
                    this.CanNonCivicFormat == other.CanNonCivicFormat ||
                    this.CanNonCivicFormat != null &&
                    this.CanNonCivicFormat.Equals(other.CanNonCivicFormat)
                ) && 
                (
                    this.CanSSLVRFlg == other.CanSSLVRFlg ||
                    this.CanSSLVRFlg != null &&
                    this.CanSSLVRFlg.Equals(other.CanSSLVRFlg)
                ) && 
                (
                    this.OutputStreetNameAlias == other.OutputStreetNameAlias ||
                    this.OutputStreetNameAlias != null &&
                    this.OutputStreetNameAlias.Equals(other.OutputStreetNameAlias)
                ) && 
                (
                    this.PerformEWS == other.PerformEWS ||
                    this.PerformEWS != null &&
                    this.PerformEWS.Equals(other.PerformEWS)
                ) && 
                (
                    this.CanOutputCityFormat == other.CanOutputCityFormat ||
                    this.CanOutputCityFormat != null &&
                    this.CanOutputCityFormat.Equals(other.CanOutputCityFormat)
                ) && 
                (
                    this.DualAddressLogic == other.DualAddressLogic ||
                    this.DualAddressLogic != null &&
                    this.DualAddressLogic.Equals(other.DualAddressLogic)
                ) && 
                (
                    this.PerformSuiteLink == other.PerformSuiteLink ||
                    this.PerformSuiteLink != null &&
                    this.PerformSuiteLink.Equals(other.PerformSuiteLink)
                ) && 
                (
                    this.CanStandardAddressFormat == other.CanStandardAddressFormat ||
                    this.CanStandardAddressFormat != null &&
                    this.CanStandardAddressFormat.Equals(other.CanStandardAddressFormat)
                ) && 
                (
                    this.OutputPreferredCity == other.OutputPreferredCity ||
                    this.OutputPreferredCity != null &&
                    this.OutputPreferredCity.Equals(other.OutputPreferredCity)
                ) && 
                (
                    this.OutputMultinationalCharacters == other.OutputMultinationalCharacters ||
                    this.OutputMultinationalCharacters != null &&
                    this.OutputMultinationalCharacters.Equals(other.OutputMultinationalCharacters)
                ) && 
                (
                    this.CanDeliveryOfficeFormat == other.CanDeliveryOfficeFormat ||
                    this.CanDeliveryOfficeFormat != null &&
                    this.CanDeliveryOfficeFormat.Equals(other.CanDeliveryOfficeFormat)
                ) && 
                (
                    this.PerformLACSLink == other.PerformLACSLink ||
                    this.PerformLACSLink != null &&
                    this.PerformLACSLink.Equals(other.PerformLACSLink)
                ) && 
                (
                    this.CanDualAddressLogic == other.CanDualAddressLogic ||
                    this.CanDualAddressLogic != null &&
                    this.CanDualAddressLogic.Equals(other.CanDualAddressLogic)
                ) && 
                (
                    this.ExtractUrb == other.ExtractUrb ||
                    this.ExtractUrb != null &&
                    this.ExtractUrb.Equals(other.ExtractUrb)
                ) && 
                (
                    this.StandardAddressFormat == other.StandardAddressFormat ||
                    this.StandardAddressFormat != null &&
                    this.StandardAddressFormat.Equals(other.StandardAddressFormat)
                ) && 
                (
                    this.CanFrenchFormat == other.CanFrenchFormat ||
                    this.CanFrenchFormat != null &&
                    this.CanFrenchFormat.Equals(other.CanFrenchFormat)
                ) && 
                (
                    this.DPVDetermineVacancy == other.DPVDetermineVacancy ||
                    this.DPVDetermineVacancy != null &&
                    this.DPVDetermineVacancy.Equals(other.DPVDetermineVacancy)
                ) && 
                (
                    this.CanEnglishApartmentLabel == other.CanEnglishApartmentLabel ||
                    this.CanEnglishApartmentLabel != null &&
                    this.CanEnglishApartmentLabel.Equals(other.CanEnglishApartmentLabel)
                ) && 
                (
                    this.SuppressZplusPhantomCarrierR777 == other.SuppressZplusPhantomCarrierR777 ||
                    this.SuppressZplusPhantomCarrierR777 != null &&
                    this.SuppressZplusPhantomCarrierR777.Equals(other.SuppressZplusPhantomCarrierR777)
                ) && 
                (
                    this.CanOutputCityAlias == other.CanOutputCityAlias ||
                    this.CanOutputCityAlias != null &&
                    this.CanOutputCityAlias.Equals(other.CanOutputCityAlias)
                ) && 
                (
                    this.OutputShortCityName == other.OutputShortCityName ||
                    this.OutputShortCityName != null &&
                    this.OutputShortCityName.Equals(other.OutputShortCityName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OutputAddressBlocks != null)
                    hash = hash * 59 + this.OutputAddressBlocks.GetHashCode();
                if (this.PerformUSProcessing != null)
                    hash = hash * 59 + this.PerformUSProcessing.GetHashCode();
                if (this.PerformDPV != null)
                    hash = hash * 59 + this.PerformDPV.GetHashCode();
                if (this.OutputFormattedOnFail != null)
                    hash = hash * 59 + this.OutputFormattedOnFail.GetHashCode();
                if (this.OutputPostalCodeSeparator != null)
                    hash = hash * 59 + this.OutputPostalCodeSeparator.GetHashCode();
                if (this.OutputCountryFormat != null)
                    hash = hash * 59 + this.OutputCountryFormat.GetHashCode();
                if (this.KeepMultimatch != null)
                    hash = hash * 59 + this.KeepMultimatch.GetHashCode();
                if (this.OutputCasing != null)
                    hash = hash * 59 + this.OutputCasing.GetHashCode();
                if (this.MaximumResults != null)
                    hash = hash * 59 + this.MaximumResults.GetHashCode();
                if (this.OutputRecordType != null)
                    hash = hash * 59 + this.OutputRecordType.GetHashCode();
                if (this.OutputFieldLevelReturnCodes != null)
                    hash = hash * 59 + this.OutputFieldLevelReturnCodes.GetHashCode();
                if (this.DPVDetermineNoStat != null)
                    hash = hash * 59 + this.DPVDetermineNoStat.GetHashCode();
                if (this.StreetMatchingStrictness != null)
                    hash = hash * 59 + this.StreetMatchingStrictness.GetHashCode();
                if (this.CanFrenchApartmentLabel != null)
                    hash = hash * 59 + this.CanFrenchApartmentLabel.GetHashCode();
                if (this.OutputAbbreviatedAlias != null)
                    hash = hash * 59 + this.OutputAbbreviatedAlias.GetHashCode();
                if (this.DPVSuccessfulStatusCondition != null)
                    hash = hash * 59 + this.DPVSuccessfulStatusCondition.GetHashCode();
                if (this.StandardAddressPMBLine != null)
                    hash = hash * 59 + this.StandardAddressPMBLine.GetHashCode();
                if (this.FirmMatchingStrictness != null)
                    hash = hash * 59 + this.FirmMatchingStrictness.GetHashCode();
                if (this.CanRuralRouteFormat != null)
                    hash = hash * 59 + this.CanRuralRouteFormat.GetHashCode();
                if (this.CanPreferHouseNum != null)
                    hash = hash * 59 + this.CanPreferHouseNum.GetHashCode();
                if (this.OutputPreferredAlias != null)
                    hash = hash * 59 + this.OutputPreferredAlias.GetHashCode();
                if (this.DirectionalMatchingStrictness != null)
                    hash = hash * 59 + this.DirectionalMatchingStrictness.GetHashCode();
                if (this.ExtractFirm != null)
                    hash = hash * 59 + this.ExtractFirm.GetHashCode();
                if (this.FailOnCMRAMatch != null)
                    hash = hash * 59 + this.FailOnCMRAMatch.GetHashCode();
                if (this.CanNonCivicFormat != null)
                    hash = hash * 59 + this.CanNonCivicFormat.GetHashCode();
                if (this.CanSSLVRFlg != null)
                    hash = hash * 59 + this.CanSSLVRFlg.GetHashCode();
                if (this.OutputStreetNameAlias != null)
                    hash = hash * 59 + this.OutputStreetNameAlias.GetHashCode();
                if (this.PerformEWS != null)
                    hash = hash * 59 + this.PerformEWS.GetHashCode();
                if (this.CanOutputCityFormat != null)
                    hash = hash * 59 + this.CanOutputCityFormat.GetHashCode();
                if (this.DualAddressLogic != null)
                    hash = hash * 59 + this.DualAddressLogic.GetHashCode();
                if (this.PerformSuiteLink != null)
                    hash = hash * 59 + this.PerformSuiteLink.GetHashCode();
                if (this.CanStandardAddressFormat != null)
                    hash = hash * 59 + this.CanStandardAddressFormat.GetHashCode();
                if (this.OutputPreferredCity != null)
                    hash = hash * 59 + this.OutputPreferredCity.GetHashCode();
                if (this.OutputMultinationalCharacters != null)
                    hash = hash * 59 + this.OutputMultinationalCharacters.GetHashCode();
                if (this.CanDeliveryOfficeFormat != null)
                    hash = hash * 59 + this.CanDeliveryOfficeFormat.GetHashCode();
                if (this.PerformLACSLink != null)
                    hash = hash * 59 + this.PerformLACSLink.GetHashCode();
                if (this.CanDualAddressLogic != null)
                    hash = hash * 59 + this.CanDualAddressLogic.GetHashCode();
                if (this.ExtractUrb != null)
                    hash = hash * 59 + this.ExtractUrb.GetHashCode();
                if (this.StandardAddressFormat != null)
                    hash = hash * 59 + this.StandardAddressFormat.GetHashCode();
                if (this.CanFrenchFormat != null)
                    hash = hash * 59 + this.CanFrenchFormat.GetHashCode();
                if (this.DPVDetermineVacancy != null)
                    hash = hash * 59 + this.DPVDetermineVacancy.GetHashCode();
                if (this.CanEnglishApartmentLabel != null)
                    hash = hash * 59 + this.CanEnglishApartmentLabel.GetHashCode();
                if (this.SuppressZplusPhantomCarrierR777 != null)
                    hash = hash * 59 + this.SuppressZplusPhantomCarrierR777.GetHashCode();
                if (this.CanOutputCityAlias != null)
                    hash = hash * 59 + this.CanOutputCityAlias.GetHashCode();
                if (this.OutputShortCityName != null)
                    hash = hash * 59 + this.OutputShortCityName.GetHashCode();
                return hash;
            }
        }
    }

}
