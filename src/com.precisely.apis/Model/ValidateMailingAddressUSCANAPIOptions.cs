/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 16.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressUSCANAPIOptions
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressUSCANAPIOptions :  IEquatable<ValidateMailingAddressUSCANAPIOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressUSCANAPIOptions" /> class.
        /// </summary>
        /// <param name="outputAddressBlocks">Specifies whether to return a formatted version of the address. (default to &quot;Y&quot;).</param>
        /// <param name="performUSProcessing">Specifies whether or not to process U.S. addresses. (default to &quot;Y&quot;).</param>
        /// <param name="performDPV">Delivery Point Validation (DPV®) validates that a specific address exists (default to &quot;N&quot;).</param>
        /// <param name="outputFormattedOnFail">Specifies whether to return a formatted address when an address cannot be validated. (default to &quot;N&quot;).</param>
        /// <param name="outputPostalCodeSeparator">Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes. (default to &quot;Y&quot;).</param>
        /// <param name="outputCountryFormat">Specifies the format to use for the country name returned in the Country output field. (default to &quot;E&quot;).</param>
        /// <param name="keepMultimatch">Indicates whether to return multiple address for input addresses that have more than one possible matches. (default to &quot;N&quot;).</param>
        /// <param name="outputCasing">Specifies the casing of the output address. M for mixed case and U for upper case. (default to &quot;M&quot;).</param>
        /// <param name="maximumResults">Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned. (default to &quot;10&quot;).</param>
        /// <param name="outputRecordType">Specifies the type of the output record. (default to &quot;A&quot;).</param>
        /// <param name="outputFieldLevelReturnCodes">Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes. (default to &quot;N&quot;).</param>
        /// <param name="dPVDetermineNoStat">Determines the no stat status of an address which means it exists but cannot receive mails. (default to &quot;N&quot;).</param>
        /// <param name="streetMatchingStrictness">Specifies the algorithm to determe if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="canFrenchApartmentLabel">Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address.  (default to &quot;Appartement&quot;).</param>
        /// <param name="outputAbbreviatedAlias">Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters. (default to &quot;N&quot;).</param>
        /// <param name="dPVSuccessfulStatusCondition">Selecting the match condition where a DPV result does NOT cause a record to fail. (default to &quot;A&quot;).</param>
        /// <param name="standardAddressPMBLine">Specifies where Private Mailbox (PMB) information is placed. (default to &quot;N&quot;).</param>
        /// <param name="firmMatchingStrictness">Specifies the algorithm to determining if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="canRuralRouteFormat">Specifies where to place rural route delivery information. (default to &quot;A&quot;).</param>
        /// <param name="canPreferHouseNum">Specifies whether to select a house number of postal code in case of conflict. (default to &quot;N&quot;).</param>
        /// <param name="outputPreferredAlias">Specifies whether to use a street&#39;s preferred alias in the output. (default to &quot;N&quot;).</param>
        /// <param name="directionalMatchingStrictness">Specifies the algorithm to determine if an input address matches in the postal database. (default to &quot;M&quot;).</param>
        /// <param name="extractFirm">Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field. (default to &quot;N&quot;).</param>
        /// <param name="failOnCMRAMatch">Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures? (default to &quot;N&quot;).</param>
        /// <param name="canNonCivicFormat">Specifies whether or not non-civic keywords are abbreviated in the output.  (default to &quot;A&quot;).</param>
        /// <param name="canSSLVRFlg">Changes the civic and/or suite information to match the LVR or single-single record. (default to &quot;N&quot;).</param>
        /// <param name="outputStreetNameAlias">Specifies how to handle street name aliases used in the input. This is specific to US. (default to &quot;Y&quot;).</param>
        /// <param name="performEWS">Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database. (default to &quot;N&quot;).</param>
        /// <param name="canOutputCityFormat">Specifies whether to use the long, medium, or short version of the city if the city has a long name. (default to &quot;D&quot;).</param>
        /// <param name="dualAddressLogic">Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.) (default to &quot;N&quot;).</param>
        /// <param name="performSuiteLink">Specifies whether to perform SuiteLink processing. (default to &quot;N&quot;).</param>
        /// <param name="canStandardAddressFormat">Specifies where to place secondary address information in the output address. (default to &quot;D&quot;).</param>
        /// <param name="outputPreferredCity">Specifies whether the preferred last line city name should be stored. (default to &quot;Z&quot;).</param>
        /// <param name="outputMultinationalCharacters">Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents. (default to &quot;N&quot;).</param>
        /// <param name="canDeliveryOfficeFormat">Specifies where to place station information. (default to &quot;I&quot;).</param>
        /// <param name="performLACSLink">Facilitates the conversion of rural route address converting into street-style address using the LACS. (default to &quot;Y&quot;).</param>
        /// <param name="canDualAddressLogic">Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information. (default to &quot;D&quot;).</param>
        /// <param name="extractUrb">Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field.  (default to &quot;N&quot;).</param>
        /// <param name="standardAddressFormat">Specifies where to place secondary address information for U.S. addresses. (default to &quot;C&quot;).</param>
        /// <param name="canFrenchFormat">Specifies how to determine the language (English or French) to use to format the address and directional. (default to &quot;C&quot;).</param>
        /// <param name="dPVDetermineVacancy">Determines if the location has been unoccupied for at least 90 days. (default to &quot;N&quot;).</param>
        /// <param name="canEnglishApartmentLabel">Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses. (default to &quot;Apt&quot;).</param>
        /// <param name="suppressZplusPhantomCarrierR777">Specifies whether to supress addresses with Carrier Route R777. (default to &quot;N&quot;).</param>
        /// <param name="canOutputCityAlias">Specifies whether or not to return the city alias when the alias is in the input address. (default to &quot;N&quot;).</param>
        /// <param name="outputShortCityName">Specifies how to format city names that have short city name or non-mailing city name alternatives. (default to &quot;N&quot;).</param>
        public ValidateMailingAddressUSCANAPIOptions(string outputAddressBlocks = "Y", string performUSProcessing = "Y", string performDPV = "N", string outputFormattedOnFail = "N", string outputPostalCodeSeparator = "Y", string outputCountryFormat = "E", string keepMultimatch = "N", string outputCasing = "M", string maximumResults = "10", string outputRecordType = "A", string outputFieldLevelReturnCodes = "N", string dPVDetermineNoStat = "N", string streetMatchingStrictness = "M", string canFrenchApartmentLabel = "Appartement", string outputAbbreviatedAlias = "N", string dPVSuccessfulStatusCondition = "A", string standardAddressPMBLine = "N", string firmMatchingStrictness = "M", string canRuralRouteFormat = "A", string canPreferHouseNum = "N", string outputPreferredAlias = "N", string directionalMatchingStrictness = "M", string extractFirm = "N", string failOnCMRAMatch = "N", string canNonCivicFormat = "A", string canSSLVRFlg = "N", string outputStreetNameAlias = "Y", string performEWS = "N", string canOutputCityFormat = "D", string dualAddressLogic = "N", string performSuiteLink = "N", string canStandardAddressFormat = "D", string outputPreferredCity = "Z", string outputMultinationalCharacters = "N", string canDeliveryOfficeFormat = "I", string performLACSLink = "Y", string canDualAddressLogic = "D", string extractUrb = "N", string standardAddressFormat = "C", string canFrenchFormat = "C", string dPVDetermineVacancy = "N", string canEnglishApartmentLabel = "Apt", string suppressZplusPhantomCarrierR777 = "N", string canOutputCityAlias = "N", string outputShortCityName = "N")
        {
            // use default value if no "outputAddressBlocks" provided
            if (outputAddressBlocks == null)
            {
                this.OutputAddressBlocks = "Y";
            }
            else
            {
                this.OutputAddressBlocks = outputAddressBlocks;
            }
            // use default value if no "performUSProcessing" provided
            if (performUSProcessing == null)
            {
                this.PerformUSProcessing = "Y";
            }
            else
            {
                this.PerformUSProcessing = performUSProcessing;
            }
            // use default value if no "performDPV" provided
            if (performDPV == null)
            {
                this.PerformDPV = "N";
            }
            else
            {
                this.PerformDPV = performDPV;
            }
            // use default value if no "outputFormattedOnFail" provided
            if (outputFormattedOnFail == null)
            {
                this.OutputFormattedOnFail = "N";
            }
            else
            {
                this.OutputFormattedOnFail = outputFormattedOnFail;
            }
            // use default value if no "outputPostalCodeSeparator" provided
            if (outputPostalCodeSeparator == null)
            {
                this.OutputPostalCodeSeparator = "Y";
            }
            else
            {
                this.OutputPostalCodeSeparator = outputPostalCodeSeparator;
            }
            // use default value if no "outputCountryFormat" provided
            if (outputCountryFormat == null)
            {
                this.OutputCountryFormat = "E";
            }
            else
            {
                this.OutputCountryFormat = outputCountryFormat;
            }
            // use default value if no "keepMultimatch" provided
            if (keepMultimatch == null)
            {
                this.KeepMultimatch = "N";
            }
            else
            {
                this.KeepMultimatch = keepMultimatch;
            }
            // use default value if no "outputCasing" provided
            if (outputCasing == null)
            {
                this.OutputCasing = "M";
            }
            else
            {
                this.OutputCasing = outputCasing;
            }
            // use default value if no "maximumResults" provided
            if (maximumResults == null)
            {
                this.MaximumResults = "10";
            }
            else
            {
                this.MaximumResults = maximumResults;
            }
            // use default value if no "outputRecordType" provided
            if (outputRecordType == null)
            {
                this.OutputRecordType = "A";
            }
            else
            {
                this.OutputRecordType = outputRecordType;
            }
            // use default value if no "outputFieldLevelReturnCodes" provided
            if (outputFieldLevelReturnCodes == null)
            {
                this.OutputFieldLevelReturnCodes = "N";
            }
            else
            {
                this.OutputFieldLevelReturnCodes = outputFieldLevelReturnCodes;
            }
            // use default value if no "dPVDetermineNoStat" provided
            if (dPVDetermineNoStat == null)
            {
                this.DPVDetermineNoStat = "N";
            }
            else
            {
                this.DPVDetermineNoStat = dPVDetermineNoStat;
            }
            // use default value if no "streetMatchingStrictness" provided
            if (streetMatchingStrictness == null)
            {
                this.StreetMatchingStrictness = "M";
            }
            else
            {
                this.StreetMatchingStrictness = streetMatchingStrictness;
            }
            // use default value if no "canFrenchApartmentLabel" provided
            if (canFrenchApartmentLabel == null)
            {
                this.CanFrenchApartmentLabel = "Appartement";
            }
            else
            {
                this.CanFrenchApartmentLabel = canFrenchApartmentLabel;
            }
            // use default value if no "outputAbbreviatedAlias" provided
            if (outputAbbreviatedAlias == null)
            {
                this.OutputAbbreviatedAlias = "N";
            }
            else
            {
                this.OutputAbbreviatedAlias = outputAbbreviatedAlias;
            }
            // use default value if no "dPVSuccessfulStatusCondition" provided
            if (dPVSuccessfulStatusCondition == null)
            {
                this.DPVSuccessfulStatusCondition = "A";
            }
            else
            {
                this.DPVSuccessfulStatusCondition = dPVSuccessfulStatusCondition;
            }
            // use default value if no "standardAddressPMBLine" provided
            if (standardAddressPMBLine == null)
            {
                this.StandardAddressPMBLine = "N";
            }
            else
            {
                this.StandardAddressPMBLine = standardAddressPMBLine;
            }
            // use default value if no "firmMatchingStrictness" provided
            if (firmMatchingStrictness == null)
            {
                this.FirmMatchingStrictness = "M";
            }
            else
            {
                this.FirmMatchingStrictness = firmMatchingStrictness;
            }
            // use default value if no "canRuralRouteFormat" provided
            if (canRuralRouteFormat == null)
            {
                this.CanRuralRouteFormat = "A";
            }
            else
            {
                this.CanRuralRouteFormat = canRuralRouteFormat;
            }
            // use default value if no "canPreferHouseNum" provided
            if (canPreferHouseNum == null)
            {
                this.CanPreferHouseNum = "N";
            }
            else
            {
                this.CanPreferHouseNum = canPreferHouseNum;
            }
            // use default value if no "outputPreferredAlias" provided
            if (outputPreferredAlias == null)
            {
                this.OutputPreferredAlias = "N";
            }
            else
            {
                this.OutputPreferredAlias = outputPreferredAlias;
            }
            // use default value if no "directionalMatchingStrictness" provided
            if (directionalMatchingStrictness == null)
            {
                this.DirectionalMatchingStrictness = "M";
            }
            else
            {
                this.DirectionalMatchingStrictness = directionalMatchingStrictness;
            }
            // use default value if no "extractFirm" provided
            if (extractFirm == null)
            {
                this.ExtractFirm = "N";
            }
            else
            {
                this.ExtractFirm = extractFirm;
            }
            // use default value if no "failOnCMRAMatch" provided
            if (failOnCMRAMatch == null)
            {
                this.FailOnCMRAMatch = "N";
            }
            else
            {
                this.FailOnCMRAMatch = failOnCMRAMatch;
            }
            // use default value if no "canNonCivicFormat" provided
            if (canNonCivicFormat == null)
            {
                this.CanNonCivicFormat = "A";
            }
            else
            {
                this.CanNonCivicFormat = canNonCivicFormat;
            }
            // use default value if no "canSSLVRFlg" provided
            if (canSSLVRFlg == null)
            {
                this.CanSSLVRFlg = "N";
            }
            else
            {
                this.CanSSLVRFlg = canSSLVRFlg;
            }
            // use default value if no "outputStreetNameAlias" provided
            if (outputStreetNameAlias == null)
            {
                this.OutputStreetNameAlias = "Y";
            }
            else
            {
                this.OutputStreetNameAlias = outputStreetNameAlias;
            }
            // use default value if no "performEWS" provided
            if (performEWS == null)
            {
                this.PerformEWS = "N";
            }
            else
            {
                this.PerformEWS = performEWS;
            }
            // use default value if no "canOutputCityFormat" provided
            if (canOutputCityFormat == null)
            {
                this.CanOutputCityFormat = "D";
            }
            else
            {
                this.CanOutputCityFormat = canOutputCityFormat;
            }
            // use default value if no "dualAddressLogic" provided
            if (dualAddressLogic == null)
            {
                this.DualAddressLogic = "N";
            }
            else
            {
                this.DualAddressLogic = dualAddressLogic;
            }
            // use default value if no "performSuiteLink" provided
            if (performSuiteLink == null)
            {
                this.PerformSuiteLink = "N";
            }
            else
            {
                this.PerformSuiteLink = performSuiteLink;
            }
            // use default value if no "canStandardAddressFormat" provided
            if (canStandardAddressFormat == null)
            {
                this.CanStandardAddressFormat = "D";
            }
            else
            {
                this.CanStandardAddressFormat = canStandardAddressFormat;
            }
            // use default value if no "outputPreferredCity" provided
            if (outputPreferredCity == null)
            {
                this.OutputPreferredCity = "Z";
            }
            else
            {
                this.OutputPreferredCity = outputPreferredCity;
            }
            // use default value if no "outputMultinationalCharacters" provided
            if (outputMultinationalCharacters == null)
            {
                this.OutputMultinationalCharacters = "N";
            }
            else
            {
                this.OutputMultinationalCharacters = outputMultinationalCharacters;
            }
            // use default value if no "canDeliveryOfficeFormat" provided
            if (canDeliveryOfficeFormat == null)
            {
                this.CanDeliveryOfficeFormat = "I";
            }
            else
            {
                this.CanDeliveryOfficeFormat = canDeliveryOfficeFormat;
            }
            // use default value if no "performLACSLink" provided
            if (performLACSLink == null)
            {
                this.PerformLACSLink = "Y";
            }
            else
            {
                this.PerformLACSLink = performLACSLink;
            }
            // use default value if no "canDualAddressLogic" provided
            if (canDualAddressLogic == null)
            {
                this.CanDualAddressLogic = "D";
            }
            else
            {
                this.CanDualAddressLogic = canDualAddressLogic;
            }
            // use default value if no "extractUrb" provided
            if (extractUrb == null)
            {
                this.ExtractUrb = "N";
            }
            else
            {
                this.ExtractUrb = extractUrb;
            }
            // use default value if no "standardAddressFormat" provided
            if (standardAddressFormat == null)
            {
                this.StandardAddressFormat = "C";
            }
            else
            {
                this.StandardAddressFormat = standardAddressFormat;
            }
            // use default value if no "canFrenchFormat" provided
            if (canFrenchFormat == null)
            {
                this.CanFrenchFormat = "C";
            }
            else
            {
                this.CanFrenchFormat = canFrenchFormat;
            }
            // use default value if no "dPVDetermineVacancy" provided
            if (dPVDetermineVacancy == null)
            {
                this.DPVDetermineVacancy = "N";
            }
            else
            {
                this.DPVDetermineVacancy = dPVDetermineVacancy;
            }
            // use default value if no "canEnglishApartmentLabel" provided
            if (canEnglishApartmentLabel == null)
            {
                this.CanEnglishApartmentLabel = "Apt";
            }
            else
            {
                this.CanEnglishApartmentLabel = canEnglishApartmentLabel;
            }
            // use default value if no "suppressZplusPhantomCarrierR777" provided
            if (suppressZplusPhantomCarrierR777 == null)
            {
                this.SuppressZplusPhantomCarrierR777 = "N";
            }
            else
            {
                this.SuppressZplusPhantomCarrierR777 = suppressZplusPhantomCarrierR777;
            }
            // use default value if no "canOutputCityAlias" provided
            if (canOutputCityAlias == null)
            {
                this.CanOutputCityAlias = "N";
            }
            else
            {
                this.CanOutputCityAlias = canOutputCityAlias;
            }
            // use default value if no "outputShortCityName" provided
            if (outputShortCityName == null)
            {
                this.OutputShortCityName = "N";
            }
            else
            {
                this.OutputShortCityName = outputShortCityName;
            }
        }

        /// <summary>
        /// Specifies whether to return a formatted version of the address.
        /// </summary>
        /// <value>Specifies whether to return a formatted version of the address.</value>
        [DataMember(Name="OutputAddressBlocks", EmitDefaultValue=false)]
        public string OutputAddressBlocks { get; set; }

        /// <summary>
        /// Specifies whether or not to process U.S. addresses.
        /// </summary>
        /// <value>Specifies whether or not to process U.S. addresses.</value>
        [DataMember(Name="PerformUSProcessing", EmitDefaultValue=false)]
        public string PerformUSProcessing { get; set; }

        /// <summary>
        /// Delivery Point Validation (DPV®) validates that a specific address exists
        /// </summary>
        /// <value>Delivery Point Validation (DPV®) validates that a specific address exists</value>
        [DataMember(Name="PerformDPV", EmitDefaultValue=false)]
        public string PerformDPV { get; set; }

        /// <summary>
        /// Specifies whether to return a formatted address when an address cannot be validated.
        /// </summary>
        /// <value>Specifies whether to return a formatted address when an address cannot be validated.</value>
        [DataMember(Name="OutputFormattedOnFail", EmitDefaultValue=false)]
        public string OutputFormattedOnFail { get; set; }

        /// <summary>
        /// Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes.
        /// </summary>
        /// <value>Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes.</value>
        [DataMember(Name="OutputPostalCodeSeparator", EmitDefaultValue=false)]
        public string OutputPostalCodeSeparator { get; set; }

        /// <summary>
        /// Specifies the format to use for the country name returned in the Country output field.
        /// </summary>
        /// <value>Specifies the format to use for the country name returned in the Country output field.</value>
        [DataMember(Name="OutputCountryFormat", EmitDefaultValue=false)]
        public string OutputCountryFormat { get; set; }

        /// <summary>
        /// Indicates whether to return multiple address for input addresses that have more than one possible matches.
        /// </summary>
        /// <value>Indicates whether to return multiple address for input addresses that have more than one possible matches.</value>
        [DataMember(Name="KeepMultimatch", EmitDefaultValue=false)]
        public string KeepMultimatch { get; set; }

        /// <summary>
        /// Specifies the casing of the output address. M for mixed case and U for upper case.
        /// </summary>
        /// <value>Specifies the casing of the output address. M for mixed case and U for upper case.</value>
        [DataMember(Name="OutputCasing", EmitDefaultValue=false)]
        public string OutputCasing { get; set; }

        /// <summary>
        /// Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned.
        /// </summary>
        /// <value>Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned.</value>
        [DataMember(Name="MaximumResults", EmitDefaultValue=false)]
        public string MaximumResults { get; set; }

        /// <summary>
        /// Specifies the type of the output record.
        /// </summary>
        /// <value>Specifies the type of the output record.</value>
        [DataMember(Name="OutputRecordType", EmitDefaultValue=false)]
        public string OutputRecordType { get; set; }

        /// <summary>
        /// Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes.
        /// </summary>
        /// <value>Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes.</value>
        [DataMember(Name="OutputFieldLevelReturnCodes", EmitDefaultValue=false)]
        public string OutputFieldLevelReturnCodes { get; set; }

        /// <summary>
        /// Determines the no stat status of an address which means it exists but cannot receive mails.
        /// </summary>
        /// <value>Determines the no stat status of an address which means it exists but cannot receive mails.</value>
        [DataMember(Name="DPVDetermineNoStat", EmitDefaultValue=false)]
        public string DPVDetermineNoStat { get; set; }

        /// <summary>
        /// Specifies the algorithm to determe if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determe if an input address matches in the postal database.</value>
        [DataMember(Name="StreetMatchingStrictness", EmitDefaultValue=false)]
        public string StreetMatchingStrictness { get; set; }

        /// <summary>
        /// Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address. 
        /// </summary>
        /// <value>Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address. </value>
        [DataMember(Name="CanFrenchApartmentLabel", EmitDefaultValue=false)]
        public string CanFrenchApartmentLabel { get; set; }

        /// <summary>
        /// Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters.
        /// </summary>
        /// <value>Specifies whether to use a street&#39;s abbreviated alias in the output if the output address line is longer than 31 characters.</value>
        [DataMember(Name="OutputAbbreviatedAlias", EmitDefaultValue=false)]
        public string OutputAbbreviatedAlias { get; set; }

        /// <summary>
        /// Selecting the match condition where a DPV result does NOT cause a record to fail.
        /// </summary>
        /// <value>Selecting the match condition where a DPV result does NOT cause a record to fail.</value>
        [DataMember(Name="DPVSuccessfulStatusCondition", EmitDefaultValue=false)]
        public string DPVSuccessfulStatusCondition { get; set; }

        /// <summary>
        /// Specifies where Private Mailbox (PMB) information is placed.
        /// </summary>
        /// <value>Specifies where Private Mailbox (PMB) information is placed.</value>
        [DataMember(Name="StandardAddressPMBLine", EmitDefaultValue=false)]
        public string StandardAddressPMBLine { get; set; }

        /// <summary>
        /// Specifies the algorithm to determining if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determining if an input address matches in the postal database.</value>
        [DataMember(Name="FirmMatchingStrictness", EmitDefaultValue=false)]
        public string FirmMatchingStrictness { get; set; }

        /// <summary>
        /// Specifies where to place rural route delivery information.
        /// </summary>
        /// <value>Specifies where to place rural route delivery information.</value>
        [DataMember(Name="CanRuralRouteFormat", EmitDefaultValue=false)]
        public string CanRuralRouteFormat { get; set; }

        /// <summary>
        /// Specifies whether to select a house number of postal code in case of conflict.
        /// </summary>
        /// <value>Specifies whether to select a house number of postal code in case of conflict.</value>
        [DataMember(Name="CanPreferHouseNum", EmitDefaultValue=false)]
        public string CanPreferHouseNum { get; set; }

        /// <summary>
        /// Specifies whether to use a street&#39;s preferred alias in the output.
        /// </summary>
        /// <value>Specifies whether to use a street&#39;s preferred alias in the output.</value>
        [DataMember(Name="OutputPreferredAlias", EmitDefaultValue=false)]
        public string OutputPreferredAlias { get; set; }

        /// <summary>
        /// Specifies the algorithm to determine if an input address matches in the postal database.
        /// </summary>
        /// <value>Specifies the algorithm to determine if an input address matches in the postal database.</value>
        [DataMember(Name="DirectionalMatchingStrictness", EmitDefaultValue=false)]
        public string DirectionalMatchingStrictness { get; set; }

        /// <summary>
        /// Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field.
        /// </summary>
        /// <value>Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field.</value>
        [DataMember(Name="ExtractFirm", EmitDefaultValue=false)]
        public string ExtractFirm { get; set; }

        /// <summary>
        /// Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures?
        /// </summary>
        /// <value>Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures?</value>
        [DataMember(Name="FailOnCMRAMatch", EmitDefaultValue=false)]
        public string FailOnCMRAMatch { get; set; }

        /// <summary>
        /// Specifies whether or not non-civic keywords are abbreviated in the output. 
        /// </summary>
        /// <value>Specifies whether or not non-civic keywords are abbreviated in the output. </value>
        [DataMember(Name="CanNonCivicFormat", EmitDefaultValue=false)]
        public string CanNonCivicFormat { get; set; }

        /// <summary>
        /// Changes the civic and/or suite information to match the LVR or single-single record.
        /// </summary>
        /// <value>Changes the civic and/or suite information to match the LVR or single-single record.</value>
        [DataMember(Name="CanSSLVRFlg", EmitDefaultValue=false)]
        public string CanSSLVRFlg { get; set; }

        /// <summary>
        /// Specifies how to handle street name aliases used in the input. This is specific to US.
        /// </summary>
        /// <value>Specifies how to handle street name aliases used in the input. This is specific to US.</value>
        [DataMember(Name="OutputStreetNameAlias", EmitDefaultValue=false)]
        public string OutputStreetNameAlias { get; set; }

        /// <summary>
        /// Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database.
        /// </summary>
        /// <value>Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database.</value>
        [DataMember(Name="PerformEWS", EmitDefaultValue=false)]
        public string PerformEWS { get; set; }

        /// <summary>
        /// Specifies whether to use the long, medium, or short version of the city if the city has a long name.
        /// </summary>
        /// <value>Specifies whether to use the long, medium, or short version of the city if the city has a long name.</value>
        [DataMember(Name="CanOutputCityFormat", EmitDefaultValue=false)]
        public string CanOutputCityFormat { get; set; }

        /// <summary>
        /// Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.)
        /// </summary>
        /// <value>Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.)</value>
        [DataMember(Name="DualAddressLogic", EmitDefaultValue=false)]
        public string DualAddressLogic { get; set; }

        /// <summary>
        /// Specifies whether to perform SuiteLink processing.
        /// </summary>
        /// <value>Specifies whether to perform SuiteLink processing.</value>
        [DataMember(Name="PerformSuiteLink", EmitDefaultValue=false)]
        public string PerformSuiteLink { get; set; }

        /// <summary>
        /// Specifies where to place secondary address information in the output address.
        /// </summary>
        /// <value>Specifies where to place secondary address information in the output address.</value>
        [DataMember(Name="CanStandardAddressFormat", EmitDefaultValue=false)]
        public string CanStandardAddressFormat { get; set; }

        /// <summary>
        /// Specifies whether the preferred last line city name should be stored.
        /// </summary>
        /// <value>Specifies whether the preferred last line city name should be stored.</value>
        [DataMember(Name="OutputPreferredCity", EmitDefaultValue=false)]
        public string OutputPreferredCity { get; set; }

        /// <summary>
        /// Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents.
        /// </summary>
        /// <value>Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents.</value>
        [DataMember(Name="OutputMultinationalCharacters", EmitDefaultValue=false)]
        public string OutputMultinationalCharacters { get; set; }

        /// <summary>
        /// Specifies where to place station information.
        /// </summary>
        /// <value>Specifies where to place station information.</value>
        [DataMember(Name="CanDeliveryOfficeFormat", EmitDefaultValue=false)]
        public string CanDeliveryOfficeFormat { get; set; }

        /// <summary>
        /// Facilitates the conversion of rural route address converting into street-style address using the LACS.
        /// </summary>
        /// <value>Facilitates the conversion of rural route address converting into street-style address using the LACS.</value>
        [DataMember(Name="PerformLACSLink", EmitDefaultValue=false)]
        public string PerformLACSLink { get; set; }

        /// <summary>
        /// Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information.
        /// </summary>
        /// <value>Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information.</value>
        [DataMember(Name="CanDualAddressLogic", EmitDefaultValue=false)]
        public string CanDualAddressLogic { get; set; }

        /// <summary>
        /// Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field. 
        /// </summary>
        /// <value>Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field. </value>
        [DataMember(Name="ExtractUrb", EmitDefaultValue=false)]
        public string ExtractUrb { get; set; }

        /// <summary>
        /// Specifies where to place secondary address information for U.S. addresses.
        /// </summary>
        /// <value>Specifies where to place secondary address information for U.S. addresses.</value>
        [DataMember(Name="StandardAddressFormat", EmitDefaultValue=false)]
        public string StandardAddressFormat { get; set; }

        /// <summary>
        /// Specifies how to determine the language (English or French) to use to format the address and directional.
        /// </summary>
        /// <value>Specifies how to determine the language (English or French) to use to format the address and directional.</value>
        [DataMember(Name="CanFrenchFormat", EmitDefaultValue=false)]
        public string CanFrenchFormat { get; set; }

        /// <summary>
        /// Determines if the location has been unoccupied for at least 90 days.
        /// </summary>
        /// <value>Determines if the location has been unoccupied for at least 90 days.</value>
        [DataMember(Name="DPVDetermineVacancy", EmitDefaultValue=false)]
        public string DPVDetermineVacancy { get; set; }

        /// <summary>
        /// Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses.
        /// </summary>
        /// <value>Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses.</value>
        [DataMember(Name="CanEnglishApartmentLabel", EmitDefaultValue=false)]
        public string CanEnglishApartmentLabel { get; set; }

        /// <summary>
        /// Specifies whether to supress addresses with Carrier Route R777.
        /// </summary>
        /// <value>Specifies whether to supress addresses with Carrier Route R777.</value>
        [DataMember(Name="SuppressZplusPhantomCarrierR777", EmitDefaultValue=false)]
        public string SuppressZplusPhantomCarrierR777 { get; set; }

        /// <summary>
        /// Specifies whether or not to return the city alias when the alias is in the input address.
        /// </summary>
        /// <value>Specifies whether or not to return the city alias when the alias is in the input address.</value>
        [DataMember(Name="CanOutputCityAlias", EmitDefaultValue=false)]
        public string CanOutputCityAlias { get; set; }

        /// <summary>
        /// Specifies how to format city names that have short city name or non-mailing city name alternatives.
        /// </summary>
        /// <value>Specifies how to format city names that have short city name or non-mailing city name alternatives.</value>
        [DataMember(Name="OutputShortCityName", EmitDefaultValue=false)]
        public string OutputShortCityName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressUSCANAPIOptions {\n");
            sb.Append("  OutputAddressBlocks: ").Append(OutputAddressBlocks).Append("\n");
            sb.Append("  PerformUSProcessing: ").Append(PerformUSProcessing).Append("\n");
            sb.Append("  PerformDPV: ").Append(PerformDPV).Append("\n");
            sb.Append("  OutputFormattedOnFail: ").Append(OutputFormattedOnFail).Append("\n");
            sb.Append("  OutputPostalCodeSeparator: ").Append(OutputPostalCodeSeparator).Append("\n");
            sb.Append("  OutputCountryFormat: ").Append(OutputCountryFormat).Append("\n");
            sb.Append("  KeepMultimatch: ").Append(KeepMultimatch).Append("\n");
            sb.Append("  OutputCasing: ").Append(OutputCasing).Append("\n");
            sb.Append("  MaximumResults: ").Append(MaximumResults).Append("\n");
            sb.Append("  OutputRecordType: ").Append(OutputRecordType).Append("\n");
            sb.Append("  OutputFieldLevelReturnCodes: ").Append(OutputFieldLevelReturnCodes).Append("\n");
            sb.Append("  DPVDetermineNoStat: ").Append(DPVDetermineNoStat).Append("\n");
            sb.Append("  StreetMatchingStrictness: ").Append(StreetMatchingStrictness).Append("\n");
            sb.Append("  CanFrenchApartmentLabel: ").Append(CanFrenchApartmentLabel).Append("\n");
            sb.Append("  OutputAbbreviatedAlias: ").Append(OutputAbbreviatedAlias).Append("\n");
            sb.Append("  DPVSuccessfulStatusCondition: ").Append(DPVSuccessfulStatusCondition).Append("\n");
            sb.Append("  StandardAddressPMBLine: ").Append(StandardAddressPMBLine).Append("\n");
            sb.Append("  FirmMatchingStrictness: ").Append(FirmMatchingStrictness).Append("\n");
            sb.Append("  CanRuralRouteFormat: ").Append(CanRuralRouteFormat).Append("\n");
            sb.Append("  CanPreferHouseNum: ").Append(CanPreferHouseNum).Append("\n");
            sb.Append("  OutputPreferredAlias: ").Append(OutputPreferredAlias).Append("\n");
            sb.Append("  DirectionalMatchingStrictness: ").Append(DirectionalMatchingStrictness).Append("\n");
            sb.Append("  ExtractFirm: ").Append(ExtractFirm).Append("\n");
            sb.Append("  FailOnCMRAMatch: ").Append(FailOnCMRAMatch).Append("\n");
            sb.Append("  CanNonCivicFormat: ").Append(CanNonCivicFormat).Append("\n");
            sb.Append("  CanSSLVRFlg: ").Append(CanSSLVRFlg).Append("\n");
            sb.Append("  OutputStreetNameAlias: ").Append(OutputStreetNameAlias).Append("\n");
            sb.Append("  PerformEWS: ").Append(PerformEWS).Append("\n");
            sb.Append("  CanOutputCityFormat: ").Append(CanOutputCityFormat).Append("\n");
            sb.Append("  DualAddressLogic: ").Append(DualAddressLogic).Append("\n");
            sb.Append("  PerformSuiteLink: ").Append(PerformSuiteLink).Append("\n");
            sb.Append("  CanStandardAddressFormat: ").Append(CanStandardAddressFormat).Append("\n");
            sb.Append("  OutputPreferredCity: ").Append(OutputPreferredCity).Append("\n");
            sb.Append("  OutputMultinationalCharacters: ").Append(OutputMultinationalCharacters).Append("\n");
            sb.Append("  CanDeliveryOfficeFormat: ").Append(CanDeliveryOfficeFormat).Append("\n");
            sb.Append("  PerformLACSLink: ").Append(PerformLACSLink).Append("\n");
            sb.Append("  CanDualAddressLogic: ").Append(CanDualAddressLogic).Append("\n");
            sb.Append("  ExtractUrb: ").Append(ExtractUrb).Append("\n");
            sb.Append("  StandardAddressFormat: ").Append(StandardAddressFormat).Append("\n");
            sb.Append("  CanFrenchFormat: ").Append(CanFrenchFormat).Append("\n");
            sb.Append("  DPVDetermineVacancy: ").Append(DPVDetermineVacancy).Append("\n");
            sb.Append("  CanEnglishApartmentLabel: ").Append(CanEnglishApartmentLabel).Append("\n");
            sb.Append("  SuppressZplusPhantomCarrierR777: ").Append(SuppressZplusPhantomCarrierR777).Append("\n");
            sb.Append("  CanOutputCityAlias: ").Append(CanOutputCityAlias).Append("\n");
            sb.Append("  OutputShortCityName: ").Append(OutputShortCityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateMailingAddressUSCANAPIOptions);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressUSCANAPIOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateMailingAddressUSCANAPIOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressUSCANAPIOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutputAddressBlocks == input.OutputAddressBlocks ||
                    (this.OutputAddressBlocks != null &&
                    this.OutputAddressBlocks.Equals(input.OutputAddressBlocks))
                ) && 
                (
                    this.PerformUSProcessing == input.PerformUSProcessing ||
                    (this.PerformUSProcessing != null &&
                    this.PerformUSProcessing.Equals(input.PerformUSProcessing))
                ) && 
                (
                    this.PerformDPV == input.PerformDPV ||
                    (this.PerformDPV != null &&
                    this.PerformDPV.Equals(input.PerformDPV))
                ) && 
                (
                    this.OutputFormattedOnFail == input.OutputFormattedOnFail ||
                    (this.OutputFormattedOnFail != null &&
                    this.OutputFormattedOnFail.Equals(input.OutputFormattedOnFail))
                ) && 
                (
                    this.OutputPostalCodeSeparator == input.OutputPostalCodeSeparator ||
                    (this.OutputPostalCodeSeparator != null &&
                    this.OutputPostalCodeSeparator.Equals(input.OutputPostalCodeSeparator))
                ) && 
                (
                    this.OutputCountryFormat == input.OutputCountryFormat ||
                    (this.OutputCountryFormat != null &&
                    this.OutputCountryFormat.Equals(input.OutputCountryFormat))
                ) && 
                (
                    this.KeepMultimatch == input.KeepMultimatch ||
                    (this.KeepMultimatch != null &&
                    this.KeepMultimatch.Equals(input.KeepMultimatch))
                ) && 
                (
                    this.OutputCasing == input.OutputCasing ||
                    (this.OutputCasing != null &&
                    this.OutputCasing.Equals(input.OutputCasing))
                ) && 
                (
                    this.MaximumResults == input.MaximumResults ||
                    (this.MaximumResults != null &&
                    this.MaximumResults.Equals(input.MaximumResults))
                ) && 
                (
                    this.OutputRecordType == input.OutputRecordType ||
                    (this.OutputRecordType != null &&
                    this.OutputRecordType.Equals(input.OutputRecordType))
                ) && 
                (
                    this.OutputFieldLevelReturnCodes == input.OutputFieldLevelReturnCodes ||
                    (this.OutputFieldLevelReturnCodes != null &&
                    this.OutputFieldLevelReturnCodes.Equals(input.OutputFieldLevelReturnCodes))
                ) && 
                (
                    this.DPVDetermineNoStat == input.DPVDetermineNoStat ||
                    (this.DPVDetermineNoStat != null &&
                    this.DPVDetermineNoStat.Equals(input.DPVDetermineNoStat))
                ) && 
                (
                    this.StreetMatchingStrictness == input.StreetMatchingStrictness ||
                    (this.StreetMatchingStrictness != null &&
                    this.StreetMatchingStrictness.Equals(input.StreetMatchingStrictness))
                ) && 
                (
                    this.CanFrenchApartmentLabel == input.CanFrenchApartmentLabel ||
                    (this.CanFrenchApartmentLabel != null &&
                    this.CanFrenchApartmentLabel.Equals(input.CanFrenchApartmentLabel))
                ) && 
                (
                    this.OutputAbbreviatedAlias == input.OutputAbbreviatedAlias ||
                    (this.OutputAbbreviatedAlias != null &&
                    this.OutputAbbreviatedAlias.Equals(input.OutputAbbreviatedAlias))
                ) && 
                (
                    this.DPVSuccessfulStatusCondition == input.DPVSuccessfulStatusCondition ||
                    (this.DPVSuccessfulStatusCondition != null &&
                    this.DPVSuccessfulStatusCondition.Equals(input.DPVSuccessfulStatusCondition))
                ) && 
                (
                    this.StandardAddressPMBLine == input.StandardAddressPMBLine ||
                    (this.StandardAddressPMBLine != null &&
                    this.StandardAddressPMBLine.Equals(input.StandardAddressPMBLine))
                ) && 
                (
                    this.FirmMatchingStrictness == input.FirmMatchingStrictness ||
                    (this.FirmMatchingStrictness != null &&
                    this.FirmMatchingStrictness.Equals(input.FirmMatchingStrictness))
                ) && 
                (
                    this.CanRuralRouteFormat == input.CanRuralRouteFormat ||
                    (this.CanRuralRouteFormat != null &&
                    this.CanRuralRouteFormat.Equals(input.CanRuralRouteFormat))
                ) && 
                (
                    this.CanPreferHouseNum == input.CanPreferHouseNum ||
                    (this.CanPreferHouseNum != null &&
                    this.CanPreferHouseNum.Equals(input.CanPreferHouseNum))
                ) && 
                (
                    this.OutputPreferredAlias == input.OutputPreferredAlias ||
                    (this.OutputPreferredAlias != null &&
                    this.OutputPreferredAlias.Equals(input.OutputPreferredAlias))
                ) && 
                (
                    this.DirectionalMatchingStrictness == input.DirectionalMatchingStrictness ||
                    (this.DirectionalMatchingStrictness != null &&
                    this.DirectionalMatchingStrictness.Equals(input.DirectionalMatchingStrictness))
                ) && 
                (
                    this.ExtractFirm == input.ExtractFirm ||
                    (this.ExtractFirm != null &&
                    this.ExtractFirm.Equals(input.ExtractFirm))
                ) && 
                (
                    this.FailOnCMRAMatch == input.FailOnCMRAMatch ||
                    (this.FailOnCMRAMatch != null &&
                    this.FailOnCMRAMatch.Equals(input.FailOnCMRAMatch))
                ) && 
                (
                    this.CanNonCivicFormat == input.CanNonCivicFormat ||
                    (this.CanNonCivicFormat != null &&
                    this.CanNonCivicFormat.Equals(input.CanNonCivicFormat))
                ) && 
                (
                    this.CanSSLVRFlg == input.CanSSLVRFlg ||
                    (this.CanSSLVRFlg != null &&
                    this.CanSSLVRFlg.Equals(input.CanSSLVRFlg))
                ) && 
                (
                    this.OutputStreetNameAlias == input.OutputStreetNameAlias ||
                    (this.OutputStreetNameAlias != null &&
                    this.OutputStreetNameAlias.Equals(input.OutputStreetNameAlias))
                ) && 
                (
                    this.PerformEWS == input.PerformEWS ||
                    (this.PerformEWS != null &&
                    this.PerformEWS.Equals(input.PerformEWS))
                ) && 
                (
                    this.CanOutputCityFormat == input.CanOutputCityFormat ||
                    (this.CanOutputCityFormat != null &&
                    this.CanOutputCityFormat.Equals(input.CanOutputCityFormat))
                ) && 
                (
                    this.DualAddressLogic == input.DualAddressLogic ||
                    (this.DualAddressLogic != null &&
                    this.DualAddressLogic.Equals(input.DualAddressLogic))
                ) && 
                (
                    this.PerformSuiteLink == input.PerformSuiteLink ||
                    (this.PerformSuiteLink != null &&
                    this.PerformSuiteLink.Equals(input.PerformSuiteLink))
                ) && 
                (
                    this.CanStandardAddressFormat == input.CanStandardAddressFormat ||
                    (this.CanStandardAddressFormat != null &&
                    this.CanStandardAddressFormat.Equals(input.CanStandardAddressFormat))
                ) && 
                (
                    this.OutputPreferredCity == input.OutputPreferredCity ||
                    (this.OutputPreferredCity != null &&
                    this.OutputPreferredCity.Equals(input.OutputPreferredCity))
                ) && 
                (
                    this.OutputMultinationalCharacters == input.OutputMultinationalCharacters ||
                    (this.OutputMultinationalCharacters != null &&
                    this.OutputMultinationalCharacters.Equals(input.OutputMultinationalCharacters))
                ) && 
                (
                    this.CanDeliveryOfficeFormat == input.CanDeliveryOfficeFormat ||
                    (this.CanDeliveryOfficeFormat != null &&
                    this.CanDeliveryOfficeFormat.Equals(input.CanDeliveryOfficeFormat))
                ) && 
                (
                    this.PerformLACSLink == input.PerformLACSLink ||
                    (this.PerformLACSLink != null &&
                    this.PerformLACSLink.Equals(input.PerformLACSLink))
                ) && 
                (
                    this.CanDualAddressLogic == input.CanDualAddressLogic ||
                    (this.CanDualAddressLogic != null &&
                    this.CanDualAddressLogic.Equals(input.CanDualAddressLogic))
                ) && 
                (
                    this.ExtractUrb == input.ExtractUrb ||
                    (this.ExtractUrb != null &&
                    this.ExtractUrb.Equals(input.ExtractUrb))
                ) && 
                (
                    this.StandardAddressFormat == input.StandardAddressFormat ||
                    (this.StandardAddressFormat != null &&
                    this.StandardAddressFormat.Equals(input.StandardAddressFormat))
                ) && 
                (
                    this.CanFrenchFormat == input.CanFrenchFormat ||
                    (this.CanFrenchFormat != null &&
                    this.CanFrenchFormat.Equals(input.CanFrenchFormat))
                ) && 
                (
                    this.DPVDetermineVacancy == input.DPVDetermineVacancy ||
                    (this.DPVDetermineVacancy != null &&
                    this.DPVDetermineVacancy.Equals(input.DPVDetermineVacancy))
                ) && 
                (
                    this.CanEnglishApartmentLabel == input.CanEnglishApartmentLabel ||
                    (this.CanEnglishApartmentLabel != null &&
                    this.CanEnglishApartmentLabel.Equals(input.CanEnglishApartmentLabel))
                ) && 
                (
                    this.SuppressZplusPhantomCarrierR777 == input.SuppressZplusPhantomCarrierR777 ||
                    (this.SuppressZplusPhantomCarrierR777 != null &&
                    this.SuppressZplusPhantomCarrierR777.Equals(input.SuppressZplusPhantomCarrierR777))
                ) && 
                (
                    this.CanOutputCityAlias == input.CanOutputCityAlias ||
                    (this.CanOutputCityAlias != null &&
                    this.CanOutputCityAlias.Equals(input.CanOutputCityAlias))
                ) && 
                (
                    this.OutputShortCityName == input.OutputShortCityName ||
                    (this.OutputShortCityName != null &&
                    this.OutputShortCityName.Equals(input.OutputShortCityName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutputAddressBlocks != null)
                    hashCode = hashCode * 59 + this.OutputAddressBlocks.GetHashCode();
                if (this.PerformUSProcessing != null)
                    hashCode = hashCode * 59 + this.PerformUSProcessing.GetHashCode();
                if (this.PerformDPV != null)
                    hashCode = hashCode * 59 + this.PerformDPV.GetHashCode();
                if (this.OutputFormattedOnFail != null)
                    hashCode = hashCode * 59 + this.OutputFormattedOnFail.GetHashCode();
                if (this.OutputPostalCodeSeparator != null)
                    hashCode = hashCode * 59 + this.OutputPostalCodeSeparator.GetHashCode();
                if (this.OutputCountryFormat != null)
                    hashCode = hashCode * 59 + this.OutputCountryFormat.GetHashCode();
                if (this.KeepMultimatch != null)
                    hashCode = hashCode * 59 + this.KeepMultimatch.GetHashCode();
                if (this.OutputCasing != null)
                    hashCode = hashCode * 59 + this.OutputCasing.GetHashCode();
                if (this.MaximumResults != null)
                    hashCode = hashCode * 59 + this.MaximumResults.GetHashCode();
                if (this.OutputRecordType != null)
                    hashCode = hashCode * 59 + this.OutputRecordType.GetHashCode();
                if (this.OutputFieldLevelReturnCodes != null)
                    hashCode = hashCode * 59 + this.OutputFieldLevelReturnCodes.GetHashCode();
                if (this.DPVDetermineNoStat != null)
                    hashCode = hashCode * 59 + this.DPVDetermineNoStat.GetHashCode();
                if (this.StreetMatchingStrictness != null)
                    hashCode = hashCode * 59 + this.StreetMatchingStrictness.GetHashCode();
                if (this.CanFrenchApartmentLabel != null)
                    hashCode = hashCode * 59 + this.CanFrenchApartmentLabel.GetHashCode();
                if (this.OutputAbbreviatedAlias != null)
                    hashCode = hashCode * 59 + this.OutputAbbreviatedAlias.GetHashCode();
                if (this.DPVSuccessfulStatusCondition != null)
                    hashCode = hashCode * 59 + this.DPVSuccessfulStatusCondition.GetHashCode();
                if (this.StandardAddressPMBLine != null)
                    hashCode = hashCode * 59 + this.StandardAddressPMBLine.GetHashCode();
                if (this.FirmMatchingStrictness != null)
                    hashCode = hashCode * 59 + this.FirmMatchingStrictness.GetHashCode();
                if (this.CanRuralRouteFormat != null)
                    hashCode = hashCode * 59 + this.CanRuralRouteFormat.GetHashCode();
                if (this.CanPreferHouseNum != null)
                    hashCode = hashCode * 59 + this.CanPreferHouseNum.GetHashCode();
                if (this.OutputPreferredAlias != null)
                    hashCode = hashCode * 59 + this.OutputPreferredAlias.GetHashCode();
                if (this.DirectionalMatchingStrictness != null)
                    hashCode = hashCode * 59 + this.DirectionalMatchingStrictness.GetHashCode();
                if (this.ExtractFirm != null)
                    hashCode = hashCode * 59 + this.ExtractFirm.GetHashCode();
                if (this.FailOnCMRAMatch != null)
                    hashCode = hashCode * 59 + this.FailOnCMRAMatch.GetHashCode();
                if (this.CanNonCivicFormat != null)
                    hashCode = hashCode * 59 + this.CanNonCivicFormat.GetHashCode();
                if (this.CanSSLVRFlg != null)
                    hashCode = hashCode * 59 + this.CanSSLVRFlg.GetHashCode();
                if (this.OutputStreetNameAlias != null)
                    hashCode = hashCode * 59 + this.OutputStreetNameAlias.GetHashCode();
                if (this.PerformEWS != null)
                    hashCode = hashCode * 59 + this.PerformEWS.GetHashCode();
                if (this.CanOutputCityFormat != null)
                    hashCode = hashCode * 59 + this.CanOutputCityFormat.GetHashCode();
                if (this.DualAddressLogic != null)
                    hashCode = hashCode * 59 + this.DualAddressLogic.GetHashCode();
                if (this.PerformSuiteLink != null)
                    hashCode = hashCode * 59 + this.PerformSuiteLink.GetHashCode();
                if (this.CanStandardAddressFormat != null)
                    hashCode = hashCode * 59 + this.CanStandardAddressFormat.GetHashCode();
                if (this.OutputPreferredCity != null)
                    hashCode = hashCode * 59 + this.OutputPreferredCity.GetHashCode();
                if (this.OutputMultinationalCharacters != null)
                    hashCode = hashCode * 59 + this.OutputMultinationalCharacters.GetHashCode();
                if (this.CanDeliveryOfficeFormat != null)
                    hashCode = hashCode * 59 + this.CanDeliveryOfficeFormat.GetHashCode();
                if (this.PerformLACSLink != null)
                    hashCode = hashCode * 59 + this.PerformLACSLink.GetHashCode();
                if (this.CanDualAddressLogic != null)
                    hashCode = hashCode * 59 + this.CanDualAddressLogic.GetHashCode();
                if (this.ExtractUrb != null)
                    hashCode = hashCode * 59 + this.ExtractUrb.GetHashCode();
                if (this.StandardAddressFormat != null)
                    hashCode = hashCode * 59 + this.StandardAddressFormat.GetHashCode();
                if (this.CanFrenchFormat != null)
                    hashCode = hashCode * 59 + this.CanFrenchFormat.GetHashCode();
                if (this.DPVDetermineVacancy != null)
                    hashCode = hashCode * 59 + this.DPVDetermineVacancy.GetHashCode();
                if (this.CanEnglishApartmentLabel != null)
                    hashCode = hashCode * 59 + this.CanEnglishApartmentLabel.GetHashCode();
                if (this.SuppressZplusPhantomCarrierR777 != null)
                    hashCode = hashCode * 59 + this.SuppressZplusPhantomCarrierR777.GetHashCode();
                if (this.CanOutputCityAlias != null)
                    hashCode = hashCode * 59 + this.CanOutputCityAlias.GetHashCode();
                if (this.OutputShortCityName != null)
                    hashCode = hashCode * 59 + this.OutputShortCityName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
