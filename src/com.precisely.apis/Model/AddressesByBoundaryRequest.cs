/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// AddressesByBoundaryRequest
    /// </summary>
    [DataContract]
    public partial class AddressesByBoundaryRequest :  IEquatable<AddressesByBoundaryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesByBoundaryRequest" /> class.
        /// </summary>
        /// <param name="preferences">preferences.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="geometryAsText">geometryAsText.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="travelTime">travelTime.</param>
        /// <param name="travelTimeUnit">travelTimeUnit.</param>
        /// <param name="travelDistance">travelDistance.</param>
        /// <param name="travelDistanceUnit">travelDistanceUnit.</param>
        /// <param name="travelMode">travelMode.</param>
        public AddressesByBoundaryRequest(AddressesPreferences preferences = default(AddressesPreferences), Geometry geometry = default(Geometry), string geometryAsText = default(string), double latitude = default(double), double longitude = default(double), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string))
        {
            this.Preferences = preferences;
            this.Geometry = geometry;
            this.GeometryAsText = geometryAsText;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.TravelTime = travelTime;
            this.TravelTimeUnit = travelTimeUnit;
            this.TravelDistance = travelDistance;
            this.TravelDistanceUnit = travelDistanceUnit;
            this.TravelMode = travelMode;
        }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name="preferences", EmitDefaultValue=false)]
        public AddressesPreferences Preferences { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public Geometry Geometry { get; set; }

        /// <summary>
        /// Gets or Sets GeometryAsText
        /// </summary>
        [DataMember(Name="geometryAsText", EmitDefaultValue=false)]
        public string GeometryAsText { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets TravelTime
        /// </summary>
        [DataMember(Name="travelTime", EmitDefaultValue=false)]
        public string TravelTime { get; set; }

        /// <summary>
        /// Gets or Sets TravelTimeUnit
        /// </summary>
        [DataMember(Name="travelTimeUnit", EmitDefaultValue=false)]
        public string TravelTimeUnit { get; set; }

        /// <summary>
        /// Gets or Sets TravelDistance
        /// </summary>
        [DataMember(Name="travelDistance", EmitDefaultValue=false)]
        public string TravelDistance { get; set; }

        /// <summary>
        /// Gets or Sets TravelDistanceUnit
        /// </summary>
        [DataMember(Name="travelDistanceUnit", EmitDefaultValue=false)]
        public string TravelDistanceUnit { get; set; }

        /// <summary>
        /// Gets or Sets TravelMode
        /// </summary>
        [DataMember(Name="travelMode", EmitDefaultValue=false)]
        public string TravelMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressesByBoundaryRequest {\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  GeometryAsText: ").Append(GeometryAsText).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  TravelTimeUnit: ").Append(TravelTimeUnit).Append("\n");
            sb.Append("  TravelDistance: ").Append(TravelDistance).Append("\n");
            sb.Append("  TravelDistanceUnit: ").Append(TravelDistanceUnit).Append("\n");
            sb.Append("  TravelMode: ").Append(TravelMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressesByBoundaryRequest);
        }

        /// <summary>
        /// Returns true if AddressesByBoundaryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressesByBoundaryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressesByBoundaryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Preferences == input.Preferences ||
                    (this.Preferences != null &&
                    this.Preferences.Equals(input.Preferences))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.GeometryAsText == input.GeometryAsText ||
                    (this.GeometryAsText != null &&
                    this.GeometryAsText.Equals(input.GeometryAsText))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.TravelTime == input.TravelTime ||
                    (this.TravelTime != null &&
                    this.TravelTime.Equals(input.TravelTime))
                ) && 
                (
                    this.TravelTimeUnit == input.TravelTimeUnit ||
                    (this.TravelTimeUnit != null &&
                    this.TravelTimeUnit.Equals(input.TravelTimeUnit))
                ) && 
                (
                    this.TravelDistance == input.TravelDistance ||
                    (this.TravelDistance != null &&
                    this.TravelDistance.Equals(input.TravelDistance))
                ) && 
                (
                    this.TravelDistanceUnit == input.TravelDistanceUnit ||
                    (this.TravelDistanceUnit != null &&
                    this.TravelDistanceUnit.Equals(input.TravelDistanceUnit))
                ) && 
                (
                    this.TravelMode == input.TravelMode ||
                    (this.TravelMode != null &&
                    this.TravelMode.Equals(input.TravelMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Preferences != null)
                    hashCode = hashCode * 59 + this.Preferences.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.GeometryAsText != null)
                    hashCode = hashCode * 59 + this.GeometryAsText.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.TravelTime != null)
                    hashCode = hashCode * 59 + this.TravelTime.GetHashCode();
                if (this.TravelTimeUnit != null)
                    hashCode = hashCode * 59 + this.TravelTimeUnit.GetHashCode();
                if (this.TravelDistance != null)
                    hashCode = hashCode * 59 + this.TravelDistance.GetHashCode();
                if (this.TravelDistanceUnit != null)
                    hashCode = hashCode * 59 + this.TravelDistanceUnit.GetHashCode();
                if (this.TravelMode != null)
                    hashCode = hashCode * 59 + this.TravelMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
