/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// Ipd
    /// </summary>
    [DataContract]
    public partial class Ipd :  IEquatable<Ipd>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ipd" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="districtName">districtName.</param>
        /// <param name="districtType">districtType.</param>
        /// <param name="taxCodeDescription">taxCodeDescription.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="boundaryBuffer">boundaryBuffer.</param>
        /// <param name="rates">rates.</param>
        public Ipd(string id = default(string), string districtName = default(string), DistrictType districtType = default(DistrictType), string taxCodeDescription = default(string), string effectiveDate = default(string), string expirationDate = default(string), BoundaryBuffer boundaryBuffer = default(BoundaryBuffer), List<Rate> rates = default(List<Rate>))
        {
            this.Id = id;
            this.DistrictName = districtName;
            this.DistrictType = districtType;
            this.TaxCodeDescription = taxCodeDescription;
            this.EffectiveDate = effectiveDate;
            this.ExpirationDate = expirationDate;
            this.BoundaryBuffer = boundaryBuffer;
            this.Rates = rates;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DistrictName
        /// </summary>
        [DataMember(Name="districtName", EmitDefaultValue=false)]
        public string DistrictName { get; set; }

        /// <summary>
        /// Gets or Sets DistrictType
        /// </summary>
        [DataMember(Name="districtType", EmitDefaultValue=false)]
        public DistrictType DistrictType { get; set; }

        /// <summary>
        /// Gets or Sets TaxCodeDescription
        /// </summary>
        [DataMember(Name="taxCodeDescription", EmitDefaultValue=false)]
        public string TaxCodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets BoundaryBuffer
        /// </summary>
        [DataMember(Name="boundaryBuffer", EmitDefaultValue=false)]
        public BoundaryBuffer BoundaryBuffer { get; set; }

        /// <summary>
        /// Gets or Sets Rates
        /// </summary>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<Rate> Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ipd {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  DistrictType: ").Append(DistrictType).Append("\n");
            sb.Append("  TaxCodeDescription: ").Append(TaxCodeDescription).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  BoundaryBuffer: ").Append(BoundaryBuffer).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ipd);
        }

        /// <summary>
        /// Returns true if Ipd instances are equal
        /// </summary>
        /// <param name="input">Instance of Ipd to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ipd input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DistrictName == input.DistrictName ||
                    (this.DistrictName != null &&
                    this.DistrictName.Equals(input.DistrictName))
                ) && 
                (
                    this.DistrictType == input.DistrictType ||
                    (this.DistrictType != null &&
                    this.DistrictType.Equals(input.DistrictType))
                ) && 
                (
                    this.TaxCodeDescription == input.TaxCodeDescription ||
                    (this.TaxCodeDescription != null &&
                    this.TaxCodeDescription.Equals(input.TaxCodeDescription))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.BoundaryBuffer == input.BoundaryBuffer ||
                    (this.BoundaryBuffer != null &&
                    this.BoundaryBuffer.Equals(input.BoundaryBuffer))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DistrictName != null)
                    hashCode = hashCode * 59 + this.DistrictName.GetHashCode();
                if (this.DistrictType != null)
                    hashCode = hashCode * 59 + this.DistrictType.GetHashCode();
                if (this.TaxCodeDescription != null)
                    hashCode = hashCode * 59 + this.TaxCodeDescription.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.BoundaryBuffer != null)
                    hashCode = hashCode * 59 + this.BoundaryBuffer.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
