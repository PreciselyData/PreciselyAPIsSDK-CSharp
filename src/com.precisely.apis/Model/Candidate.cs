/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 14.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// Candidate
    /// </summary>
    [DataContract]
    public partial class Candidate :  IEquatable<Candidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Candidate" /> class.
        /// </summary>
        /// <param name="precisionLevel">precisionLevel.</param>
        /// <param name="formattedStreetAddress">formattedStreetAddress.</param>
        /// <param name="formattedLocationAddress">formattedLocationAddress.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="precisionCode">precisionCode.</param>
        /// <param name="sourceDictionary">sourceDictionary.</param>
        /// <param name="matching">matching.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="address">address.</param>
        /// <param name="ranges">ranges.</param>
        public Candidate(int precisionLevel = default(int), string formattedStreetAddress = default(string), string formattedLocationAddress = default(string), string identifier = default(string), string precisionCode = default(string), string sourceDictionary = default(string), FieldsMatching matching = default(FieldsMatching), GeoPos geometry = default(GeoPos), GeocodeAddress address = default(GeocodeAddress), List<CandidateRange> ranges = default(List<CandidateRange>))
        {
            this.PrecisionLevel = precisionLevel;
            this.FormattedStreetAddress = formattedStreetAddress;
            this.FormattedLocationAddress = formattedLocationAddress;
            this.Identifier = identifier;
            this.PrecisionCode = precisionCode;
            this.SourceDictionary = sourceDictionary;
            this.Matching = matching;
            this.Geometry = geometry;
            this.Address = address;
            this.Ranges = ranges;
        }

        /// <summary>
        /// Gets or Sets PrecisionLevel
        /// </summary>
        [DataMember(Name="precisionLevel", EmitDefaultValue=false)]
        public int PrecisionLevel { get; set; }

        /// <summary>
        /// Gets or Sets FormattedStreetAddress
        /// </summary>
        [DataMember(Name="formattedStreetAddress", EmitDefaultValue=false)]
        public string FormattedStreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets FormattedLocationAddress
        /// </summary>
        [DataMember(Name="formattedLocationAddress", EmitDefaultValue=false)]
        public string FormattedLocationAddress { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets PrecisionCode
        /// </summary>
        [DataMember(Name="precisionCode", EmitDefaultValue=false)]
        public string PrecisionCode { get; set; }

        /// <summary>
        /// Gets or Sets SourceDictionary
        /// </summary>
        [DataMember(Name="sourceDictionary", EmitDefaultValue=false)]
        public string SourceDictionary { get; set; }

        /// <summary>
        /// Gets or Sets Matching
        /// </summary>
        [DataMember(Name="matching", EmitDefaultValue=false)]
        public FieldsMatching Matching { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public GeoPos Geometry { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public GeocodeAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Ranges
        /// </summary>
        [DataMember(Name="ranges", EmitDefaultValue=false)]
        public List<CandidateRange> Ranges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Candidate {\n");
            sb.Append("  PrecisionLevel: ").Append(PrecisionLevel).Append("\n");
            sb.Append("  FormattedStreetAddress: ").Append(FormattedStreetAddress).Append("\n");
            sb.Append("  FormattedLocationAddress: ").Append(FormattedLocationAddress).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  PrecisionCode: ").Append(PrecisionCode).Append("\n");
            sb.Append("  SourceDictionary: ").Append(SourceDictionary).Append("\n");
            sb.Append("  Matching: ").Append(Matching).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Candidate);
        }

        /// <summary>
        /// Returns true if Candidate instances are equal
        /// </summary>
        /// <param name="input">Instance of Candidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Candidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrecisionLevel == input.PrecisionLevel ||
                    (this.PrecisionLevel != null &&
                    this.PrecisionLevel.Equals(input.PrecisionLevel))
                ) && 
                (
                    this.FormattedStreetAddress == input.FormattedStreetAddress ||
                    (this.FormattedStreetAddress != null &&
                    this.FormattedStreetAddress.Equals(input.FormattedStreetAddress))
                ) && 
                (
                    this.FormattedLocationAddress == input.FormattedLocationAddress ||
                    (this.FormattedLocationAddress != null &&
                    this.FormattedLocationAddress.Equals(input.FormattedLocationAddress))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.PrecisionCode == input.PrecisionCode ||
                    (this.PrecisionCode != null &&
                    this.PrecisionCode.Equals(input.PrecisionCode))
                ) && 
                (
                    this.SourceDictionary == input.SourceDictionary ||
                    (this.SourceDictionary != null &&
                    this.SourceDictionary.Equals(input.SourceDictionary))
                ) && 
                (
                    this.Matching == input.Matching ||
                    (this.Matching != null &&
                    this.Matching.Equals(input.Matching))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Ranges == input.Ranges ||
                    this.Ranges != null &&
                    input.Ranges != null &&
                    this.Ranges.SequenceEqual(input.Ranges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrecisionLevel != null)
                    hashCode = hashCode * 59 + this.PrecisionLevel.GetHashCode();
                if (this.FormattedStreetAddress != null)
                    hashCode = hashCode * 59 + this.FormattedStreetAddress.GetHashCode();
                if (this.FormattedLocationAddress != null)
                    hashCode = hashCode * 59 + this.FormattedLocationAddress.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.PrecisionCode != null)
                    hashCode = hashCode * 59 + this.PrecisionCode.GetHashCode();
                if (this.SourceDictionary != null)
                    hashCode = hashCode * 59 + this.SourceDictionary.GetHashCode();
                if (this.Matching != null)
                    hashCode = hashCode * 59 + this.Matching.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Ranges != null)
                    hashCode = hashCode * 59 + this.Ranges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
