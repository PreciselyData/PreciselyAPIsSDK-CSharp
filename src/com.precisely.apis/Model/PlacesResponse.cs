/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// PlacesResponse
    /// </summary>
    [DataContract]
    public partial class PlacesResponse :  IEquatable<PlacesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesResponse" /> class.
        /// </summary>
        /// <param name="page">page.</param>
        /// <param name="candidates">candidates.</param>
        /// <param name="totalMatchingCandidates">totalMatchingCandidates.</param>
        /// <param name="poi">poi.</param>
        /// <param name="matchedAddress">matchedAddress.</param>
        public PlacesResponse(string page = default(string), string candidates = default(string), string totalMatchingCandidates = default(string), List<Poi> poi = default(List<Poi>), Address matchedAddress = default(Address))
        {
            this.Page = page;
            this.Candidates = candidates;
            this.TotalMatchingCandidates = totalMatchingCandidates;
            this.Poi = poi;
            this.MatchedAddress = matchedAddress;
        }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public string Page { get; set; }

        /// <summary>
        /// Gets or Sets Candidates
        /// </summary>
        [DataMember(Name="candidates", EmitDefaultValue=false)]
        public string Candidates { get; set; }

        /// <summary>
        /// Gets or Sets TotalMatchingCandidates
        /// </summary>
        [DataMember(Name="totalMatchingCandidates", EmitDefaultValue=false)]
        public string TotalMatchingCandidates { get; set; }

        /// <summary>
        /// Gets or Sets Poi
        /// </summary>
        [DataMember(Name="poi", EmitDefaultValue=false)]
        public List<Poi> Poi { get; set; }

        /// <summary>
        /// Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name="matchedAddress", EmitDefaultValue=false)]
        public Address MatchedAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlacesResponse {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Candidates: ").Append(Candidates).Append("\n");
            sb.Append("  TotalMatchingCandidates: ").Append(TotalMatchingCandidates).Append("\n");
            sb.Append("  Poi: ").Append(Poi).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacesResponse);
        }

        /// <summary>
        /// Returns true if PlacesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Candidates == input.Candidates ||
                    (this.Candidates != null &&
                    this.Candidates.Equals(input.Candidates))
                ) && 
                (
                    this.TotalMatchingCandidates == input.TotalMatchingCandidates ||
                    (this.TotalMatchingCandidates != null &&
                    this.TotalMatchingCandidates.Equals(input.TotalMatchingCandidates))
                ) && 
                (
                    this.Poi == input.Poi ||
                    this.Poi != null &&
                    input.Poi != null &&
                    this.Poi.SequenceEqual(input.Poi)
                ) && 
                (
                    this.MatchedAddress == input.MatchedAddress ||
                    (this.MatchedAddress != null &&
                    this.MatchedAddress.Equals(input.MatchedAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Candidates != null)
                    hashCode = hashCode * 59 + this.Candidates.GetHashCode();
                if (this.TotalMatchingCandidates != null)
                    hashCode = hashCode * 59 + this.TotalMatchingCandidates.GetHashCode();
                if (this.Poi != null)
                    hashCode = hashCode * 59 + this.Poi.GetHashCode();
                if (this.MatchedAddress != null)
                    hashCode = hashCode * 59 + this.MatchedAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
