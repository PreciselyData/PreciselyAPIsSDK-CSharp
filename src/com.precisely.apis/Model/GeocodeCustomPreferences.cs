/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// GeocodeCustomPreferences
    /// </summary>
    [DataContract]
    public partial class GeocodeCustomPreferences :  IEquatable<GeocodeCustomPreferences>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodeCustomPreferences" /> class.
        /// </summary>
        /// <param name="FALLBACK_TO_WORLD">FALLBACK_TO_WORLD (default to true).</param>
        /// <param name="USE_ADDRESS_POINT_INTERPOLATION">USE_ADDRESS_POINT_INTERPOLATION (default to true).</param>
        /// <param name="USE_CENTERLINE_OFFSET">USE_CENTERLINE_OFFSET.</param>
        /// <param name="CENTERLINE_OFFSET">CENTERLINE_OFFSET.</param>
        public GeocodeCustomPreferences(bool? FALLBACK_TO_WORLD = null, bool? USE_ADDRESS_POINT_INTERPOLATION = null, string USE_CENTERLINE_OFFSET = null, string CENTERLINE_OFFSET = null)
        {
            // use default value if no "FALLBACK_TO_WORLD" provided
            if (FALLBACK_TO_WORLD == null)
            {
                this.FALLBACK_TO_WORLD = true;
            }
            else
            {
                this.FALLBACK_TO_WORLD = FALLBACK_TO_WORLD;
            }
            // use default value if no "USE_ADDRESS_POINT_INTERPOLATION" provided
            if (USE_ADDRESS_POINT_INTERPOLATION == null)
            {
                this.USE_ADDRESS_POINT_INTERPOLATION = true;
            }
            else
            {
                this.USE_ADDRESS_POINT_INTERPOLATION = USE_ADDRESS_POINT_INTERPOLATION;
            }
            this.USE_CENTERLINE_OFFSET = USE_CENTERLINE_OFFSET;
            this.CENTERLINE_OFFSET = CENTERLINE_OFFSET;
        }
        
        /// <summary>
        /// Gets or Sets FALLBACK_TO_WORLD
        /// </summary>
        [DataMember(Name="FALLBACK_TO_WORLD", EmitDefaultValue=false)]
        public bool? FALLBACK_TO_WORLD { get; set; }
        /// <summary>
        /// Gets or Sets USE_ADDRESS_POINT_INTERPOLATION
        /// </summary>
        [DataMember(Name="USE_ADDRESS_POINT_INTERPOLATION", EmitDefaultValue=false)]
        public bool? USE_ADDRESS_POINT_INTERPOLATION { get; set; }
        /// <summary>
        /// Gets or Sets USE_CENTERLINE_OFFSET
        /// </summary>
        [DataMember(Name="USE_CENTERLINE_OFFSET", EmitDefaultValue=false)]
        public string USE_CENTERLINE_OFFSET { get; set; }
        /// <summary>
        /// Gets or Sets CENTERLINE_OFFSET
        /// </summary>
        [DataMember(Name="CENTERLINE_OFFSET", EmitDefaultValue=false)]
        public string CENTERLINE_OFFSET { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeocodeCustomPreferences {\n");
            sb.Append("  FALLBACK_TO_WORLD: ").Append(FALLBACK_TO_WORLD).Append("\n");
            sb.Append("  USE_ADDRESS_POINT_INTERPOLATION: ").Append(USE_ADDRESS_POINT_INTERPOLATION).Append("\n");
            sb.Append("  USE_CENTERLINE_OFFSET: ").Append(USE_CENTERLINE_OFFSET).Append("\n");
            sb.Append("  CENTERLINE_OFFSET: ").Append(CENTERLINE_OFFSET).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GeocodeCustomPreferences);
        }

        /// <summary>
        /// Returns true if GeocodeCustomPreferences instances are equal
        /// </summary>
        /// <param name="other">Instance of GeocodeCustomPreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeocodeCustomPreferences other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FALLBACK_TO_WORLD == other.FALLBACK_TO_WORLD ||
                    this.FALLBACK_TO_WORLD != null &&
                    this.FALLBACK_TO_WORLD.Equals(other.FALLBACK_TO_WORLD)
                ) && 
                (
                    this.USE_ADDRESS_POINT_INTERPOLATION == other.USE_ADDRESS_POINT_INTERPOLATION ||
                    this.USE_ADDRESS_POINT_INTERPOLATION != null &&
                    this.USE_ADDRESS_POINT_INTERPOLATION.Equals(other.USE_ADDRESS_POINT_INTERPOLATION)
                ) && 
                (
                    this.USE_CENTERLINE_OFFSET == other.USE_CENTERLINE_OFFSET ||
                    this.USE_CENTERLINE_OFFSET != null &&
                    this.USE_CENTERLINE_OFFSET.Equals(other.USE_CENTERLINE_OFFSET)
                ) && 
                (
                    this.CENTERLINE_OFFSET == other.CENTERLINE_OFFSET ||
                    this.CENTERLINE_OFFSET != null &&
                    this.CENTERLINE_OFFSET.Equals(other.CENTERLINE_OFFSET)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FALLBACK_TO_WORLD != null)
                    hash = hash * 59 + this.FALLBACK_TO_WORLD.GetHashCode();
                if (this.USE_ADDRESS_POINT_INTERPOLATION != null)
                    hash = hash * 59 + this.USE_ADDRESS_POINT_INTERPOLATION.GetHashCode();
                if (this.USE_CENTERLINE_OFFSET != null)
                    hash = hash * 59 + this.USE_CENTERLINE_OFFSET.GetHashCode();
                if (this.CENTERLINE_OFFSET != null)
                    hash = hash * 59 + this.CENTERLINE_OFFSET.GetHashCode();
                return hash;
            }
        }
    }

}
