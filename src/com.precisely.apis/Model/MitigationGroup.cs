/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// MitigationGroup
    /// </summary>
    [DataContract]
    public partial class MitigationGroup :  IEquatable<MitigationGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MitigationGroup" /> class.
        /// </summary>
        /// <param name="waterDist">waterDist.</param>
        /// <param name="topoPos">topoPos.</param>
        /// <param name="burnable">burnable.</param>
        /// <param name="fStnDist">fStnDist.</param>
        public MitigationGroup(int waterDist = default(int), int topoPos = default(int), int burnable = default(int), int fStnDist = default(int))
        {
            this.WaterDist = waterDist;
            this.TopoPos = topoPos;
            this.Burnable = burnable;
            this.FStnDist = fStnDist;
        }

        /// <summary>
        /// Gets or Sets WaterDist
        /// </summary>
        [DataMember(Name="waterDist", EmitDefaultValue=false)]
        public int WaterDist { get; set; }

        /// <summary>
        /// Gets or Sets TopoPos
        /// </summary>
        [DataMember(Name="topoPos", EmitDefaultValue=false)]
        public int TopoPos { get; set; }

        /// <summary>
        /// Gets or Sets Burnable
        /// </summary>
        [DataMember(Name="burnable", EmitDefaultValue=false)]
        public int Burnable { get; set; }

        /// <summary>
        /// Gets or Sets FStnDist
        /// </summary>
        [DataMember(Name="fStnDist", EmitDefaultValue=false)]
        public int FStnDist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MitigationGroup {\n");
            sb.Append("  WaterDist: ").Append(WaterDist).Append("\n");
            sb.Append("  TopoPos: ").Append(TopoPos).Append("\n");
            sb.Append("  Burnable: ").Append(Burnable).Append("\n");
            sb.Append("  FStnDist: ").Append(FStnDist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MitigationGroup);
        }

        /// <summary>
        /// Returns true if MitigationGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of MitigationGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MitigationGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WaterDist == input.WaterDist ||
                    (this.WaterDist != null &&
                    this.WaterDist.Equals(input.WaterDist))
                ) && 
                (
                    this.TopoPos == input.TopoPos ||
                    (this.TopoPos != null &&
                    this.TopoPos.Equals(input.TopoPos))
                ) && 
                (
                    this.Burnable == input.Burnable ||
                    (this.Burnable != null &&
                    this.Burnable.Equals(input.Burnable))
                ) && 
                (
                    this.FStnDist == input.FStnDist ||
                    (this.FStnDist != null &&
                    this.FStnDist.Equals(input.FStnDist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WaterDist != null)
                    hashCode = hashCode * 59 + this.WaterDist.GetHashCode();
                if (this.TopoPos != null)
                    hashCode = hashCode * 59 + this.TopoPos.GetHashCode();
                if (this.Burnable != null)
                    hashCode = hashCode * 59 + this.Burnable.GetHashCode();
                if (this.FStnDist != null)
                    hashCode = hashCode * 59 + this.FStnDist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
