/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// FrequencyGroup
    /// </summary>
    [DataContract]
    public partial class FrequencyGroup :  IEquatable<FrequencyGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrequencyGroup" /> class.
        /// </summary>
        /// <param name="burnProb">burnProb.</param>
        /// <param name="histPerim">histPerim.</param>
        /// <param name="probIgnit">probIgnit.</param>
        /// <param name="lineDist">lineDist.</param>
        public FrequencyGroup(int burnProb = default(int), int histPerim = default(int), int probIgnit = default(int), int lineDist = default(int))
        {
            this.BurnProb = burnProb;
            this.HistPerim = histPerim;
            this.ProbIgnit = probIgnit;
            this.LineDist = lineDist;
        }

        /// <summary>
        /// Gets or Sets BurnProb
        /// </summary>
        [DataMember(Name="burnProb", EmitDefaultValue=false)]
        public int BurnProb { get; set; }

        /// <summary>
        /// Gets or Sets HistPerim
        /// </summary>
        [DataMember(Name="histPerim", EmitDefaultValue=false)]
        public int HistPerim { get; set; }

        /// <summary>
        /// Gets or Sets ProbIgnit
        /// </summary>
        [DataMember(Name="probIgnit", EmitDefaultValue=false)]
        public int ProbIgnit { get; set; }

        /// <summary>
        /// Gets or Sets LineDist
        /// </summary>
        [DataMember(Name="lineDist", EmitDefaultValue=false)]
        public int LineDist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrequencyGroup {\n");
            sb.Append("  BurnProb: ").Append(BurnProb).Append("\n");
            sb.Append("  HistPerim: ").Append(HistPerim).Append("\n");
            sb.Append("  ProbIgnit: ").Append(ProbIgnit).Append("\n");
            sb.Append("  LineDist: ").Append(LineDist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FrequencyGroup);
        }

        /// <summary>
        /// Returns true if FrequencyGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of FrequencyGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrequencyGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BurnProb == input.BurnProb ||
                    (this.BurnProb != null &&
                    this.BurnProb.Equals(input.BurnProb))
                ) && 
                (
                    this.HistPerim == input.HistPerim ||
                    (this.HistPerim != null &&
                    this.HistPerim.Equals(input.HistPerim))
                ) && 
                (
                    this.ProbIgnit == input.ProbIgnit ||
                    (this.ProbIgnit != null &&
                    this.ProbIgnit.Equals(input.ProbIgnit))
                ) && 
                (
                    this.LineDist == input.LineDist ||
                    (this.LineDist != null &&
                    this.LineDist.Equals(input.LineDist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BurnProb != null)
                    hashCode = hashCode * 59 + this.BurnProb.GetHashCode();
                if (this.HistPerim != null)
                    hashCode = hashCode * 59 + this.HistPerim.GetHashCode();
                if (this.ProbIgnit != null)
                    hashCode = hashCode * 59 + this.ProbIgnit.GetHashCode();
                if (this.LineDist != null)
                    hashCode = hashCode * 59 + this.LineDist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
