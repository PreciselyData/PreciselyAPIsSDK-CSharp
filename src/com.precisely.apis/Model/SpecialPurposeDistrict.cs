/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// SpecialPurposeDistrict
    /// </summary>
    [DataContract]
    public partial class SpecialPurposeDistrict :  IEquatable<SpecialPurposeDistrict>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialPurposeDistrict" /> class.
        /// </summary>
        /// <param name="districtName">districtName.</param>
        /// <param name="districtCode">districtCode.</param>
        /// <param name="districtNumber">districtNumber.</param>
        /// <param name="versionDate">versionDate.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="compiledDate">compiledDate.</param>
        /// <param name="updateDate">updateDate.</param>
        public SpecialPurposeDistrict(string districtName = default(string), string districtCode = default(string), string districtNumber = default(string), string versionDate = default(string), string effectiveDate = default(string), string compiledDate = default(string), string updateDate = default(string))
        {
            this.DistrictName = districtName;
            this.DistrictCode = districtCode;
            this.DistrictNumber = districtNumber;
            this.VersionDate = versionDate;
            this.EffectiveDate = effectiveDate;
            this.CompiledDate = compiledDate;
            this.UpdateDate = updateDate;
        }

        /// <summary>
        /// Gets or Sets DistrictName
        /// </summary>
        [DataMember(Name="districtName", EmitDefaultValue=false)]
        public string DistrictName { get; set; }

        /// <summary>
        /// Gets or Sets DistrictCode
        /// </summary>
        [DataMember(Name="districtCode", EmitDefaultValue=false)]
        public string DistrictCode { get; set; }

        /// <summary>
        /// Gets or Sets DistrictNumber
        /// </summary>
        [DataMember(Name="districtNumber", EmitDefaultValue=false)]
        public string DistrictNumber { get; set; }

        /// <summary>
        /// Gets or Sets VersionDate
        /// </summary>
        [DataMember(Name="versionDate", EmitDefaultValue=false)]
        public string VersionDate { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets CompiledDate
        /// </summary>
        [DataMember(Name="compiledDate", EmitDefaultValue=false)]
        public string CompiledDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="updateDate", EmitDefaultValue=false)]
        public string UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecialPurposeDistrict {\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  DistrictCode: ").Append(DistrictCode).Append("\n");
            sb.Append("  DistrictNumber: ").Append(DistrictNumber).Append("\n");
            sb.Append("  VersionDate: ").Append(VersionDate).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  CompiledDate: ").Append(CompiledDate).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecialPurposeDistrict);
        }

        /// <summary>
        /// Returns true if SpecialPurposeDistrict instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecialPurposeDistrict to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecialPurposeDistrict input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DistrictName == input.DistrictName ||
                    (this.DistrictName != null &&
                    this.DistrictName.Equals(input.DistrictName))
                ) && 
                (
                    this.DistrictCode == input.DistrictCode ||
                    (this.DistrictCode != null &&
                    this.DistrictCode.Equals(input.DistrictCode))
                ) && 
                (
                    this.DistrictNumber == input.DistrictNumber ||
                    (this.DistrictNumber != null &&
                    this.DistrictNumber.Equals(input.DistrictNumber))
                ) && 
                (
                    this.VersionDate == input.VersionDate ||
                    (this.VersionDate != null &&
                    this.VersionDate.Equals(input.VersionDate))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.CompiledDate == input.CompiledDate ||
                    (this.CompiledDate != null &&
                    this.CompiledDate.Equals(input.CompiledDate))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DistrictName != null)
                    hashCode = hashCode * 59 + this.DistrictName.GetHashCode();
                if (this.DistrictCode != null)
                    hashCode = hashCode * 59 + this.DistrictCode.GetHashCode();
                if (this.DistrictNumber != null)
                    hashCode = hashCode * 59 + this.DistrictNumber.GetHashCode();
                if (this.VersionDate != null)
                    hashCode = hashCode * 59 + this.VersionDate.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.CompiledDate != null)
                    hashCode = hashCode * 59 + this.CompiledDate.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
