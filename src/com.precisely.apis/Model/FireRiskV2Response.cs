/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// FireRiskV2Response
    /// </summary>
    [DataContract]
    public partial class FireRiskV2Response :  IEquatable<FireRiskV2Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FireRiskV2Response" /> class.
        /// </summary>
        /// <param name="objectId">objectId.</param>
        /// <param name="state">state.</param>
        /// <param name="noharmId">noharmId.</param>
        /// <param name="noharmCls">noharmCls.</param>
        /// <param name="noharmModel">noharmModel.</param>
        /// <param name="riskDesc">riskDesc.</param>
        /// <param name="risk50">risk50.</param>
        /// <param name="severity">severity.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="community">community.</param>
        /// <param name="damage">damage.</param>
        /// <param name="mitigation">mitigation.</param>
        /// <param name="severityGroupElements">severityGroupElements.</param>
        /// <param name="frequencyGroupElements">frequencyGroupElements.</param>
        /// <param name="communityGroupElements">communityGroupElements.</param>
        /// <param name="damageGroupElements">damageGroupElements.</param>
        /// <param name="mitigationGroupElements">mitigationGroupElements.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="matchedAddress">matchedAddress.</param>
        public FireRiskV2Response(string objectId = default(string), string state = default(string), string noharmId = default(string), string noharmCls = default(string), string noharmModel = default(string), string riskDesc = default(string), int risk50 = default(int), int severity = default(int), int frequency = default(int), int community = default(int), int damage = default(int), int mitigation = default(int), SeverityGroup severityGroupElements = default(SeverityGroup), FrequencyGroup frequencyGroupElements = default(FrequencyGroup), CommunityGroup communityGroupElements = default(CommunityGroup), DamageGroup damageGroupElements = default(DamageGroup), MitigationGroup mitigationGroupElements = default(MitigationGroup), CommonGeometry geometry = default(CommonGeometry), RiskAddress matchedAddress = default(RiskAddress))
        {
            this.ObjectId = objectId;
            this.State = state;
            this.NoharmId = noharmId;
            this.NoharmCls = noharmCls;
            this.NoharmModel = noharmModel;
            this.RiskDesc = riskDesc;
            this.Risk50 = risk50;
            this.Severity = severity;
            this.Frequency = frequency;
            this.Community = community;
            this.Damage = damage;
            this.Mitigation = mitigation;
            this.SeverityGroupElements = severityGroupElements;
            this.FrequencyGroupElements = frequencyGroupElements;
            this.CommunityGroupElements = communityGroupElements;
            this.DamageGroupElements = damageGroupElements;
            this.MitigationGroupElements = mitigationGroupElements;
            this.Geometry = geometry;
            this.MatchedAddress = matchedAddress;
        }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets NoharmId
        /// </summary>
        [DataMember(Name="noharmId", EmitDefaultValue=false)]
        public string NoharmId { get; set; }

        /// <summary>
        /// Gets or Sets NoharmCls
        /// </summary>
        [DataMember(Name="noharmCls", EmitDefaultValue=false)]
        public string NoharmCls { get; set; }

        /// <summary>
        /// Gets or Sets NoharmModel
        /// </summary>
        [DataMember(Name="noharmModel", EmitDefaultValue=false)]
        public string NoharmModel { get; set; }

        /// <summary>
        /// Gets or Sets RiskDesc
        /// </summary>
        [DataMember(Name="riskDesc", EmitDefaultValue=false)]
        public string RiskDesc { get; set; }

        /// <summary>
        /// Gets or Sets Risk50
        /// </summary>
        [DataMember(Name="risk50", EmitDefaultValue=false)]
        public int Risk50 { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int Severity { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int Frequency { get; set; }

        /// <summary>
        /// Gets or Sets Community
        /// </summary>
        [DataMember(Name="community", EmitDefaultValue=false)]
        public int Community { get; set; }

        /// <summary>
        /// Gets or Sets Damage
        /// </summary>
        [DataMember(Name="damage", EmitDefaultValue=false)]
        public int Damage { get; set; }

        /// <summary>
        /// Gets or Sets Mitigation
        /// </summary>
        [DataMember(Name="mitigation", EmitDefaultValue=false)]
        public int Mitigation { get; set; }

        /// <summary>
        /// Gets or Sets SeverityGroupElements
        /// </summary>
        [DataMember(Name="severityGroupElements", EmitDefaultValue=false)]
        public SeverityGroup SeverityGroupElements { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyGroupElements
        /// </summary>
        [DataMember(Name="frequencyGroupElements", EmitDefaultValue=false)]
        public FrequencyGroup FrequencyGroupElements { get; set; }

        /// <summary>
        /// Gets or Sets CommunityGroupElements
        /// </summary>
        [DataMember(Name="communityGroupElements", EmitDefaultValue=false)]
        public CommunityGroup CommunityGroupElements { get; set; }

        /// <summary>
        /// Gets or Sets DamageGroupElements
        /// </summary>
        [DataMember(Name="damageGroupElements", EmitDefaultValue=false)]
        public DamageGroup DamageGroupElements { get; set; }

        /// <summary>
        /// Gets or Sets MitigationGroupElements
        /// </summary>
        [DataMember(Name="mitigationGroupElements", EmitDefaultValue=false)]
        public MitigationGroup MitigationGroupElements { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public CommonGeometry Geometry { get; set; }

        /// <summary>
        /// Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name="matchedAddress", EmitDefaultValue=false)]
        public RiskAddress MatchedAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FireRiskV2Response {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  NoharmId: ").Append(NoharmId).Append("\n");
            sb.Append("  NoharmCls: ").Append(NoharmCls).Append("\n");
            sb.Append("  NoharmModel: ").Append(NoharmModel).Append("\n");
            sb.Append("  RiskDesc: ").Append(RiskDesc).Append("\n");
            sb.Append("  Risk50: ").Append(Risk50).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Community: ").Append(Community).Append("\n");
            sb.Append("  Damage: ").Append(Damage).Append("\n");
            sb.Append("  Mitigation: ").Append(Mitigation).Append("\n");
            sb.Append("  SeverityGroupElements: ").Append(SeverityGroupElements).Append("\n");
            sb.Append("  FrequencyGroupElements: ").Append(FrequencyGroupElements).Append("\n");
            sb.Append("  CommunityGroupElements: ").Append(CommunityGroupElements).Append("\n");
            sb.Append("  DamageGroupElements: ").Append(DamageGroupElements).Append("\n");
            sb.Append("  MitigationGroupElements: ").Append(MitigationGroupElements).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FireRiskV2Response);
        }

        /// <summary>
        /// Returns true if FireRiskV2Response instances are equal
        /// </summary>
        /// <param name="input">Instance of FireRiskV2Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FireRiskV2Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.NoharmId == input.NoharmId ||
                    (this.NoharmId != null &&
                    this.NoharmId.Equals(input.NoharmId))
                ) && 
                (
                    this.NoharmCls == input.NoharmCls ||
                    (this.NoharmCls != null &&
                    this.NoharmCls.Equals(input.NoharmCls))
                ) && 
                (
                    this.NoharmModel == input.NoharmModel ||
                    (this.NoharmModel != null &&
                    this.NoharmModel.Equals(input.NoharmModel))
                ) && 
                (
                    this.RiskDesc == input.RiskDesc ||
                    (this.RiskDesc != null &&
                    this.RiskDesc.Equals(input.RiskDesc))
                ) && 
                (
                    this.Risk50 == input.Risk50 ||
                    (this.Risk50 != null &&
                    this.Risk50.Equals(input.Risk50))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Community == input.Community ||
                    (this.Community != null &&
                    this.Community.Equals(input.Community))
                ) && 
                (
                    this.Damage == input.Damage ||
                    (this.Damage != null &&
                    this.Damage.Equals(input.Damage))
                ) && 
                (
                    this.Mitigation == input.Mitigation ||
                    (this.Mitigation != null &&
                    this.Mitigation.Equals(input.Mitigation))
                ) && 
                (
                    this.SeverityGroupElements == input.SeverityGroupElements ||
                    (this.SeverityGroupElements != null &&
                    this.SeverityGroupElements.Equals(input.SeverityGroupElements))
                ) && 
                (
                    this.FrequencyGroupElements == input.FrequencyGroupElements ||
                    (this.FrequencyGroupElements != null &&
                    this.FrequencyGroupElements.Equals(input.FrequencyGroupElements))
                ) && 
                (
                    this.CommunityGroupElements == input.CommunityGroupElements ||
                    (this.CommunityGroupElements != null &&
                    this.CommunityGroupElements.Equals(input.CommunityGroupElements))
                ) && 
                (
                    this.DamageGroupElements == input.DamageGroupElements ||
                    (this.DamageGroupElements != null &&
                    this.DamageGroupElements.Equals(input.DamageGroupElements))
                ) && 
                (
                    this.MitigationGroupElements == input.MitigationGroupElements ||
                    (this.MitigationGroupElements != null &&
                    this.MitigationGroupElements.Equals(input.MitigationGroupElements))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.MatchedAddress == input.MatchedAddress ||
                    (this.MatchedAddress != null &&
                    this.MatchedAddress.Equals(input.MatchedAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.NoharmId != null)
                    hashCode = hashCode * 59 + this.NoharmId.GetHashCode();
                if (this.NoharmCls != null)
                    hashCode = hashCode * 59 + this.NoharmCls.GetHashCode();
                if (this.NoharmModel != null)
                    hashCode = hashCode * 59 + this.NoharmModel.GetHashCode();
                if (this.RiskDesc != null)
                    hashCode = hashCode * 59 + this.RiskDesc.GetHashCode();
                if (this.Risk50 != null)
                    hashCode = hashCode * 59 + this.Risk50.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Community != null)
                    hashCode = hashCode * 59 + this.Community.GetHashCode();
                if (this.Damage != null)
                    hashCode = hashCode * 59 + this.Damage.GetHashCode();
                if (this.Mitigation != null)
                    hashCode = hashCode * 59 + this.Mitigation.GetHashCode();
                if (this.SeverityGroupElements != null)
                    hashCode = hashCode * 59 + this.SeverityGroupElements.GetHashCode();
                if (this.FrequencyGroupElements != null)
                    hashCode = hashCode * 59 + this.FrequencyGroupElements.GetHashCode();
                if (this.CommunityGroupElements != null)
                    hashCode = hashCode * 59 + this.CommunityGroupElements.GetHashCode();
                if (this.DamageGroupElements != null)
                    hashCode = hashCode * 59 + this.DamageGroupElements.GetHashCode();
                if (this.MitigationGroupElements != null)
                    hashCode = hashCode * 59 + this.MitigationGroupElements.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.MatchedAddress != null)
                    hashCode = hashCode * 59 + this.MatchedAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
