/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 10.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// GetCityStateProvinceAPIOptions
    /// </summary>
    [DataContract]
    public partial class GetCityStateProvinceAPIOptions :  IEquatable<GetCityStateProvinceAPIOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCityStateProvinceAPIOptions" /> class.
        /// </summary>
        /// <param name="OutputVanityCity">Output VanityCity. (default to &quot;N&quot;).</param>
        /// <param name="PerformCanadianProcessing">PerformCanadianProcessing. (default to &quot;Y&quot;).</param>
        /// <param name="MaximumResults">MaximumResults. (default to &quot;10&quot;).</param>
        /// <param name="PerformUSProcessing">PerformUSProcessing. (default to &quot;Y&quot;).</param>
        public GetCityStateProvinceAPIOptions(string OutputVanityCity = null, string PerformCanadianProcessing = null, string MaximumResults = null, string PerformUSProcessing = null)
        {
            // use default value if no "OutputVanityCity" provided
            if (OutputVanityCity == null)
            {
                this.OutputVanityCity = "N";
            }
            else
            {
                this.OutputVanityCity = OutputVanityCity;
            }
            // use default value if no "PerformCanadianProcessing" provided
            if (PerformCanadianProcessing == null)
            {
                this.PerformCanadianProcessing = "Y";
            }
            else
            {
                this.PerformCanadianProcessing = PerformCanadianProcessing;
            }
            // use default value if no "MaximumResults" provided
            if (MaximumResults == null)
            {
                this.MaximumResults = "10";
            }
            else
            {
                this.MaximumResults = MaximumResults;
            }
            // use default value if no "PerformUSProcessing" provided
            if (PerformUSProcessing == null)
            {
                this.PerformUSProcessing = "Y";
            }
            else
            {
                this.PerformUSProcessing = PerformUSProcessing;
            }
        }
        
        /// <summary>
        /// Output VanityCity.
        /// </summary>
        /// <value>Output VanityCity.</value>
        [DataMember(Name="OutputVanityCity", EmitDefaultValue=false)]
        public string OutputVanityCity { get; set; }
        /// <summary>
        /// PerformCanadianProcessing.
        /// </summary>
        /// <value>PerformCanadianProcessing.</value>
        [DataMember(Name="PerformCanadianProcessing", EmitDefaultValue=false)]
        public string PerformCanadianProcessing { get; set; }
        /// <summary>
        /// MaximumResults.
        /// </summary>
        /// <value>MaximumResults.</value>
        [DataMember(Name="MaximumResults", EmitDefaultValue=false)]
        public string MaximumResults { get; set; }
        /// <summary>
        /// PerformUSProcessing.
        /// </summary>
        /// <value>PerformUSProcessing.</value>
        [DataMember(Name="PerformUSProcessing", EmitDefaultValue=false)]
        public string PerformUSProcessing { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCityStateProvinceAPIOptions {\n");
            sb.Append("  OutputVanityCity: ").Append(OutputVanityCity).Append("\n");
            sb.Append("  PerformCanadianProcessing: ").Append(PerformCanadianProcessing).Append("\n");
            sb.Append("  MaximumResults: ").Append(MaximumResults).Append("\n");
            sb.Append("  PerformUSProcessing: ").Append(PerformUSProcessing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCityStateProvinceAPIOptions);
        }

        /// <summary>
        /// Returns true if GetCityStateProvinceAPIOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCityStateProvinceAPIOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCityStateProvinceAPIOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OutputVanityCity == other.OutputVanityCity ||
                    this.OutputVanityCity != null &&
                    this.OutputVanityCity.Equals(other.OutputVanityCity)
                ) && 
                (
                    this.PerformCanadianProcessing == other.PerformCanadianProcessing ||
                    this.PerformCanadianProcessing != null &&
                    this.PerformCanadianProcessing.Equals(other.PerformCanadianProcessing)
                ) && 
                (
                    this.MaximumResults == other.MaximumResults ||
                    this.MaximumResults != null &&
                    this.MaximumResults.Equals(other.MaximumResults)
                ) && 
                (
                    this.PerformUSProcessing == other.PerformUSProcessing ||
                    this.PerformUSProcessing != null &&
                    this.PerformUSProcessing.Equals(other.PerformUSProcessing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OutputVanityCity != null)
                    hash = hash * 59 + this.OutputVanityCity.GetHashCode();
                if (this.PerformCanadianProcessing != null)
                    hash = hash * 59 + this.PerformCanadianProcessing.GetHashCode();
                if (this.MaximumResults != null)
                    hash = hash * 59 + this.MaximumResults.GetHashCode();
                if (this.PerformUSProcessing != null)
                    hash = hash * 59 + this.PerformUSProcessing.GetHashCode();
                return hash;
            }
        }
    }

}
