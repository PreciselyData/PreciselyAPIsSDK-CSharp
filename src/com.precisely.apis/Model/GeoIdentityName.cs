/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// GeoIdentityName
    /// </summary>
    [DataContract]
    public partial class GeoIdentityName :  IEquatable<GeoIdentityName>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoIdentityName" /> class.
        /// </summary>
        /// <param name="Given">Given.</param>
        /// <param name="Family">Family.</param>
        /// <param name="Middle">Middle.</param>
        /// <param name="Prefix">Prefix.</param>
        /// <param name="Suffix">Suffix.</param>
        /// <param name="Nickname">Nickname.</param>
        public GeoIdentityName(string Given = null, string Family = null, string Middle = null, string Prefix = null, string Suffix = null, string Nickname = null)
        {
            this.Given = Given;
            this.Family = Family;
            this.Middle = Middle;
            this.Prefix = Prefix;
            this.Suffix = Suffix;
            this.Nickname = Nickname;
        }
        
        /// <summary>
        /// Gets or Sets Given
        /// </summary>
        [DataMember(Name="given", EmitDefaultValue=false)]
        public string Given { get; set; }
        /// <summary>
        /// Gets or Sets Family
        /// </summary>
        [DataMember(Name="family", EmitDefaultValue=false)]
        public string Family { get; set; }
        /// <summary>
        /// Gets or Sets Middle
        /// </summary>
        [DataMember(Name="middle", EmitDefaultValue=false)]
        public string Middle { get; set; }
        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }
        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }
        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeoIdentityName {\n");
            sb.Append("  Given: ").Append(Given).Append("\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  Middle: ").Append(Middle).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GeoIdentityName);
        }

        /// <summary>
        /// Returns true if GeoIdentityName instances are equal
        /// </summary>
        /// <param name="other">Instance of GeoIdentityName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoIdentityName other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Given == other.Given ||
                    this.Given != null &&
                    this.Given.Equals(other.Given)
                ) && 
                (
                    this.Family == other.Family ||
                    this.Family != null &&
                    this.Family.Equals(other.Family)
                ) && 
                (
                    this.Middle == other.Middle ||
                    this.Middle != null &&
                    this.Middle.Equals(other.Middle)
                ) && 
                (
                    this.Prefix == other.Prefix ||
                    this.Prefix != null &&
                    this.Prefix.Equals(other.Prefix)
                ) && 
                (
                    this.Suffix == other.Suffix ||
                    this.Suffix != null &&
                    this.Suffix.Equals(other.Suffix)
                ) && 
                (
                    this.Nickname == other.Nickname ||
                    this.Nickname != null &&
                    this.Nickname.Equals(other.Nickname)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Given != null)
                    hash = hash * 59 + this.Given.GetHashCode();
                if (this.Family != null)
                    hash = hash * 59 + this.Family.GetHashCode();
                if (this.Middle != null)
                    hash = hash * 59 + this.Middle.GetHashCode();
                if (this.Prefix != null)
                    hash = hash * 59 + this.Prefix.GetHashCode();
                if (this.Suffix != null)
                    hash = hash * 59 + this.Suffix.GetHashCode();
                if (this.Nickname != null)
                    hash = hash * 59 + this.Nickname.GetHashCode();
                return hash;
            }
        }
    }

}
