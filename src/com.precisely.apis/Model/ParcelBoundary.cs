/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ParcelBoundary
    /// </summary>
    [DataContract]
    public partial class ParcelBoundary :  IEquatable<ParcelBoundary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelBoundary" /> class.
        /// </summary>
        /// <param name="objectId">objectId.</param>
        /// <param name="apn">apn.</param>
        /// <param name="pid">pid.</param>
        /// <param name="center">center.</param>
        /// <param name="countyfips">countyfips.</param>
        /// <param name="geometry">geometry.</param>
        /// <param name="parcelList">parcelList.</param>
        /// <param name="adjacentParcelBoundary">adjacentParcelBoundary.</param>
        /// <param name="matchedAddress">matchedAddress.</param>
        public ParcelBoundary(string objectId = default(string), string apn = default(string), string pid = default(string), Center center = default(Center), string countyfips = default(string), PropertyInformationGeometry geometry = default(PropertyInformationGeometry), List<Parcel> parcelList = default(List<Parcel>), List<ParcelBoundary> adjacentParcelBoundary = default(List<ParcelBoundary>), MatchedAddress matchedAddress = default(MatchedAddress))
        {
            this.ObjectId = objectId;
            this.Apn = apn;
            this.Pid = pid;
            this.Center = center;
            this.Countyfips = countyfips;
            this.Geometry = geometry;
            this.ParcelList = parcelList;
            this.AdjacentParcelBoundary = adjacentParcelBoundary;
            this.MatchedAddress = matchedAddress;
        }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets Apn
        /// </summary>
        [DataMember(Name="apn", EmitDefaultValue=false)]
        public string Apn { get; set; }

        /// <summary>
        /// Gets or Sets Pid
        /// </summary>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public string Pid { get; set; }

        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Center Center { get; set; }

        /// <summary>
        /// Gets or Sets Countyfips
        /// </summary>
        [DataMember(Name="countyfips", EmitDefaultValue=false)]
        public string Countyfips { get; set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name="geometry", EmitDefaultValue=false)]
        public PropertyInformationGeometry Geometry { get; set; }

        /// <summary>
        /// Gets or Sets ParcelList
        /// </summary>
        [DataMember(Name="parcelList", EmitDefaultValue=false)]
        public List<Parcel> ParcelList { get; set; }

        /// <summary>
        /// Gets or Sets AdjacentParcelBoundary
        /// </summary>
        [DataMember(Name="adjacentParcelBoundary", EmitDefaultValue=false)]
        public List<ParcelBoundary> AdjacentParcelBoundary { get; set; }

        /// <summary>
        /// Gets or Sets MatchedAddress
        /// </summary>
        [DataMember(Name="matchedAddress", EmitDefaultValue=false)]
        public MatchedAddress MatchedAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelBoundary {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Apn: ").Append(Apn).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Countyfips: ").Append(Countyfips).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  ParcelList: ").Append(ParcelList).Append("\n");
            sb.Append("  AdjacentParcelBoundary: ").Append(AdjacentParcelBoundary).Append("\n");
            sb.Append("  MatchedAddress: ").Append(MatchedAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelBoundary);
        }

        /// <summary>
        /// Returns true if ParcelBoundary instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelBoundary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelBoundary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Apn == input.Apn ||
                    (this.Apn != null &&
                    this.Apn.Equals(input.Apn))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.Countyfips == input.Countyfips ||
                    (this.Countyfips != null &&
                    this.Countyfips.Equals(input.Countyfips))
                ) && 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                ) && 
                (
                    this.ParcelList == input.ParcelList ||
                    this.ParcelList != null &&
                    input.ParcelList != null &&
                    this.ParcelList.SequenceEqual(input.ParcelList)
                ) && 
                (
                    this.AdjacentParcelBoundary == input.AdjacentParcelBoundary ||
                    this.AdjacentParcelBoundary != null &&
                    input.AdjacentParcelBoundary != null &&
                    this.AdjacentParcelBoundary.SequenceEqual(input.AdjacentParcelBoundary)
                ) && 
                (
                    this.MatchedAddress == input.MatchedAddress ||
                    (this.MatchedAddress != null &&
                    this.MatchedAddress.Equals(input.MatchedAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Apn != null)
                    hashCode = hashCode * 59 + this.Apn.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.Countyfips != null)
                    hashCode = hashCode * 59 + this.Countyfips.GetHashCode();
                if (this.Geometry != null)
                    hashCode = hashCode * 59 + this.Geometry.GetHashCode();
                if (this.ParcelList != null)
                    hashCode = hashCode * 59 + this.ParcelList.GetHashCode();
                if (this.AdjacentParcelBoundary != null)
                    hashCode = hashCode * 59 + this.AdjacentParcelBoundary.GetHashCode();
                if (this.MatchedAddress != null)
                    hashCode = hashCode * 59 + this.MatchedAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
