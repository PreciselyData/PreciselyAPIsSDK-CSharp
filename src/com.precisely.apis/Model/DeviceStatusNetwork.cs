/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 12.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// DeviceStatusNetwork
    /// </summary>
    [DataContract]
    public partial class DeviceStatusNetwork :  IEquatable<DeviceStatusNetwork>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceStatusNetwork" /> class.
        /// </summary>
        /// <param name="carrier">carrier.</param>
        /// <param name="callType">callType.</param>
        /// <param name="locAccuracySupport">locAccuracySupport.</param>
        /// <param name="nationalNumber">nationalNumber.</param>
        /// <param name="country">country.</param>
        public DeviceStatusNetwork(string carrier = default(string), string callType = default(string), string locAccuracySupport = default(string), string nationalNumber = default(string), GeoLocationFixedLineCountry country = default(GeoLocationFixedLineCountry))
        {
            this.Carrier = carrier;
            this.CallType = callType;
            this.LocAccuracySupport = locAccuracySupport;
            this.NationalNumber = nationalNumber;
            this.Country = country;
        }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets CallType
        /// </summary>
        [DataMember(Name="callType", EmitDefaultValue=false)]
        public string CallType { get; set; }

        /// <summary>
        /// Gets or Sets LocAccuracySupport
        /// </summary>
        [DataMember(Name="locAccuracySupport", EmitDefaultValue=false)]
        public string LocAccuracySupport { get; set; }

        /// <summary>
        /// Gets or Sets NationalNumber
        /// </summary>
        [DataMember(Name="nationalNumber", EmitDefaultValue=false)]
        public string NationalNumber { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public GeoLocationFixedLineCountry Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceStatusNetwork {\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CallType: ").Append(CallType).Append("\n");
            sb.Append("  LocAccuracySupport: ").Append(LocAccuracySupport).Append("\n");
            sb.Append("  NationalNumber: ").Append(NationalNumber).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceStatusNetwork);
        }

        /// <summary>
        /// Returns true if DeviceStatusNetwork instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceStatusNetwork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceStatusNetwork input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.CallType == input.CallType ||
                    (this.CallType != null &&
                    this.CallType.Equals(input.CallType))
                ) && 
                (
                    this.LocAccuracySupport == input.LocAccuracySupport ||
                    (this.LocAccuracySupport != null &&
                    this.LocAccuracySupport.Equals(input.LocAccuracySupport))
                ) && 
                (
                    this.NationalNumber == input.NationalNumber ||
                    (this.NationalNumber != null &&
                    this.NationalNumber.Equals(input.NationalNumber))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.CallType != null)
                    hashCode = hashCode * 59 + this.CallType.GetHashCode();
                if (this.LocAccuracySupport != null)
                    hashCode = hashCode * 59 + this.LocAccuracySupport.GetHashCode();
                if (this.NationalNumber != null)
                    hashCode = hashCode * 59 + this.NationalNumber.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
