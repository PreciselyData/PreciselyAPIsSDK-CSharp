/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// SeverityGroup
    /// </summary>
    [DataContract]
    public partial class SeverityGroup :  IEquatable<SeverityGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeverityGroup" /> class.
        /// </summary>
        /// <param name="intensity">intensity.</param>
        /// <param name="crownFire">crownFire.</param>
        /// <param name="windSpd">windSpd.</param>
        /// <param name="emberCast">emberCast.</param>
        public SeverityGroup(int intensity = default(int), int crownFire = default(int), int windSpd = default(int), int emberCast = default(int))
        {
            this.Intensity = intensity;
            this.CrownFire = crownFire;
            this.WindSpd = windSpd;
            this.EmberCast = emberCast;
        }

        /// <summary>
        /// Gets or Sets Intensity
        /// </summary>
        [DataMember(Name="intensity", EmitDefaultValue=false)]
        public int Intensity { get; set; }

        /// <summary>
        /// Gets or Sets CrownFire
        /// </summary>
        [DataMember(Name="crownFire", EmitDefaultValue=false)]
        public int CrownFire { get; set; }

        /// <summary>
        /// Gets or Sets WindSpd
        /// </summary>
        [DataMember(Name="windSpd", EmitDefaultValue=false)]
        public int WindSpd { get; set; }

        /// <summary>
        /// Gets or Sets EmberCast
        /// </summary>
        [DataMember(Name="emberCast", EmitDefaultValue=false)]
        public int EmberCast { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeverityGroup {\n");
            sb.Append("  Intensity: ").Append(Intensity).Append("\n");
            sb.Append("  CrownFire: ").Append(CrownFire).Append("\n");
            sb.Append("  WindSpd: ").Append(WindSpd).Append("\n");
            sb.Append("  EmberCast: ").Append(EmberCast).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeverityGroup);
        }

        /// <summary>
        /// Returns true if SeverityGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of SeverityGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeverityGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Intensity == input.Intensity ||
                    (this.Intensity != null &&
                    this.Intensity.Equals(input.Intensity))
                ) && 
                (
                    this.CrownFire == input.CrownFire ||
                    (this.CrownFire != null &&
                    this.CrownFire.Equals(input.CrownFire))
                ) && 
                (
                    this.WindSpd == input.WindSpd ||
                    (this.WindSpd != null &&
                    this.WindSpd.Equals(input.WindSpd))
                ) && 
                (
                    this.EmberCast == input.EmberCast ||
                    (this.EmberCast != null &&
                    this.EmberCast.Equals(input.EmberCast))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Intensity != null)
                    hashCode = hashCode * 59 + this.Intensity.GetHashCode();
                if (this.CrownFire != null)
                    hashCode = hashCode * 59 + this.CrownFire.GetHashCode();
                if (this.WindSpd != null)
                    hashCode = hashCode * 59 + this.WindSpd.GetHashCode();
                if (this.EmberCast != null)
                    hashCode = hashCode * 59 + this.EmberCast.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
