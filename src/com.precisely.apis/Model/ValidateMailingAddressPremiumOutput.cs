/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressPremiumOutput
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressPremiumOutput :  IEquatable<ValidateMailingAddressPremiumOutput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressPremiumOutput" /> class.
        /// </summary>
        /// <param name="UserFields">These fields are returned, unmodified, in the user_fields section of the response..</param>
        /// <param name="Status">Reports the success or failure of the match attempt..</param>
        /// <param name="StatusCode">Reason for failure, if there is one..</param>
        /// <param name="StatusDescription">Description of the problem, if there is one..</param>
        /// <param name="Confidence">The level of confidence assigned to the address being returned..</param>
        /// <param name="RecordType">Type of address record..</param>
        /// <param name="RecordTypeDefault">Code indicating the default match..</param>
        /// <param name="MultipleMatches">Indicates which address component had multiple matches..</param>
        /// <param name="CouldNotValidate">Mentions the address component that could not be validated, in case no match is found..</param>
        /// <param name="CountryLevel">The category of address matching available..</param>
        /// <param name="AddressFormat">The type of address data being returned..</param>
        /// <param name="AddressLine1">The first line of the validated address..</param>
        /// <param name="AddressLine2">The second line of the validated address..</param>
        /// <param name="AddressLine3">The third line of the validated address..</param>
        /// <param name="AddressLine4">The fourth line of the validated address..</param>
        /// <param name="City">The validated city name..</param>
        /// <param name="StateProvince">The validated state or province abbreviation..</param>
        /// <param name="PostalCode">The validated ZIP Code or postal code..</param>
        /// <param name="PostalCodeBase">The 5-digit ZIP Code..</param>
        /// <param name="PostalCodeAddOn">The 4-digit add-on part of the ZIP Code..</param>
        /// <param name="Country">The country in the format determined by what you selected..</param>
        /// <param name="AdditionalInputData">Input data that could not be matched to a particular address component..</param>
        /// <param name="FirmName">The validated firm or company name..</param>
        /// <param name="HouseNumber">House number..</param>
        /// <param name="LeadingDirectional">Leading directional..</param>
        /// <param name="StreetName">Street name..</param>
        /// <param name="StreetSuffix">Street suffix..</param>
        /// <param name="TrailingDirectional">Trailing directional..</param>
        /// <param name="ApartmentLabel">Apartment designator (such as STE or APT)..</param>
        /// <param name="ApartmentNumber">Apartment number..</param>
        /// <param name="ApartmentLabel2">Secondary apartment designator..</param>
        /// <param name="ApartmentNumber2">Secondary apartment number..</param>
        /// <param name="RRHC">Rural Route/Highway Contract indicator..</param>
        /// <param name="POBox">Post office box number..</param>
        /// <param name="PrivateMailbox">Private mailbox indicator..</param>
        /// <param name="PrivateMailboxType">The type of private mailbox..</param>
        /// <param name="HouseNumberInput">House number..</param>
        /// <param name="LeadingDirectionalInput">Leading directional..</param>
        /// <param name="StreetNameInput">Street name..</param>
        /// <param name="StreetSuffixInput">Street suffix..</param>
        /// <param name="TrailingDirectionalInput">Trailing directional..</param>
        /// <param name="ApartmentLabelInput">Apartment designator (such as STE or APT)..</param>
        /// <param name="ApartmentNumberInput">Apartment number..</param>
        /// <param name="RRHCInput">Rural Route/Highway Contract indicator..</param>
        /// <param name="POBoxInput">Post office box number..</param>
        /// <param name="PrivateMailboxInput">Private mailbox indicator..</param>
        /// <param name="PrivateMailboxTypeInput">The type of private mailbox..</param>
        /// <param name="CityInput">Validated city name..</param>
        /// <param name="StateProvinceInput">Validated state or province name..</param>
        /// <param name="PostalCodeInput">Validated postal code..</param>
        /// <param name="CountryInput">Country. Format is determined by what you selected in OutputCountryFormat..</param>
        /// <param name="FirmNameInput">The validated firm or company name..</param>
        /// <param name="HouseNumberResult">The field-level result indicator for HouseNumber..</param>
        /// <param name="LeadingDirectionalResult">The field-level result indicator for LeadingDirectional..</param>
        /// <param name="StreetResult">The field-level result indicator for Street..</param>
        /// <param name="StreetNameResult">The field-level result indicator for StreetName..</param>
        /// <param name="StreetNameAliasType">The field-level result indicator for StreetName Alias..</param>
        /// <param name="StreetSuffixResult">The field-level result indicator for StreetSuffix..</param>
        /// <param name="TrailingDirectionalResult">The field-level result indicator for TrailingDirectional..</param>
        /// <param name="ApartmentLabelResult">The field-level result indicator for ApartmentLabel..</param>
        /// <param name="ApartmentNumberResult">The field-level result indicator for ApartmentNumber..</param>
        /// <param name="ApartmentLabel2Result">The field-level result indicator for ApartmentLabel2..</param>
        /// <param name="ApartmentNumber2Result">The field-level result indicator for ApartmentNumber2..</param>
        /// <param name="RRHCResult">The field-level result indicator for RRHC..</param>
        /// <param name="RRHCType">The field-level result indicator for RRHC Type..</param>
        /// <param name="POBoxResult">The field-level result indicator for POBox..</param>
        /// <param name="CityResult">The field-level result indicator for City..</param>
        /// <param name="StateProvinceResult">The field-level result indicator for StateProvince..</param>
        /// <param name="PostalCodeResult">The field-level result indicator for PostalCode..</param>
        /// <param name="PostalCodeCityResult">The field-level result indicator for PostalCodeCity..</param>
        /// <param name="AddressRecordResult">The field-level result indicator for AddressRecord..</param>
        /// <param name="PostalCodeSource">The field-level result indicator for PostalCode Source..</param>
        /// <param name="PostalCodeType">Indicates the type of postal code returned..</param>
        /// <param name="CountryResult">The validated firm or company name..</param>
        /// <param name="FirmNameResult">Indicates if the firm name got validated..</param>
        /// <param name="StreetNamePreferredAliasResult">Indicates the result of preferred alias processing..</param>
        /// <param name="StreetNameAbbreviatedAliasResult">Indicates the result of abbreviated alias processing..</param>
        /// <param name="AddressLine5">The fifth line of the validated address..</param>
        /// <param name="AddressQuality">A two character code indicating overall quality of the resulting address..</param>
        /// <param name="Deliverability">An estimate of confidence that an item mailed or shipped to this address would be successfully delivered..</param>
        /// <param name="AddressType">A single letter code that indicates the type of address..</param>
        /// <param name="Locality">A locality is a village in rural areas or it may be a suburb in urban areas..</param>
        /// <param name="ChangeScore">A value of 0 and 100 that reflects how much the address has changed to make it valid..</param>
        /// <param name="Suburb">The validated firm or company name..</param>
        /// <param name="BlockAddress">It is the formatted address, as it would appear on a physical mail piece..</param>
        /// <param name="Latitude">Seven-digit number in degrees, calculated to four decimal places..</param>
        /// <param name="Longitude">Seven-digit number in degrees, calculated to four decimal places..</param>
        public ValidateMailingAddressPremiumOutput(List<ValidateMailingAddressInputRowUserFields> UserFields = null, string Status = null, string StatusCode = null, string StatusDescription = null, string Confidence = null, string RecordType = null, string RecordTypeDefault = null, string MultipleMatches = null, string CouldNotValidate = null, string CountryLevel = null, string AddressFormat = null, string AddressLine1 = null, string AddressLine2 = null, string AddressLine3 = null, string AddressLine4 = null, string City = null, string StateProvince = null, string PostalCode = null, string PostalCodeBase = null, string PostalCodeAddOn = null, string Country = null, string AdditionalInputData = null, string FirmName = null, string HouseNumber = null, string LeadingDirectional = null, string StreetName = null, string StreetSuffix = null, string TrailingDirectional = null, string ApartmentLabel = null, string ApartmentNumber = null, string ApartmentLabel2 = null, string ApartmentNumber2 = null, string RRHC = null, string POBox = null, string PrivateMailbox = null, string PrivateMailboxType = null, string HouseNumberInput = null, string LeadingDirectionalInput = null, string StreetNameInput = null, string StreetSuffixInput = null, string TrailingDirectionalInput = null, string ApartmentLabelInput = null, string ApartmentNumberInput = null, string RRHCInput = null, string POBoxInput = null, string PrivateMailboxInput = null, string PrivateMailboxTypeInput = null, string CityInput = null, string StateProvinceInput = null, string PostalCodeInput = null, string CountryInput = null, string FirmNameInput = null, string HouseNumberResult = null, string LeadingDirectionalResult = null, string StreetResult = null, string StreetNameResult = null, string StreetNameAliasType = null, string StreetSuffixResult = null, string TrailingDirectionalResult = null, string ApartmentLabelResult = null, string ApartmentNumberResult = null, string ApartmentLabel2Result = null, string ApartmentNumber2Result = null, string RRHCResult = null, string RRHCType = null, string POBoxResult = null, string CityResult = null, string StateProvinceResult = null, string PostalCodeResult = null, string PostalCodeCityResult = null, string AddressRecordResult = null, string PostalCodeSource = null, string PostalCodeType = null, string CountryResult = null, string FirmNameResult = null, string StreetNamePreferredAliasResult = null, string StreetNameAbbreviatedAliasResult = null, string AddressLine5 = null, string AddressQuality = null, string Deliverability = null, string AddressType = null, string Locality = null, string ChangeScore = null, string Suburb = null, string BlockAddress = null, string Latitude = null, string Longitude = null)
        {
            this.UserFields = UserFields;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.StatusDescription = StatusDescription;
            this.Confidence = Confidence;
            this.RecordType = RecordType;
            this.RecordTypeDefault = RecordTypeDefault;
            this.MultipleMatches = MultipleMatches;
            this.CouldNotValidate = CouldNotValidate;
            this.CountryLevel = CountryLevel;
            this.AddressFormat = AddressFormat;
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.AddressLine3 = AddressLine3;
            this.AddressLine4 = AddressLine4;
            this.City = City;
            this.StateProvince = StateProvince;
            this.PostalCode = PostalCode;
            this.PostalCodeBase = PostalCodeBase;
            this.PostalCodeAddOn = PostalCodeAddOn;
            this.Country = Country;
            this.AdditionalInputData = AdditionalInputData;
            this.FirmName = FirmName;
            this.HouseNumber = HouseNumber;
            this.LeadingDirectional = LeadingDirectional;
            this.StreetName = StreetName;
            this.StreetSuffix = StreetSuffix;
            this.TrailingDirectional = TrailingDirectional;
            this.ApartmentLabel = ApartmentLabel;
            this.ApartmentNumber = ApartmentNumber;
            this.ApartmentLabel2 = ApartmentLabel2;
            this.ApartmentNumber2 = ApartmentNumber2;
            this.RRHC = RRHC;
            this.POBox = POBox;
            this.PrivateMailbox = PrivateMailbox;
            this.PrivateMailboxType = PrivateMailboxType;
            this.HouseNumberInput = HouseNumberInput;
            this.LeadingDirectionalInput = LeadingDirectionalInput;
            this.StreetNameInput = StreetNameInput;
            this.StreetSuffixInput = StreetSuffixInput;
            this.TrailingDirectionalInput = TrailingDirectionalInput;
            this.ApartmentLabelInput = ApartmentLabelInput;
            this.ApartmentNumberInput = ApartmentNumberInput;
            this.RRHCInput = RRHCInput;
            this.POBoxInput = POBoxInput;
            this.PrivateMailboxInput = PrivateMailboxInput;
            this.PrivateMailboxTypeInput = PrivateMailboxTypeInput;
            this.CityInput = CityInput;
            this.StateProvinceInput = StateProvinceInput;
            this.PostalCodeInput = PostalCodeInput;
            this.CountryInput = CountryInput;
            this.FirmNameInput = FirmNameInput;
            this.HouseNumberResult = HouseNumberResult;
            this.LeadingDirectionalResult = LeadingDirectionalResult;
            this.StreetResult = StreetResult;
            this.StreetNameResult = StreetNameResult;
            this.StreetNameAliasType = StreetNameAliasType;
            this.StreetSuffixResult = StreetSuffixResult;
            this.TrailingDirectionalResult = TrailingDirectionalResult;
            this.ApartmentLabelResult = ApartmentLabelResult;
            this.ApartmentNumberResult = ApartmentNumberResult;
            this.ApartmentLabel2Result = ApartmentLabel2Result;
            this.ApartmentNumber2Result = ApartmentNumber2Result;
            this.RRHCResult = RRHCResult;
            this.RRHCType = RRHCType;
            this.POBoxResult = POBoxResult;
            this.CityResult = CityResult;
            this.StateProvinceResult = StateProvinceResult;
            this.PostalCodeResult = PostalCodeResult;
            this.PostalCodeCityResult = PostalCodeCityResult;
            this.AddressRecordResult = AddressRecordResult;
            this.PostalCodeSource = PostalCodeSource;
            this.PostalCodeType = PostalCodeType;
            this.CountryResult = CountryResult;
            this.FirmNameResult = FirmNameResult;
            this.StreetNamePreferredAliasResult = StreetNamePreferredAliasResult;
            this.StreetNameAbbreviatedAliasResult = StreetNameAbbreviatedAliasResult;
            this.AddressLine5 = AddressLine5;
            this.AddressQuality = AddressQuality;
            this.Deliverability = Deliverability;
            this.AddressType = AddressType;
            this.Locality = Locality;
            this.ChangeScore = ChangeScore;
            this.Suburb = Suburb;
            this.BlockAddress = BlockAddress;
            this.Latitude = Latitude;
            this.Longitude = Longitude;
        }
        
        /// <summary>
        /// These fields are returned, unmodified, in the user_fields section of the response.
        /// </summary>
        /// <value>These fields are returned, unmodified, in the user_fields section of the response.</value>
        [DataMember(Name="user_fields", EmitDefaultValue=false)]
        public List<ValidateMailingAddressInputRowUserFields> UserFields { get; set; }
        /// <summary>
        /// Reports the success or failure of the match attempt.
        /// </summary>
        /// <value>Reports the success or failure of the match attempt.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Reason for failure, if there is one.
        /// </summary>
        /// <value>Reason for failure, if there is one.</value>
        [DataMember(Name="Status.Code", EmitDefaultValue=false)]
        public string StatusCode { get; set; }
        /// <summary>
        /// Description of the problem, if there is one.
        /// </summary>
        /// <value>Description of the problem, if there is one.</value>
        [DataMember(Name="Status.Description", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }
        /// <summary>
        /// The level of confidence assigned to the address being returned.
        /// </summary>
        /// <value>The level of confidence assigned to the address being returned.</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }
        /// <summary>
        /// Type of address record.
        /// </summary>
        /// <value>Type of address record.</value>
        [DataMember(Name="RecordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }
        /// <summary>
        /// Code indicating the default match.
        /// </summary>
        /// <value>Code indicating the default match.</value>
        [DataMember(Name="RecordType.Default", EmitDefaultValue=false)]
        public string RecordTypeDefault { get; set; }
        /// <summary>
        /// Indicates which address component had multiple matches.
        /// </summary>
        /// <value>Indicates which address component had multiple matches.</value>
        [DataMember(Name="MultipleMatches", EmitDefaultValue=false)]
        public string MultipleMatches { get; set; }
        /// <summary>
        /// Mentions the address component that could not be validated, in case no match is found.
        /// </summary>
        /// <value>Mentions the address component that could not be validated, in case no match is found.</value>
        [DataMember(Name="CouldNotValidate", EmitDefaultValue=false)]
        public string CouldNotValidate { get; set; }
        /// <summary>
        /// The category of address matching available.
        /// </summary>
        /// <value>The category of address matching available.</value>
        [DataMember(Name="CountryLevel", EmitDefaultValue=false)]
        public string CountryLevel { get; set; }
        /// <summary>
        /// The type of address data being returned.
        /// </summary>
        /// <value>The type of address data being returned.</value>
        [DataMember(Name="AddressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }
        /// <summary>
        /// The first line of the validated address.
        /// </summary>
        /// <value>The first line of the validated address.</value>
        [DataMember(Name="AddressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the validated address.
        /// </summary>
        /// <value>The second line of the validated address.</value>
        [DataMember(Name="AddressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The third line of the validated address.
        /// </summary>
        /// <value>The third line of the validated address.</value>
        [DataMember(Name="AddressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }
        /// <summary>
        /// The fourth line of the validated address.
        /// </summary>
        /// <value>The fourth line of the validated address.</value>
        [DataMember(Name="AddressLine4", EmitDefaultValue=false)]
        public string AddressLine4 { get; set; }
        /// <summary>
        /// The validated city name.
        /// </summary>
        /// <value>The validated city name.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The validated state or province abbreviation.
        /// </summary>
        /// <value>The validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }
        /// <summary>
        /// The validated ZIP Code or postal code.
        /// </summary>
        /// <value>The validated ZIP Code or postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The 5-digit ZIP Code.
        /// </summary>
        /// <value>The 5-digit ZIP Code.</value>
        [DataMember(Name="PostalCode.Base", EmitDefaultValue=false)]
        public string PostalCodeBase { get; set; }
        /// <summary>
        /// The 4-digit add-on part of the ZIP Code.
        /// </summary>
        /// <value>The 4-digit add-on part of the ZIP Code.</value>
        [DataMember(Name="PostalCode.AddOn", EmitDefaultValue=false)]
        public string PostalCodeAddOn { get; set; }
        /// <summary>
        /// The country in the format determined by what you selected.
        /// </summary>
        /// <value>The country in the format determined by what you selected.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Input data that could not be matched to a particular address component.
        /// </summary>
        /// <value>Input data that could not be matched to a particular address component.</value>
        [DataMember(Name="AdditionalInputData", EmitDefaultValue=false)]
        public string AdditionalInputData { get; set; }
        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="FirmName", EmitDefaultValue=false)]
        public string FirmName { get; set; }
        /// <summary>
        /// House number.
        /// </summary>
        /// <value>House number.</value>
        [DataMember(Name="HouseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }
        /// <summary>
        /// Leading directional.
        /// </summary>
        /// <value>Leading directional.</value>
        [DataMember(Name="LeadingDirectional", EmitDefaultValue=false)]
        public string LeadingDirectional { get; set; }
        /// <summary>
        /// Street name.
        /// </summary>
        /// <value>Street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }
        /// <summary>
        /// Street suffix.
        /// </summary>
        /// <value>Street suffix.</value>
        [DataMember(Name="StreetSuffix", EmitDefaultValue=false)]
        public string StreetSuffix { get; set; }
        /// <summary>
        /// Trailing directional.
        /// </summary>
        /// <value>Trailing directional.</value>
        [DataMember(Name="TrailingDirectional", EmitDefaultValue=false)]
        public string TrailingDirectional { get; set; }
        /// <summary>
        /// Apartment designator (such as STE or APT).
        /// </summary>
        /// <value>Apartment designator (such as STE or APT).</value>
        [DataMember(Name="ApartmentLabel", EmitDefaultValue=false)]
        public string ApartmentLabel { get; set; }
        /// <summary>
        /// Apartment number.
        /// </summary>
        /// <value>Apartment number.</value>
        [DataMember(Name="ApartmentNumber", EmitDefaultValue=false)]
        public string ApartmentNumber { get; set; }
        /// <summary>
        /// Secondary apartment designator.
        /// </summary>
        /// <value>Secondary apartment designator.</value>
        [DataMember(Name="ApartmentLabel2", EmitDefaultValue=false)]
        public string ApartmentLabel2 { get; set; }
        /// <summary>
        /// Secondary apartment number.
        /// </summary>
        /// <value>Secondary apartment number.</value>
        [DataMember(Name="ApartmentNumber2", EmitDefaultValue=false)]
        public string ApartmentNumber2 { get; set; }
        /// <summary>
        /// Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC", EmitDefaultValue=false)]
        public string RRHC { get; set; }
        /// <summary>
        /// Post office box number.
        /// </summary>
        /// <value>Post office box number.</value>
        [DataMember(Name="POBox", EmitDefaultValue=false)]
        public string POBox { get; set; }
        /// <summary>
        /// Private mailbox indicator.
        /// </summary>
        /// <value>Private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox", EmitDefaultValue=false)]
        public string PrivateMailbox { get; set; }
        /// <summary>
        /// The type of private mailbox.
        /// </summary>
        /// <value>The type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type", EmitDefaultValue=false)]
        public string PrivateMailboxType { get; set; }
        /// <summary>
        /// House number.
        /// </summary>
        /// <value>House number.</value>
        [DataMember(Name="HouseNumber.Input", EmitDefaultValue=false)]
        public string HouseNumberInput { get; set; }
        /// <summary>
        /// Leading directional.
        /// </summary>
        /// <value>Leading directional.</value>
        [DataMember(Name="LeadingDirectional.Input", EmitDefaultValue=false)]
        public string LeadingDirectionalInput { get; set; }
        /// <summary>
        /// Street name.
        /// </summary>
        /// <value>Street name.</value>
        [DataMember(Name="StreetName.Input", EmitDefaultValue=false)]
        public string StreetNameInput { get; set; }
        /// <summary>
        /// Street suffix.
        /// </summary>
        /// <value>Street suffix.</value>
        [DataMember(Name="StreetSuffix.Input", EmitDefaultValue=false)]
        public string StreetSuffixInput { get; set; }
        /// <summary>
        /// Trailing directional.
        /// </summary>
        /// <value>Trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Input", EmitDefaultValue=false)]
        public string TrailingDirectionalInput { get; set; }
        /// <summary>
        /// Apartment designator (such as STE or APT).
        /// </summary>
        /// <value>Apartment designator (such as STE or APT).</value>
        [DataMember(Name="ApartmentLabel.Input", EmitDefaultValue=false)]
        public string ApartmentLabelInput { get; set; }
        /// <summary>
        /// Apartment number.
        /// </summary>
        /// <value>Apartment number.</value>
        [DataMember(Name="ApartmentNumber.Input", EmitDefaultValue=false)]
        public string ApartmentNumberInput { get; set; }
        /// <summary>
        /// Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Input", EmitDefaultValue=false)]
        public string RRHCInput { get; set; }
        /// <summary>
        /// Post office box number.
        /// </summary>
        /// <value>Post office box number.</value>
        [DataMember(Name="POBox.Input", EmitDefaultValue=false)]
        public string POBoxInput { get; set; }
        /// <summary>
        /// Private mailbox indicator.
        /// </summary>
        /// <value>Private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox.Input", EmitDefaultValue=false)]
        public string PrivateMailboxInput { get; set; }
        /// <summary>
        /// The type of private mailbox.
        /// </summary>
        /// <value>The type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type.Input", EmitDefaultValue=false)]
        public string PrivateMailboxTypeInput { get; set; }
        /// <summary>
        /// Validated city name.
        /// </summary>
        /// <value>Validated city name.</value>
        [DataMember(Name="City.Input", EmitDefaultValue=false)]
        public string CityInput { get; set; }
        /// <summary>
        /// Validated state or province name.
        /// </summary>
        /// <value>Validated state or province name.</value>
        [DataMember(Name="StateProvince.Input", EmitDefaultValue=false)]
        public string StateProvinceInput { get; set; }
        /// <summary>
        /// Validated postal code.
        /// </summary>
        /// <value>Validated postal code.</value>
        [DataMember(Name="PostalCode.Input", EmitDefaultValue=false)]
        public string PostalCodeInput { get; set; }
        /// <summary>
        /// Country. Format is determined by what you selected in OutputCountryFormat.
        /// </summary>
        /// <value>Country. Format is determined by what you selected in OutputCountryFormat.</value>
        [DataMember(Name="Country.Input", EmitDefaultValue=false)]
        public string CountryInput { get; set; }
        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="FirmName.Input", EmitDefaultValue=false)]
        public string FirmNameInput { get; set; }
        /// <summary>
        /// The field-level result indicator for HouseNumber.
        /// </summary>
        /// <value>The field-level result indicator for HouseNumber.</value>
        [DataMember(Name="HouseNumber.Result", EmitDefaultValue=false)]
        public string HouseNumberResult { get; set; }
        /// <summary>
        /// The field-level result indicator for LeadingDirectional.
        /// </summary>
        /// <value>The field-level result indicator for LeadingDirectional.</value>
        [DataMember(Name="LeadingDirectional.Result", EmitDefaultValue=false)]
        public string LeadingDirectionalResult { get; set; }
        /// <summary>
        /// The field-level result indicator for Street.
        /// </summary>
        /// <value>The field-level result indicator for Street.</value>
        [DataMember(Name="Street.Result", EmitDefaultValue=false)]
        public string StreetResult { get; set; }
        /// <summary>
        /// The field-level result indicator for StreetName.
        /// </summary>
        /// <value>The field-level result indicator for StreetName.</value>
        [DataMember(Name="StreetName.Result", EmitDefaultValue=false)]
        public string StreetNameResult { get; set; }
        /// <summary>
        /// The field-level result indicator for StreetName Alias.
        /// </summary>
        /// <value>The field-level result indicator for StreetName Alias.</value>
        [DataMember(Name="StreetName.Alias.Type", EmitDefaultValue=false)]
        public string StreetNameAliasType { get; set; }
        /// <summary>
        /// The field-level result indicator for StreetSuffix.
        /// </summary>
        /// <value>The field-level result indicator for StreetSuffix.</value>
        [DataMember(Name="StreetSuffix.Result", EmitDefaultValue=false)]
        public string StreetSuffixResult { get; set; }
        /// <summary>
        /// The field-level result indicator for TrailingDirectional.
        /// </summary>
        /// <value>The field-level result indicator for TrailingDirectional.</value>
        [DataMember(Name="TrailingDirectional.Result", EmitDefaultValue=false)]
        public string TrailingDirectionalResult { get; set; }
        /// <summary>
        /// The field-level result indicator for ApartmentLabel.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentLabel.</value>
        [DataMember(Name="ApartmentLabel.Result", EmitDefaultValue=false)]
        public string ApartmentLabelResult { get; set; }
        /// <summary>
        /// The field-level result indicator for ApartmentNumber.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentNumber.</value>
        [DataMember(Name="ApartmentNumber.Result", EmitDefaultValue=false)]
        public string ApartmentNumberResult { get; set; }
        /// <summary>
        /// The field-level result indicator for ApartmentLabel2.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentLabel2.</value>
        [DataMember(Name="ApartmentLabel2.Result", EmitDefaultValue=false)]
        public string ApartmentLabel2Result { get; set; }
        /// <summary>
        /// The field-level result indicator for ApartmentNumber2.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentNumber2.</value>
        [DataMember(Name="ApartmentNumber2.Result", EmitDefaultValue=false)]
        public string ApartmentNumber2Result { get; set; }
        /// <summary>
        /// The field-level result indicator for RRHC.
        /// </summary>
        /// <value>The field-level result indicator for RRHC.</value>
        [DataMember(Name="RRHC.Result", EmitDefaultValue=false)]
        public string RRHCResult { get; set; }
        /// <summary>
        /// The field-level result indicator for RRHC Type.
        /// </summary>
        /// <value>The field-level result indicator for RRHC Type.</value>
        [DataMember(Name="RRHC.Type", EmitDefaultValue=false)]
        public string RRHCType { get; set; }
        /// <summary>
        /// The field-level result indicator for POBox.
        /// </summary>
        /// <value>The field-level result indicator for POBox.</value>
        [DataMember(Name="POBox.Result", EmitDefaultValue=false)]
        public string POBoxResult { get; set; }
        /// <summary>
        /// The field-level result indicator for City.
        /// </summary>
        /// <value>The field-level result indicator for City.</value>
        [DataMember(Name="City.Result", EmitDefaultValue=false)]
        public string CityResult { get; set; }
        /// <summary>
        /// The field-level result indicator for StateProvince.
        /// </summary>
        /// <value>The field-level result indicator for StateProvince.</value>
        [DataMember(Name="StateProvince.Result", EmitDefaultValue=false)]
        public string StateProvinceResult { get; set; }
        /// <summary>
        /// The field-level result indicator for PostalCode.
        /// </summary>
        /// <value>The field-level result indicator for PostalCode.</value>
        [DataMember(Name="PostalCode.Result", EmitDefaultValue=false)]
        public string PostalCodeResult { get; set; }
        /// <summary>
        /// The field-level result indicator for PostalCodeCity.
        /// </summary>
        /// <value>The field-level result indicator for PostalCodeCity.</value>
        [DataMember(Name="PostalCodeCity.Result", EmitDefaultValue=false)]
        public string PostalCodeCityResult { get; set; }
        /// <summary>
        /// The field-level result indicator for AddressRecord.
        /// </summary>
        /// <value>The field-level result indicator for AddressRecord.</value>
        [DataMember(Name="AddressRecord.Result", EmitDefaultValue=false)]
        public string AddressRecordResult { get; set; }
        /// <summary>
        /// The field-level result indicator for PostalCode Source.
        /// </summary>
        /// <value>The field-level result indicator for PostalCode Source.</value>
        [DataMember(Name="PostalCode.Source", EmitDefaultValue=false)]
        public string PostalCodeSource { get; set; }
        /// <summary>
        /// Indicates the type of postal code returned.
        /// </summary>
        /// <value>Indicates the type of postal code returned.</value>
        [DataMember(Name="PostalCode.Type", EmitDefaultValue=false)]
        public string PostalCodeType { get; set; }
        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="Country.Result", EmitDefaultValue=false)]
        public string CountryResult { get; set; }
        /// <summary>
        /// Indicates if the firm name got validated.
        /// </summary>
        /// <value>Indicates if the firm name got validated.</value>
        [DataMember(Name="FirmName.Result", EmitDefaultValue=false)]
        public string FirmNameResult { get; set; }
        /// <summary>
        /// Indicates the result of preferred alias processing.
        /// </summary>
        /// <value>Indicates the result of preferred alias processing.</value>
        [DataMember(Name="StreetNamePreferredAlias.Result", EmitDefaultValue=false)]
        public string StreetNamePreferredAliasResult { get; set; }
        /// <summary>
        /// Indicates the result of abbreviated alias processing.
        /// </summary>
        /// <value>Indicates the result of abbreviated alias processing.</value>
        [DataMember(Name="StreetNameAbbreviatedAlias.Result", EmitDefaultValue=false)]
        public string StreetNameAbbreviatedAliasResult { get; set; }
        /// <summary>
        /// The fifth line of the validated address.
        /// </summary>
        /// <value>The fifth line of the validated address.</value>
        [DataMember(Name="AddressLine5", EmitDefaultValue=false)]
        public string AddressLine5 { get; set; }
        /// <summary>
        /// A two character code indicating overall quality of the resulting address.
        /// </summary>
        /// <value>A two character code indicating overall quality of the resulting address.</value>
        [DataMember(Name="AddressQuality", EmitDefaultValue=false)]
        public string AddressQuality { get; set; }
        /// <summary>
        /// An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.
        /// </summary>
        /// <value>An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.</value>
        [DataMember(Name="Deliverability", EmitDefaultValue=false)]
        public string Deliverability { get; set; }
        /// <summary>
        /// A single letter code that indicates the type of address.
        /// </summary>
        /// <value>A single letter code that indicates the type of address.</value>
        [DataMember(Name="AddressType", EmitDefaultValue=false)]
        public string AddressType { get; set; }
        /// <summary>
        /// A locality is a village in rural areas or it may be a suburb in urban areas.
        /// </summary>
        /// <value>A locality is a village in rural areas or it may be a suburb in urban areas.</value>
        [DataMember(Name="Locality", EmitDefaultValue=false)]
        public string Locality { get; set; }
        /// <summary>
        /// A value of 0 and 100 that reflects how much the address has changed to make it valid.
        /// </summary>
        /// <value>A value of 0 and 100 that reflects how much the address has changed to make it valid.</value>
        [DataMember(Name="ChangeScore", EmitDefaultValue=false)]
        public string ChangeScore { get; set; }
        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="Suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }
        /// <summary>
        /// It is the formatted address, as it would appear on a physical mail piece.
        /// </summary>
        /// <value>It is the formatted address, as it would appear on a physical mail piece.</value>
        [DataMember(Name="BlockAddress", EmitDefaultValue=false)]
        public string BlockAddress { get; set; }
        /// <summary>
        /// Seven-digit number in degrees, calculated to four decimal places.
        /// </summary>
        /// <value>Seven-digit number in degrees, calculated to four decimal places.</value>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }
        /// <summary>
        /// Seven-digit number in degrees, calculated to four decimal places.
        /// </summary>
        /// <value>Seven-digit number in degrees, calculated to four decimal places.</value>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressPremiumOutput {\n");
            sb.Append("  UserFields: ").Append(UserFields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  RecordTypeDefault: ").Append(RecordTypeDefault).Append("\n");
            sb.Append("  MultipleMatches: ").Append(MultipleMatches).Append("\n");
            sb.Append("  CouldNotValidate: ").Append(CouldNotValidate).Append("\n");
            sb.Append("  CountryLevel: ").Append(CountryLevel).Append("\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PostalCodeBase: ").Append(PostalCodeBase).Append("\n");
            sb.Append("  PostalCodeAddOn: ").Append(PostalCodeAddOn).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AdditionalInputData: ").Append(AdditionalInputData).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  LeadingDirectional: ").Append(LeadingDirectional).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  TrailingDirectional: ").Append(TrailingDirectional).Append("\n");
            sb.Append("  ApartmentLabel: ").Append(ApartmentLabel).Append("\n");
            sb.Append("  ApartmentNumber: ").Append(ApartmentNumber).Append("\n");
            sb.Append("  ApartmentLabel2: ").Append(ApartmentLabel2).Append("\n");
            sb.Append("  ApartmentNumber2: ").Append(ApartmentNumber2).Append("\n");
            sb.Append("  RRHC: ").Append(RRHC).Append("\n");
            sb.Append("  POBox: ").Append(POBox).Append("\n");
            sb.Append("  PrivateMailbox: ").Append(PrivateMailbox).Append("\n");
            sb.Append("  PrivateMailboxType: ").Append(PrivateMailboxType).Append("\n");
            sb.Append("  HouseNumberInput: ").Append(HouseNumberInput).Append("\n");
            sb.Append("  LeadingDirectionalInput: ").Append(LeadingDirectionalInput).Append("\n");
            sb.Append("  StreetNameInput: ").Append(StreetNameInput).Append("\n");
            sb.Append("  StreetSuffixInput: ").Append(StreetSuffixInput).Append("\n");
            sb.Append("  TrailingDirectionalInput: ").Append(TrailingDirectionalInput).Append("\n");
            sb.Append("  ApartmentLabelInput: ").Append(ApartmentLabelInput).Append("\n");
            sb.Append("  ApartmentNumberInput: ").Append(ApartmentNumberInput).Append("\n");
            sb.Append("  RRHCInput: ").Append(RRHCInput).Append("\n");
            sb.Append("  POBoxInput: ").Append(POBoxInput).Append("\n");
            sb.Append("  PrivateMailboxInput: ").Append(PrivateMailboxInput).Append("\n");
            sb.Append("  PrivateMailboxTypeInput: ").Append(PrivateMailboxTypeInput).Append("\n");
            sb.Append("  CityInput: ").Append(CityInput).Append("\n");
            sb.Append("  StateProvinceInput: ").Append(StateProvinceInput).Append("\n");
            sb.Append("  PostalCodeInput: ").Append(PostalCodeInput).Append("\n");
            sb.Append("  CountryInput: ").Append(CountryInput).Append("\n");
            sb.Append("  FirmNameInput: ").Append(FirmNameInput).Append("\n");
            sb.Append("  HouseNumberResult: ").Append(HouseNumberResult).Append("\n");
            sb.Append("  LeadingDirectionalResult: ").Append(LeadingDirectionalResult).Append("\n");
            sb.Append("  StreetResult: ").Append(StreetResult).Append("\n");
            sb.Append("  StreetNameResult: ").Append(StreetNameResult).Append("\n");
            sb.Append("  StreetNameAliasType: ").Append(StreetNameAliasType).Append("\n");
            sb.Append("  StreetSuffixResult: ").Append(StreetSuffixResult).Append("\n");
            sb.Append("  TrailingDirectionalResult: ").Append(TrailingDirectionalResult).Append("\n");
            sb.Append("  ApartmentLabelResult: ").Append(ApartmentLabelResult).Append("\n");
            sb.Append("  ApartmentNumberResult: ").Append(ApartmentNumberResult).Append("\n");
            sb.Append("  ApartmentLabel2Result: ").Append(ApartmentLabel2Result).Append("\n");
            sb.Append("  ApartmentNumber2Result: ").Append(ApartmentNumber2Result).Append("\n");
            sb.Append("  RRHCResult: ").Append(RRHCResult).Append("\n");
            sb.Append("  RRHCType: ").Append(RRHCType).Append("\n");
            sb.Append("  POBoxResult: ").Append(POBoxResult).Append("\n");
            sb.Append("  CityResult: ").Append(CityResult).Append("\n");
            sb.Append("  StateProvinceResult: ").Append(StateProvinceResult).Append("\n");
            sb.Append("  PostalCodeResult: ").Append(PostalCodeResult).Append("\n");
            sb.Append("  PostalCodeCityResult: ").Append(PostalCodeCityResult).Append("\n");
            sb.Append("  AddressRecordResult: ").Append(AddressRecordResult).Append("\n");
            sb.Append("  PostalCodeSource: ").Append(PostalCodeSource).Append("\n");
            sb.Append("  PostalCodeType: ").Append(PostalCodeType).Append("\n");
            sb.Append("  CountryResult: ").Append(CountryResult).Append("\n");
            sb.Append("  FirmNameResult: ").Append(FirmNameResult).Append("\n");
            sb.Append("  StreetNamePreferredAliasResult: ").Append(StreetNamePreferredAliasResult).Append("\n");
            sb.Append("  StreetNameAbbreviatedAliasResult: ").Append(StreetNameAbbreviatedAliasResult).Append("\n");
            sb.Append("  AddressLine5: ").Append(AddressLine5).Append("\n");
            sb.Append("  AddressQuality: ").Append(AddressQuality).Append("\n");
            sb.Append("  Deliverability: ").Append(Deliverability).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  ChangeScore: ").Append(ChangeScore).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  BlockAddress: ").Append(BlockAddress).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ValidateMailingAddressPremiumOutput);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressPremiumOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidateMailingAddressPremiumOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressPremiumOutput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserFields == other.UserFields ||
                    this.UserFields != null &&
                    this.UserFields.SequenceEqual(other.UserFields)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.StatusDescription == other.StatusDescription ||
                    this.StatusDescription != null &&
                    this.StatusDescription.Equals(other.StatusDescription)
                ) && 
                (
                    this.Confidence == other.Confidence ||
                    this.Confidence != null &&
                    this.Confidence.Equals(other.Confidence)
                ) && 
                (
                    this.RecordType == other.RecordType ||
                    this.RecordType != null &&
                    this.RecordType.Equals(other.RecordType)
                ) && 
                (
                    this.RecordTypeDefault == other.RecordTypeDefault ||
                    this.RecordTypeDefault != null &&
                    this.RecordTypeDefault.Equals(other.RecordTypeDefault)
                ) && 
                (
                    this.MultipleMatches == other.MultipleMatches ||
                    this.MultipleMatches != null &&
                    this.MultipleMatches.Equals(other.MultipleMatches)
                ) && 
                (
                    this.CouldNotValidate == other.CouldNotValidate ||
                    this.CouldNotValidate != null &&
                    this.CouldNotValidate.Equals(other.CouldNotValidate)
                ) && 
                (
                    this.CountryLevel == other.CountryLevel ||
                    this.CountryLevel != null &&
                    this.CountryLevel.Equals(other.CountryLevel)
                ) && 
                (
                    this.AddressFormat == other.AddressFormat ||
                    this.AddressFormat != null &&
                    this.AddressFormat.Equals(other.AddressFormat)
                ) && 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.AddressLine3 == other.AddressLine3 ||
                    this.AddressLine3 != null &&
                    this.AddressLine3.Equals(other.AddressLine3)
                ) && 
                (
                    this.AddressLine4 == other.AddressLine4 ||
                    this.AddressLine4 != null &&
                    this.AddressLine4.Equals(other.AddressLine4)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.StateProvince == other.StateProvince ||
                    this.StateProvince != null &&
                    this.StateProvince.Equals(other.StateProvince)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.PostalCodeBase == other.PostalCodeBase ||
                    this.PostalCodeBase != null &&
                    this.PostalCodeBase.Equals(other.PostalCodeBase)
                ) && 
                (
                    this.PostalCodeAddOn == other.PostalCodeAddOn ||
                    this.PostalCodeAddOn != null &&
                    this.PostalCodeAddOn.Equals(other.PostalCodeAddOn)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.AdditionalInputData == other.AdditionalInputData ||
                    this.AdditionalInputData != null &&
                    this.AdditionalInputData.Equals(other.AdditionalInputData)
                ) && 
                (
                    this.FirmName == other.FirmName ||
                    this.FirmName != null &&
                    this.FirmName.Equals(other.FirmName)
                ) && 
                (
                    this.HouseNumber == other.HouseNumber ||
                    this.HouseNumber != null &&
                    this.HouseNumber.Equals(other.HouseNumber)
                ) && 
                (
                    this.LeadingDirectional == other.LeadingDirectional ||
                    this.LeadingDirectional != null &&
                    this.LeadingDirectional.Equals(other.LeadingDirectional)
                ) && 
                (
                    this.StreetName == other.StreetName ||
                    this.StreetName != null &&
                    this.StreetName.Equals(other.StreetName)
                ) && 
                (
                    this.StreetSuffix == other.StreetSuffix ||
                    this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(other.StreetSuffix)
                ) && 
                (
                    this.TrailingDirectional == other.TrailingDirectional ||
                    this.TrailingDirectional != null &&
                    this.TrailingDirectional.Equals(other.TrailingDirectional)
                ) && 
                (
                    this.ApartmentLabel == other.ApartmentLabel ||
                    this.ApartmentLabel != null &&
                    this.ApartmentLabel.Equals(other.ApartmentLabel)
                ) && 
                (
                    this.ApartmentNumber == other.ApartmentNumber ||
                    this.ApartmentNumber != null &&
                    this.ApartmentNumber.Equals(other.ApartmentNumber)
                ) && 
                (
                    this.ApartmentLabel2 == other.ApartmentLabel2 ||
                    this.ApartmentLabel2 != null &&
                    this.ApartmentLabel2.Equals(other.ApartmentLabel2)
                ) && 
                (
                    this.ApartmentNumber2 == other.ApartmentNumber2 ||
                    this.ApartmentNumber2 != null &&
                    this.ApartmentNumber2.Equals(other.ApartmentNumber2)
                ) && 
                (
                    this.RRHC == other.RRHC ||
                    this.RRHC != null &&
                    this.RRHC.Equals(other.RRHC)
                ) && 
                (
                    this.POBox == other.POBox ||
                    this.POBox != null &&
                    this.POBox.Equals(other.POBox)
                ) && 
                (
                    this.PrivateMailbox == other.PrivateMailbox ||
                    this.PrivateMailbox != null &&
                    this.PrivateMailbox.Equals(other.PrivateMailbox)
                ) && 
                (
                    this.PrivateMailboxType == other.PrivateMailboxType ||
                    this.PrivateMailboxType != null &&
                    this.PrivateMailboxType.Equals(other.PrivateMailboxType)
                ) && 
                (
                    this.HouseNumberInput == other.HouseNumberInput ||
                    this.HouseNumberInput != null &&
                    this.HouseNumberInput.Equals(other.HouseNumberInput)
                ) && 
                (
                    this.LeadingDirectionalInput == other.LeadingDirectionalInput ||
                    this.LeadingDirectionalInput != null &&
                    this.LeadingDirectionalInput.Equals(other.LeadingDirectionalInput)
                ) && 
                (
                    this.StreetNameInput == other.StreetNameInput ||
                    this.StreetNameInput != null &&
                    this.StreetNameInput.Equals(other.StreetNameInput)
                ) && 
                (
                    this.StreetSuffixInput == other.StreetSuffixInput ||
                    this.StreetSuffixInput != null &&
                    this.StreetSuffixInput.Equals(other.StreetSuffixInput)
                ) && 
                (
                    this.TrailingDirectionalInput == other.TrailingDirectionalInput ||
                    this.TrailingDirectionalInput != null &&
                    this.TrailingDirectionalInput.Equals(other.TrailingDirectionalInput)
                ) && 
                (
                    this.ApartmentLabelInput == other.ApartmentLabelInput ||
                    this.ApartmentLabelInput != null &&
                    this.ApartmentLabelInput.Equals(other.ApartmentLabelInput)
                ) && 
                (
                    this.ApartmentNumberInput == other.ApartmentNumberInput ||
                    this.ApartmentNumberInput != null &&
                    this.ApartmentNumberInput.Equals(other.ApartmentNumberInput)
                ) && 
                (
                    this.RRHCInput == other.RRHCInput ||
                    this.RRHCInput != null &&
                    this.RRHCInput.Equals(other.RRHCInput)
                ) && 
                (
                    this.POBoxInput == other.POBoxInput ||
                    this.POBoxInput != null &&
                    this.POBoxInput.Equals(other.POBoxInput)
                ) && 
                (
                    this.PrivateMailboxInput == other.PrivateMailboxInput ||
                    this.PrivateMailboxInput != null &&
                    this.PrivateMailboxInput.Equals(other.PrivateMailboxInput)
                ) && 
                (
                    this.PrivateMailboxTypeInput == other.PrivateMailboxTypeInput ||
                    this.PrivateMailboxTypeInput != null &&
                    this.PrivateMailboxTypeInput.Equals(other.PrivateMailboxTypeInput)
                ) && 
                (
                    this.CityInput == other.CityInput ||
                    this.CityInput != null &&
                    this.CityInput.Equals(other.CityInput)
                ) && 
                (
                    this.StateProvinceInput == other.StateProvinceInput ||
                    this.StateProvinceInput != null &&
                    this.StateProvinceInput.Equals(other.StateProvinceInput)
                ) && 
                (
                    this.PostalCodeInput == other.PostalCodeInput ||
                    this.PostalCodeInput != null &&
                    this.PostalCodeInput.Equals(other.PostalCodeInput)
                ) && 
                (
                    this.CountryInput == other.CountryInput ||
                    this.CountryInput != null &&
                    this.CountryInput.Equals(other.CountryInput)
                ) && 
                (
                    this.FirmNameInput == other.FirmNameInput ||
                    this.FirmNameInput != null &&
                    this.FirmNameInput.Equals(other.FirmNameInput)
                ) && 
                (
                    this.HouseNumberResult == other.HouseNumberResult ||
                    this.HouseNumberResult != null &&
                    this.HouseNumberResult.Equals(other.HouseNumberResult)
                ) && 
                (
                    this.LeadingDirectionalResult == other.LeadingDirectionalResult ||
                    this.LeadingDirectionalResult != null &&
                    this.LeadingDirectionalResult.Equals(other.LeadingDirectionalResult)
                ) && 
                (
                    this.StreetResult == other.StreetResult ||
                    this.StreetResult != null &&
                    this.StreetResult.Equals(other.StreetResult)
                ) && 
                (
                    this.StreetNameResult == other.StreetNameResult ||
                    this.StreetNameResult != null &&
                    this.StreetNameResult.Equals(other.StreetNameResult)
                ) && 
                (
                    this.StreetNameAliasType == other.StreetNameAliasType ||
                    this.StreetNameAliasType != null &&
                    this.StreetNameAliasType.Equals(other.StreetNameAliasType)
                ) && 
                (
                    this.StreetSuffixResult == other.StreetSuffixResult ||
                    this.StreetSuffixResult != null &&
                    this.StreetSuffixResult.Equals(other.StreetSuffixResult)
                ) && 
                (
                    this.TrailingDirectionalResult == other.TrailingDirectionalResult ||
                    this.TrailingDirectionalResult != null &&
                    this.TrailingDirectionalResult.Equals(other.TrailingDirectionalResult)
                ) && 
                (
                    this.ApartmentLabelResult == other.ApartmentLabelResult ||
                    this.ApartmentLabelResult != null &&
                    this.ApartmentLabelResult.Equals(other.ApartmentLabelResult)
                ) && 
                (
                    this.ApartmentNumberResult == other.ApartmentNumberResult ||
                    this.ApartmentNumberResult != null &&
                    this.ApartmentNumberResult.Equals(other.ApartmentNumberResult)
                ) && 
                (
                    this.ApartmentLabel2Result == other.ApartmentLabel2Result ||
                    this.ApartmentLabel2Result != null &&
                    this.ApartmentLabel2Result.Equals(other.ApartmentLabel2Result)
                ) && 
                (
                    this.ApartmentNumber2Result == other.ApartmentNumber2Result ||
                    this.ApartmentNumber2Result != null &&
                    this.ApartmentNumber2Result.Equals(other.ApartmentNumber2Result)
                ) && 
                (
                    this.RRHCResult == other.RRHCResult ||
                    this.RRHCResult != null &&
                    this.RRHCResult.Equals(other.RRHCResult)
                ) && 
                (
                    this.RRHCType == other.RRHCType ||
                    this.RRHCType != null &&
                    this.RRHCType.Equals(other.RRHCType)
                ) && 
                (
                    this.POBoxResult == other.POBoxResult ||
                    this.POBoxResult != null &&
                    this.POBoxResult.Equals(other.POBoxResult)
                ) && 
                (
                    this.CityResult == other.CityResult ||
                    this.CityResult != null &&
                    this.CityResult.Equals(other.CityResult)
                ) && 
                (
                    this.StateProvinceResult == other.StateProvinceResult ||
                    this.StateProvinceResult != null &&
                    this.StateProvinceResult.Equals(other.StateProvinceResult)
                ) && 
                (
                    this.PostalCodeResult == other.PostalCodeResult ||
                    this.PostalCodeResult != null &&
                    this.PostalCodeResult.Equals(other.PostalCodeResult)
                ) && 
                (
                    this.PostalCodeCityResult == other.PostalCodeCityResult ||
                    this.PostalCodeCityResult != null &&
                    this.PostalCodeCityResult.Equals(other.PostalCodeCityResult)
                ) && 
                (
                    this.AddressRecordResult == other.AddressRecordResult ||
                    this.AddressRecordResult != null &&
                    this.AddressRecordResult.Equals(other.AddressRecordResult)
                ) && 
                (
                    this.PostalCodeSource == other.PostalCodeSource ||
                    this.PostalCodeSource != null &&
                    this.PostalCodeSource.Equals(other.PostalCodeSource)
                ) && 
                (
                    this.PostalCodeType == other.PostalCodeType ||
                    this.PostalCodeType != null &&
                    this.PostalCodeType.Equals(other.PostalCodeType)
                ) && 
                (
                    this.CountryResult == other.CountryResult ||
                    this.CountryResult != null &&
                    this.CountryResult.Equals(other.CountryResult)
                ) && 
                (
                    this.FirmNameResult == other.FirmNameResult ||
                    this.FirmNameResult != null &&
                    this.FirmNameResult.Equals(other.FirmNameResult)
                ) && 
                (
                    this.StreetNamePreferredAliasResult == other.StreetNamePreferredAliasResult ||
                    this.StreetNamePreferredAliasResult != null &&
                    this.StreetNamePreferredAliasResult.Equals(other.StreetNamePreferredAliasResult)
                ) && 
                (
                    this.StreetNameAbbreviatedAliasResult == other.StreetNameAbbreviatedAliasResult ||
                    this.StreetNameAbbreviatedAliasResult != null &&
                    this.StreetNameAbbreviatedAliasResult.Equals(other.StreetNameAbbreviatedAliasResult)
                ) && 
                (
                    this.AddressLine5 == other.AddressLine5 ||
                    this.AddressLine5 != null &&
                    this.AddressLine5.Equals(other.AddressLine5)
                ) && 
                (
                    this.AddressQuality == other.AddressQuality ||
                    this.AddressQuality != null &&
                    this.AddressQuality.Equals(other.AddressQuality)
                ) && 
                (
                    this.Deliverability == other.Deliverability ||
                    this.Deliverability != null &&
                    this.Deliverability.Equals(other.Deliverability)
                ) && 
                (
                    this.AddressType == other.AddressType ||
                    this.AddressType != null &&
                    this.AddressType.Equals(other.AddressType)
                ) && 
                (
                    this.Locality == other.Locality ||
                    this.Locality != null &&
                    this.Locality.Equals(other.Locality)
                ) && 
                (
                    this.ChangeScore == other.ChangeScore ||
                    this.ChangeScore != null &&
                    this.ChangeScore.Equals(other.ChangeScore)
                ) && 
                (
                    this.Suburb == other.Suburb ||
                    this.Suburb != null &&
                    this.Suburb.Equals(other.Suburb)
                ) && 
                (
                    this.BlockAddress == other.BlockAddress ||
                    this.BlockAddress != null &&
                    this.BlockAddress.Equals(other.BlockAddress)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserFields != null)
                    hash = hash * 59 + this.UserFields.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hash = hash * 59 + this.StatusDescription.GetHashCode();
                if (this.Confidence != null)
                    hash = hash * 59 + this.Confidence.GetHashCode();
                if (this.RecordType != null)
                    hash = hash * 59 + this.RecordType.GetHashCode();
                if (this.RecordTypeDefault != null)
                    hash = hash * 59 + this.RecordTypeDefault.GetHashCode();
                if (this.MultipleMatches != null)
                    hash = hash * 59 + this.MultipleMatches.GetHashCode();
                if (this.CouldNotValidate != null)
                    hash = hash * 59 + this.CouldNotValidate.GetHashCode();
                if (this.CountryLevel != null)
                    hash = hash * 59 + this.CountryLevel.GetHashCode();
                if (this.AddressFormat != null)
                    hash = hash * 59 + this.AddressFormat.GetHashCode();
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hash = hash * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressLine4 != null)
                    hash = hash * 59 + this.AddressLine4.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hash = hash * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.PostalCodeBase != null)
                    hash = hash * 59 + this.PostalCodeBase.GetHashCode();
                if (this.PostalCodeAddOn != null)
                    hash = hash * 59 + this.PostalCodeAddOn.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.AdditionalInputData != null)
                    hash = hash * 59 + this.AdditionalInputData.GetHashCode();
                if (this.FirmName != null)
                    hash = hash * 59 + this.FirmName.GetHashCode();
                if (this.HouseNumber != null)
                    hash = hash * 59 + this.HouseNumber.GetHashCode();
                if (this.LeadingDirectional != null)
                    hash = hash * 59 + this.LeadingDirectional.GetHashCode();
                if (this.StreetName != null)
                    hash = hash * 59 + this.StreetName.GetHashCode();
                if (this.StreetSuffix != null)
                    hash = hash * 59 + this.StreetSuffix.GetHashCode();
                if (this.TrailingDirectional != null)
                    hash = hash * 59 + this.TrailingDirectional.GetHashCode();
                if (this.ApartmentLabel != null)
                    hash = hash * 59 + this.ApartmentLabel.GetHashCode();
                if (this.ApartmentNumber != null)
                    hash = hash * 59 + this.ApartmentNumber.GetHashCode();
                if (this.ApartmentLabel2 != null)
                    hash = hash * 59 + this.ApartmentLabel2.GetHashCode();
                if (this.ApartmentNumber2 != null)
                    hash = hash * 59 + this.ApartmentNumber2.GetHashCode();
                if (this.RRHC != null)
                    hash = hash * 59 + this.RRHC.GetHashCode();
                if (this.POBox != null)
                    hash = hash * 59 + this.POBox.GetHashCode();
                if (this.PrivateMailbox != null)
                    hash = hash * 59 + this.PrivateMailbox.GetHashCode();
                if (this.PrivateMailboxType != null)
                    hash = hash * 59 + this.PrivateMailboxType.GetHashCode();
                if (this.HouseNumberInput != null)
                    hash = hash * 59 + this.HouseNumberInput.GetHashCode();
                if (this.LeadingDirectionalInput != null)
                    hash = hash * 59 + this.LeadingDirectionalInput.GetHashCode();
                if (this.StreetNameInput != null)
                    hash = hash * 59 + this.StreetNameInput.GetHashCode();
                if (this.StreetSuffixInput != null)
                    hash = hash * 59 + this.StreetSuffixInput.GetHashCode();
                if (this.TrailingDirectionalInput != null)
                    hash = hash * 59 + this.TrailingDirectionalInput.GetHashCode();
                if (this.ApartmentLabelInput != null)
                    hash = hash * 59 + this.ApartmentLabelInput.GetHashCode();
                if (this.ApartmentNumberInput != null)
                    hash = hash * 59 + this.ApartmentNumberInput.GetHashCode();
                if (this.RRHCInput != null)
                    hash = hash * 59 + this.RRHCInput.GetHashCode();
                if (this.POBoxInput != null)
                    hash = hash * 59 + this.POBoxInput.GetHashCode();
                if (this.PrivateMailboxInput != null)
                    hash = hash * 59 + this.PrivateMailboxInput.GetHashCode();
                if (this.PrivateMailboxTypeInput != null)
                    hash = hash * 59 + this.PrivateMailboxTypeInput.GetHashCode();
                if (this.CityInput != null)
                    hash = hash * 59 + this.CityInput.GetHashCode();
                if (this.StateProvinceInput != null)
                    hash = hash * 59 + this.StateProvinceInput.GetHashCode();
                if (this.PostalCodeInput != null)
                    hash = hash * 59 + this.PostalCodeInput.GetHashCode();
                if (this.CountryInput != null)
                    hash = hash * 59 + this.CountryInput.GetHashCode();
                if (this.FirmNameInput != null)
                    hash = hash * 59 + this.FirmNameInput.GetHashCode();
                if (this.HouseNumberResult != null)
                    hash = hash * 59 + this.HouseNumberResult.GetHashCode();
                if (this.LeadingDirectionalResult != null)
                    hash = hash * 59 + this.LeadingDirectionalResult.GetHashCode();
                if (this.StreetResult != null)
                    hash = hash * 59 + this.StreetResult.GetHashCode();
                if (this.StreetNameResult != null)
                    hash = hash * 59 + this.StreetNameResult.GetHashCode();
                if (this.StreetNameAliasType != null)
                    hash = hash * 59 + this.StreetNameAliasType.GetHashCode();
                if (this.StreetSuffixResult != null)
                    hash = hash * 59 + this.StreetSuffixResult.GetHashCode();
                if (this.TrailingDirectionalResult != null)
                    hash = hash * 59 + this.TrailingDirectionalResult.GetHashCode();
                if (this.ApartmentLabelResult != null)
                    hash = hash * 59 + this.ApartmentLabelResult.GetHashCode();
                if (this.ApartmentNumberResult != null)
                    hash = hash * 59 + this.ApartmentNumberResult.GetHashCode();
                if (this.ApartmentLabel2Result != null)
                    hash = hash * 59 + this.ApartmentLabel2Result.GetHashCode();
                if (this.ApartmentNumber2Result != null)
                    hash = hash * 59 + this.ApartmentNumber2Result.GetHashCode();
                if (this.RRHCResult != null)
                    hash = hash * 59 + this.RRHCResult.GetHashCode();
                if (this.RRHCType != null)
                    hash = hash * 59 + this.RRHCType.GetHashCode();
                if (this.POBoxResult != null)
                    hash = hash * 59 + this.POBoxResult.GetHashCode();
                if (this.CityResult != null)
                    hash = hash * 59 + this.CityResult.GetHashCode();
                if (this.StateProvinceResult != null)
                    hash = hash * 59 + this.StateProvinceResult.GetHashCode();
                if (this.PostalCodeResult != null)
                    hash = hash * 59 + this.PostalCodeResult.GetHashCode();
                if (this.PostalCodeCityResult != null)
                    hash = hash * 59 + this.PostalCodeCityResult.GetHashCode();
                if (this.AddressRecordResult != null)
                    hash = hash * 59 + this.AddressRecordResult.GetHashCode();
                if (this.PostalCodeSource != null)
                    hash = hash * 59 + this.PostalCodeSource.GetHashCode();
                if (this.PostalCodeType != null)
                    hash = hash * 59 + this.PostalCodeType.GetHashCode();
                if (this.CountryResult != null)
                    hash = hash * 59 + this.CountryResult.GetHashCode();
                if (this.FirmNameResult != null)
                    hash = hash * 59 + this.FirmNameResult.GetHashCode();
                if (this.StreetNamePreferredAliasResult != null)
                    hash = hash * 59 + this.StreetNamePreferredAliasResult.GetHashCode();
                if (this.StreetNameAbbreviatedAliasResult != null)
                    hash = hash * 59 + this.StreetNameAbbreviatedAliasResult.GetHashCode();
                if (this.AddressLine5 != null)
                    hash = hash * 59 + this.AddressLine5.GetHashCode();
                if (this.AddressQuality != null)
                    hash = hash * 59 + this.AddressQuality.GetHashCode();
                if (this.Deliverability != null)
                    hash = hash * 59 + this.Deliverability.GetHashCode();
                if (this.AddressType != null)
                    hash = hash * 59 + this.AddressType.GetHashCode();
                if (this.Locality != null)
                    hash = hash * 59 + this.Locality.GetHashCode();
                if (this.ChangeScore != null)
                    hash = hash * 59 + this.ChangeScore.GetHashCode();
                if (this.Suburb != null)
                    hash = hash * 59 + this.Suburb.GetHashCode();
                if (this.BlockAddress != null)
                    hash = hash * 59 + this.BlockAddress.GetHashCode();
                if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                return hash;
            }
        }
    }

}
