/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressPremiumOutput
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressPremiumOutput :  IEquatable<ValidateMailingAddressPremiumOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressPremiumOutput" /> class.
        /// </summary>
        /// <param name="userFields">These fields are returned, unmodified, in the user_fields section of the response..</param>
        /// <param name="status">Reports the success or failure of the match attempt..</param>
        /// <param name="statusCode">Reason for failure, if there is one..</param>
        /// <param name="statusDescription">Description of the problem, if there is one..</param>
        /// <param name="confidence">The level of confidence assigned to the address being returned..</param>
        /// <param name="recordType">Type of address record..</param>
        /// <param name="recordTypeDefault">Code indicating the default match..</param>
        /// <param name="multipleMatches">Indicates which address component had multiple matches..</param>
        /// <param name="couldNotValidate">Mentions the address component that could not be validated, in case no match is found..</param>
        /// <param name="countryLevel">The category of address matching available..</param>
        /// <param name="addressFormat">The type of address data being returned..</param>
        /// <param name="addressLine1">The first line of the validated address..</param>
        /// <param name="addressLine2">The second line of the validated address..</param>
        /// <param name="addressLine3">The third line of the validated address..</param>
        /// <param name="addressLine4">The fourth line of the validated address..</param>
        /// <param name="city">The validated city name..</param>
        /// <param name="stateProvince">The validated state or province abbreviation..</param>
        /// <param name="postalCode">The validated ZIP Code or postal code..</param>
        /// <param name="postalCodeBase">The 5-digit ZIP Code..</param>
        /// <param name="postalCodeAddOn">The 4-digit add-on part of the ZIP Code..</param>
        /// <param name="country">The country in the format determined by what you selected..</param>
        /// <param name="additionalInputData">Input data that could not be matched to a particular address component..</param>
        /// <param name="firmName">The validated firm or company name..</param>
        /// <param name="houseNumber">House number..</param>
        /// <param name="leadingDirectional">Leading directional..</param>
        /// <param name="streetName">Street name..</param>
        /// <param name="streetSuffix">Street suffix..</param>
        /// <param name="trailingDirectional">Trailing directional..</param>
        /// <param name="apartmentLabel">Apartment designator (such as STE or APT)..</param>
        /// <param name="apartmentNumber">Apartment number..</param>
        /// <param name="apartmentLabel2">Secondary apartment designator..</param>
        /// <param name="apartmentNumber2">Secondary apartment number..</param>
        /// <param name="rRHC">Rural Route/Highway Contract indicator..</param>
        /// <param name="pOBox">Post office box number..</param>
        /// <param name="privateMailbox">Private mailbox indicator..</param>
        /// <param name="privateMailboxType">The type of private mailbox..</param>
        /// <param name="houseNumberInput">House number..</param>
        /// <param name="leadingDirectionalInput">Leading directional..</param>
        /// <param name="streetNameInput">Street name..</param>
        /// <param name="streetSuffixInput">Street suffix..</param>
        /// <param name="trailingDirectionalInput">Trailing directional..</param>
        /// <param name="apartmentLabelInput">Apartment designator (such as STE or APT)..</param>
        /// <param name="apartmentNumberInput">Apartment number..</param>
        /// <param name="rRHCInput">Rural Route/Highway Contract indicator..</param>
        /// <param name="pOBoxInput">Post office box number..</param>
        /// <param name="privateMailboxInput">Private mailbox indicator..</param>
        /// <param name="privateMailboxTypeInput">The type of private mailbox..</param>
        /// <param name="cityInput">Validated city name..</param>
        /// <param name="stateProvinceInput">Validated state or province name..</param>
        /// <param name="postalCodeInput">Validated postal code..</param>
        /// <param name="countryInput">Country. Format is determined by what you selected in OutputCountryFormat..</param>
        /// <param name="firmNameInput">The validated firm or company name..</param>
        /// <param name="houseNumberResult">The field-level result indicator for HouseNumber..</param>
        /// <param name="leadingDirectionalResult">The field-level result indicator for LeadingDirectional..</param>
        /// <param name="streetResult">The field-level result indicator for Street..</param>
        /// <param name="streetNameResult">The field-level result indicator for StreetName..</param>
        /// <param name="streetNameAliasType">The field-level result indicator for StreetName Alias..</param>
        /// <param name="streetSuffixResult">The field-level result indicator for StreetSuffix..</param>
        /// <param name="trailingDirectionalResult">The field-level result indicator for TrailingDirectional..</param>
        /// <param name="apartmentLabelResult">The field-level result indicator for ApartmentLabel..</param>
        /// <param name="apartmentNumberResult">The field-level result indicator for ApartmentNumber..</param>
        /// <param name="apartmentLabel2Result">The field-level result indicator for ApartmentLabel2..</param>
        /// <param name="apartmentNumber2Result">The field-level result indicator for ApartmentNumber2..</param>
        /// <param name="rRHCResult">The field-level result indicator for RRHC..</param>
        /// <param name="rRHCType">The field-level result indicator for RRHC Type..</param>
        /// <param name="pOBoxResult">The field-level result indicator for POBox..</param>
        /// <param name="cityResult">The field-level result indicator for City..</param>
        /// <param name="stateProvinceResult">The field-level result indicator for StateProvince..</param>
        /// <param name="postalCodeResult">The field-level result indicator for PostalCode..</param>
        /// <param name="postalCodeCityResult">The field-level result indicator for PostalCodeCity..</param>
        /// <param name="addressRecordResult">The field-level result indicator for AddressRecord..</param>
        /// <param name="postalCodeSource">The field-level result indicator for PostalCode Source..</param>
        /// <param name="postalCodeType">Indicates the type of postal code returned..</param>
        /// <param name="countryResult">The validated firm or company name..</param>
        /// <param name="firmNameResult">Indicates if the firm name got validated..</param>
        /// <param name="streetNamePreferredAliasResult">Indicates the result of preferred alias processing..</param>
        /// <param name="streetNameAbbreviatedAliasResult">Indicates the result of abbreviated alias processing..</param>
        /// <param name="addressLine5">The fifth line of the validated address..</param>
        /// <param name="addressQuality">A two character code indicating overall quality of the resulting address..</param>
        /// <param name="deliverability">An estimate of confidence that an item mailed or shipped to this address would be successfully delivered..</param>
        /// <param name="addressType">A single letter code that indicates the type of address..</param>
        /// <param name="locality">A locality is a village in rural areas or it may be a suburb in urban areas..</param>
        /// <param name="changeScore">A value of 0 and 100 that reflects how much the address has changed to make it valid..</param>
        /// <param name="suburb">The validated firm or company name..</param>
        /// <param name="blockAddress">It is the formatted address, as it would appear on a physical mail piece..</param>
        /// <param name="latitude">Seven-digit number in degrees, calculated to four decimal places..</param>
        /// <param name="longitude">Seven-digit number in degrees, calculated to four decimal places..</param>
        public ValidateMailingAddressPremiumOutput(List<GetPostalCodesAPIOutputUserFields> userFields = default(List<GetPostalCodesAPIOutputUserFields>), string status = default(string), string statusCode = default(string), string statusDescription = default(string), string confidence = default(string), string recordType = default(string), string recordTypeDefault = default(string), string multipleMatches = default(string), string couldNotValidate = default(string), string countryLevel = default(string), string addressFormat = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string addressLine4 = default(string), string city = default(string), string stateProvince = default(string), string postalCode = default(string), string postalCodeBase = default(string), string postalCodeAddOn = default(string), string country = default(string), string additionalInputData = default(string), string firmName = default(string), string houseNumber = default(string), string leadingDirectional = default(string), string streetName = default(string), string streetSuffix = default(string), string trailingDirectional = default(string), string apartmentLabel = default(string), string apartmentNumber = default(string), string apartmentLabel2 = default(string), string apartmentNumber2 = default(string), string rRHC = default(string), string pOBox = default(string), string privateMailbox = default(string), string privateMailboxType = default(string), string houseNumberInput = default(string), string leadingDirectionalInput = default(string), string streetNameInput = default(string), string streetSuffixInput = default(string), string trailingDirectionalInput = default(string), string apartmentLabelInput = default(string), string apartmentNumberInput = default(string), string rRHCInput = default(string), string pOBoxInput = default(string), string privateMailboxInput = default(string), string privateMailboxTypeInput = default(string), string cityInput = default(string), string stateProvinceInput = default(string), string postalCodeInput = default(string), string countryInput = default(string), string firmNameInput = default(string), string houseNumberResult = default(string), string leadingDirectionalResult = default(string), string streetResult = default(string), string streetNameResult = default(string), string streetNameAliasType = default(string), string streetSuffixResult = default(string), string trailingDirectionalResult = default(string), string apartmentLabelResult = default(string), string apartmentNumberResult = default(string), string apartmentLabel2Result = default(string), string apartmentNumber2Result = default(string), string rRHCResult = default(string), string rRHCType = default(string), string pOBoxResult = default(string), string cityResult = default(string), string stateProvinceResult = default(string), string postalCodeResult = default(string), string postalCodeCityResult = default(string), string addressRecordResult = default(string), string postalCodeSource = default(string), string postalCodeType = default(string), string countryResult = default(string), string firmNameResult = default(string), string streetNamePreferredAliasResult = default(string), string streetNameAbbreviatedAliasResult = default(string), string addressLine5 = default(string), string addressQuality = default(string), string deliverability = default(string), string addressType = default(string), string locality = default(string), string changeScore = default(string), string suburb = default(string), string blockAddress = default(string), string latitude = default(string), string longitude = default(string))
        {
            this.UserFields = userFields;
            this.Status = status;
            this.StatusCode = statusCode;
            this.StatusDescription = statusDescription;
            this.Confidence = confidence;
            this.RecordType = recordType;
            this.RecordTypeDefault = recordTypeDefault;
            this.MultipleMatches = multipleMatches;
            this.CouldNotValidate = couldNotValidate;
            this.CountryLevel = countryLevel;
            this.AddressFormat = addressFormat;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.City = city;
            this.StateProvince = stateProvince;
            this.PostalCode = postalCode;
            this.PostalCodeBase = postalCodeBase;
            this.PostalCodeAddOn = postalCodeAddOn;
            this.Country = country;
            this.AdditionalInputData = additionalInputData;
            this.FirmName = firmName;
            this.HouseNumber = houseNumber;
            this.LeadingDirectional = leadingDirectional;
            this.StreetName = streetName;
            this.StreetSuffix = streetSuffix;
            this.TrailingDirectional = trailingDirectional;
            this.ApartmentLabel = apartmentLabel;
            this.ApartmentNumber = apartmentNumber;
            this.ApartmentLabel2 = apartmentLabel2;
            this.ApartmentNumber2 = apartmentNumber2;
            this.RRHC = rRHC;
            this.POBox = pOBox;
            this.PrivateMailbox = privateMailbox;
            this.PrivateMailboxType = privateMailboxType;
            this.HouseNumberInput = houseNumberInput;
            this.LeadingDirectionalInput = leadingDirectionalInput;
            this.StreetNameInput = streetNameInput;
            this.StreetSuffixInput = streetSuffixInput;
            this.TrailingDirectionalInput = trailingDirectionalInput;
            this.ApartmentLabelInput = apartmentLabelInput;
            this.ApartmentNumberInput = apartmentNumberInput;
            this.RRHCInput = rRHCInput;
            this.POBoxInput = pOBoxInput;
            this.PrivateMailboxInput = privateMailboxInput;
            this.PrivateMailboxTypeInput = privateMailboxTypeInput;
            this.CityInput = cityInput;
            this.StateProvinceInput = stateProvinceInput;
            this.PostalCodeInput = postalCodeInput;
            this.CountryInput = countryInput;
            this.FirmNameInput = firmNameInput;
            this.HouseNumberResult = houseNumberResult;
            this.LeadingDirectionalResult = leadingDirectionalResult;
            this.StreetResult = streetResult;
            this.StreetNameResult = streetNameResult;
            this.StreetNameAliasType = streetNameAliasType;
            this.StreetSuffixResult = streetSuffixResult;
            this.TrailingDirectionalResult = trailingDirectionalResult;
            this.ApartmentLabelResult = apartmentLabelResult;
            this.ApartmentNumberResult = apartmentNumberResult;
            this.ApartmentLabel2Result = apartmentLabel2Result;
            this.ApartmentNumber2Result = apartmentNumber2Result;
            this.RRHCResult = rRHCResult;
            this.RRHCType = rRHCType;
            this.POBoxResult = pOBoxResult;
            this.CityResult = cityResult;
            this.StateProvinceResult = stateProvinceResult;
            this.PostalCodeResult = postalCodeResult;
            this.PostalCodeCityResult = postalCodeCityResult;
            this.AddressRecordResult = addressRecordResult;
            this.PostalCodeSource = postalCodeSource;
            this.PostalCodeType = postalCodeType;
            this.CountryResult = countryResult;
            this.FirmNameResult = firmNameResult;
            this.StreetNamePreferredAliasResult = streetNamePreferredAliasResult;
            this.StreetNameAbbreviatedAliasResult = streetNameAbbreviatedAliasResult;
            this.AddressLine5 = addressLine5;
            this.AddressQuality = addressQuality;
            this.Deliverability = deliverability;
            this.AddressType = addressType;
            this.Locality = locality;
            this.ChangeScore = changeScore;
            this.Suburb = suburb;
            this.BlockAddress = blockAddress;
            this.Latitude = latitude;
            this.Longitude = longitude;
        }

        /// <summary>
        /// These fields are returned, unmodified, in the user_fields section of the response.
        /// </summary>
        /// <value>These fields are returned, unmodified, in the user_fields section of the response.</value>
        [DataMember(Name="user_fields", EmitDefaultValue=false)]
        public List<GetPostalCodesAPIOutputUserFields> UserFields { get; set; }

        /// <summary>
        /// Reports the success or failure of the match attempt.
        /// </summary>
        /// <value>Reports the success or failure of the match attempt.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Reason for failure, if there is one.
        /// </summary>
        /// <value>Reason for failure, if there is one.</value>
        [DataMember(Name="Status.Code", EmitDefaultValue=false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Description of the problem, if there is one.
        /// </summary>
        /// <value>Description of the problem, if there is one.</value>
        [DataMember(Name="Status.Description", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// The level of confidence assigned to the address being returned.
        /// </summary>
        /// <value>The level of confidence assigned to the address being returned.</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }

        /// <summary>
        /// Type of address record.
        /// </summary>
        /// <value>Type of address record.</value>
        [DataMember(Name="RecordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }

        /// <summary>
        /// Code indicating the default match.
        /// </summary>
        /// <value>Code indicating the default match.</value>
        [DataMember(Name="RecordType.Default", EmitDefaultValue=false)]
        public string RecordTypeDefault { get; set; }

        /// <summary>
        /// Indicates which address component had multiple matches.
        /// </summary>
        /// <value>Indicates which address component had multiple matches.</value>
        [DataMember(Name="MultipleMatches", EmitDefaultValue=false)]
        public string MultipleMatches { get; set; }

        /// <summary>
        /// Mentions the address component that could not be validated, in case no match is found.
        /// </summary>
        /// <value>Mentions the address component that could not be validated, in case no match is found.</value>
        [DataMember(Name="CouldNotValidate", EmitDefaultValue=false)]
        public string CouldNotValidate { get; set; }

        /// <summary>
        /// The category of address matching available.
        /// </summary>
        /// <value>The category of address matching available.</value>
        [DataMember(Name="CountryLevel", EmitDefaultValue=false)]
        public string CountryLevel { get; set; }

        /// <summary>
        /// The type of address data being returned.
        /// </summary>
        /// <value>The type of address data being returned.</value>
        [DataMember(Name="AddressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }

        /// <summary>
        /// The first line of the validated address.
        /// </summary>
        /// <value>The first line of the validated address.</value>
        [DataMember(Name="AddressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the validated address.
        /// </summary>
        /// <value>The second line of the validated address.</value>
        [DataMember(Name="AddressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the validated address.
        /// </summary>
        /// <value>The third line of the validated address.</value>
        [DataMember(Name="AddressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The fourth line of the validated address.
        /// </summary>
        /// <value>The fourth line of the validated address.</value>
        [DataMember(Name="AddressLine4", EmitDefaultValue=false)]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// The validated city name.
        /// </summary>
        /// <value>The validated city name.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The validated state or province abbreviation.
        /// </summary>
        /// <value>The validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }

        /// <summary>
        /// The validated ZIP Code or postal code.
        /// </summary>
        /// <value>The validated ZIP Code or postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The 5-digit ZIP Code.
        /// </summary>
        /// <value>The 5-digit ZIP Code.</value>
        [DataMember(Name="PostalCode.Base", EmitDefaultValue=false)]
        public string PostalCodeBase { get; set; }

        /// <summary>
        /// The 4-digit add-on part of the ZIP Code.
        /// </summary>
        /// <value>The 4-digit add-on part of the ZIP Code.</value>
        [DataMember(Name="PostalCode.AddOn", EmitDefaultValue=false)]
        public string PostalCodeAddOn { get; set; }

        /// <summary>
        /// The country in the format determined by what you selected.
        /// </summary>
        /// <value>The country in the format determined by what you selected.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Input data that could not be matched to a particular address component.
        /// </summary>
        /// <value>Input data that could not be matched to a particular address component.</value>
        [DataMember(Name="AdditionalInputData", EmitDefaultValue=false)]
        public string AdditionalInputData { get; set; }

        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="FirmName", EmitDefaultValue=false)]
        public string FirmName { get; set; }

        /// <summary>
        /// House number.
        /// </summary>
        /// <value>House number.</value>
        [DataMember(Name="HouseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Leading directional.
        /// </summary>
        /// <value>Leading directional.</value>
        [DataMember(Name="LeadingDirectional", EmitDefaultValue=false)]
        public string LeadingDirectional { get; set; }

        /// <summary>
        /// Street name.
        /// </summary>
        /// <value>Street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Street suffix.
        /// </summary>
        /// <value>Street suffix.</value>
        [DataMember(Name="StreetSuffix", EmitDefaultValue=false)]
        public string StreetSuffix { get; set; }

        /// <summary>
        /// Trailing directional.
        /// </summary>
        /// <value>Trailing directional.</value>
        [DataMember(Name="TrailingDirectional", EmitDefaultValue=false)]
        public string TrailingDirectional { get; set; }

        /// <summary>
        /// Apartment designator (such as STE or APT).
        /// </summary>
        /// <value>Apartment designator (such as STE or APT).</value>
        [DataMember(Name="ApartmentLabel", EmitDefaultValue=false)]
        public string ApartmentLabel { get; set; }

        /// <summary>
        /// Apartment number.
        /// </summary>
        /// <value>Apartment number.</value>
        [DataMember(Name="ApartmentNumber", EmitDefaultValue=false)]
        public string ApartmentNumber { get; set; }

        /// <summary>
        /// Secondary apartment designator.
        /// </summary>
        /// <value>Secondary apartment designator.</value>
        [DataMember(Name="ApartmentLabel2", EmitDefaultValue=false)]
        public string ApartmentLabel2 { get; set; }

        /// <summary>
        /// Secondary apartment number.
        /// </summary>
        /// <value>Secondary apartment number.</value>
        [DataMember(Name="ApartmentNumber2", EmitDefaultValue=false)]
        public string ApartmentNumber2 { get; set; }

        /// <summary>
        /// Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC", EmitDefaultValue=false)]
        public string RRHC { get; set; }

        /// <summary>
        /// Post office box number.
        /// </summary>
        /// <value>Post office box number.</value>
        [DataMember(Name="POBox", EmitDefaultValue=false)]
        public string POBox { get; set; }

        /// <summary>
        /// Private mailbox indicator.
        /// </summary>
        /// <value>Private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox", EmitDefaultValue=false)]
        public string PrivateMailbox { get; set; }

        /// <summary>
        /// The type of private mailbox.
        /// </summary>
        /// <value>The type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type", EmitDefaultValue=false)]
        public string PrivateMailboxType { get; set; }

        /// <summary>
        /// House number.
        /// </summary>
        /// <value>House number.</value>
        [DataMember(Name="HouseNumber.Input", EmitDefaultValue=false)]
        public string HouseNumberInput { get; set; }

        /// <summary>
        /// Leading directional.
        /// </summary>
        /// <value>Leading directional.</value>
        [DataMember(Name="LeadingDirectional.Input", EmitDefaultValue=false)]
        public string LeadingDirectionalInput { get; set; }

        /// <summary>
        /// Street name.
        /// </summary>
        /// <value>Street name.</value>
        [DataMember(Name="StreetName.Input", EmitDefaultValue=false)]
        public string StreetNameInput { get; set; }

        /// <summary>
        /// Street suffix.
        /// </summary>
        /// <value>Street suffix.</value>
        [DataMember(Name="StreetSuffix.Input", EmitDefaultValue=false)]
        public string StreetSuffixInput { get; set; }

        /// <summary>
        /// Trailing directional.
        /// </summary>
        /// <value>Trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Input", EmitDefaultValue=false)]
        public string TrailingDirectionalInput { get; set; }

        /// <summary>
        /// Apartment designator (such as STE or APT).
        /// </summary>
        /// <value>Apartment designator (such as STE or APT).</value>
        [DataMember(Name="ApartmentLabel.Input", EmitDefaultValue=false)]
        public string ApartmentLabelInput { get; set; }

        /// <summary>
        /// Apartment number.
        /// </summary>
        /// <value>Apartment number.</value>
        [DataMember(Name="ApartmentNumber.Input", EmitDefaultValue=false)]
        public string ApartmentNumberInput { get; set; }

        /// <summary>
        /// Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Input", EmitDefaultValue=false)]
        public string RRHCInput { get; set; }

        /// <summary>
        /// Post office box number.
        /// </summary>
        /// <value>Post office box number.</value>
        [DataMember(Name="POBox.Input", EmitDefaultValue=false)]
        public string POBoxInput { get; set; }

        /// <summary>
        /// Private mailbox indicator.
        /// </summary>
        /// <value>Private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox.Input", EmitDefaultValue=false)]
        public string PrivateMailboxInput { get; set; }

        /// <summary>
        /// The type of private mailbox.
        /// </summary>
        /// <value>The type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type.Input", EmitDefaultValue=false)]
        public string PrivateMailboxTypeInput { get; set; }

        /// <summary>
        /// Validated city name.
        /// </summary>
        /// <value>Validated city name.</value>
        [DataMember(Name="City.Input", EmitDefaultValue=false)]
        public string CityInput { get; set; }

        /// <summary>
        /// Validated state or province name.
        /// </summary>
        /// <value>Validated state or province name.</value>
        [DataMember(Name="StateProvince.Input", EmitDefaultValue=false)]
        public string StateProvinceInput { get; set; }

        /// <summary>
        /// Validated postal code.
        /// </summary>
        /// <value>Validated postal code.</value>
        [DataMember(Name="PostalCode.Input", EmitDefaultValue=false)]
        public string PostalCodeInput { get; set; }

        /// <summary>
        /// Country. Format is determined by what you selected in OutputCountryFormat.
        /// </summary>
        /// <value>Country. Format is determined by what you selected in OutputCountryFormat.</value>
        [DataMember(Name="Country.Input", EmitDefaultValue=false)]
        public string CountryInput { get; set; }

        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="FirmName.Input", EmitDefaultValue=false)]
        public string FirmNameInput { get; set; }

        /// <summary>
        /// The field-level result indicator for HouseNumber.
        /// </summary>
        /// <value>The field-level result indicator for HouseNumber.</value>
        [DataMember(Name="HouseNumber.Result", EmitDefaultValue=false)]
        public string HouseNumberResult { get; set; }

        /// <summary>
        /// The field-level result indicator for LeadingDirectional.
        /// </summary>
        /// <value>The field-level result indicator for LeadingDirectional.</value>
        [DataMember(Name="LeadingDirectional.Result", EmitDefaultValue=false)]
        public string LeadingDirectionalResult { get; set; }

        /// <summary>
        /// The field-level result indicator for Street.
        /// </summary>
        /// <value>The field-level result indicator for Street.</value>
        [DataMember(Name="Street.Result", EmitDefaultValue=false)]
        public string StreetResult { get; set; }

        /// <summary>
        /// The field-level result indicator for StreetName.
        /// </summary>
        /// <value>The field-level result indicator for StreetName.</value>
        [DataMember(Name="StreetName.Result", EmitDefaultValue=false)]
        public string StreetNameResult { get; set; }

        /// <summary>
        /// The field-level result indicator for StreetName Alias.
        /// </summary>
        /// <value>The field-level result indicator for StreetName Alias.</value>
        [DataMember(Name="StreetName.Alias.Type", EmitDefaultValue=false)]
        public string StreetNameAliasType { get; set; }

        /// <summary>
        /// The field-level result indicator for StreetSuffix.
        /// </summary>
        /// <value>The field-level result indicator for StreetSuffix.</value>
        [DataMember(Name="StreetSuffix.Result", EmitDefaultValue=false)]
        public string StreetSuffixResult { get; set; }

        /// <summary>
        /// The field-level result indicator for TrailingDirectional.
        /// </summary>
        /// <value>The field-level result indicator for TrailingDirectional.</value>
        [DataMember(Name="TrailingDirectional.Result", EmitDefaultValue=false)]
        public string TrailingDirectionalResult { get; set; }

        /// <summary>
        /// The field-level result indicator for ApartmentLabel.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentLabel.</value>
        [DataMember(Name="ApartmentLabel.Result", EmitDefaultValue=false)]
        public string ApartmentLabelResult { get; set; }

        /// <summary>
        /// The field-level result indicator for ApartmentNumber.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentNumber.</value>
        [DataMember(Name="ApartmentNumber.Result", EmitDefaultValue=false)]
        public string ApartmentNumberResult { get; set; }

        /// <summary>
        /// The field-level result indicator for ApartmentLabel2.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentLabel2.</value>
        [DataMember(Name="ApartmentLabel2.Result", EmitDefaultValue=false)]
        public string ApartmentLabel2Result { get; set; }

        /// <summary>
        /// The field-level result indicator for ApartmentNumber2.
        /// </summary>
        /// <value>The field-level result indicator for ApartmentNumber2.</value>
        [DataMember(Name="ApartmentNumber2.Result", EmitDefaultValue=false)]
        public string ApartmentNumber2Result { get; set; }

        /// <summary>
        /// The field-level result indicator for RRHC.
        /// </summary>
        /// <value>The field-level result indicator for RRHC.</value>
        [DataMember(Name="RRHC.Result", EmitDefaultValue=false)]
        public string RRHCResult { get; set; }

        /// <summary>
        /// The field-level result indicator for RRHC Type.
        /// </summary>
        /// <value>The field-level result indicator for RRHC Type.</value>
        [DataMember(Name="RRHC.Type", EmitDefaultValue=false)]
        public string RRHCType { get; set; }

        /// <summary>
        /// The field-level result indicator for POBox.
        /// </summary>
        /// <value>The field-level result indicator for POBox.</value>
        [DataMember(Name="POBox.Result", EmitDefaultValue=false)]
        public string POBoxResult { get; set; }

        /// <summary>
        /// The field-level result indicator for City.
        /// </summary>
        /// <value>The field-level result indicator for City.</value>
        [DataMember(Name="City.Result", EmitDefaultValue=false)]
        public string CityResult { get; set; }

        /// <summary>
        /// The field-level result indicator for StateProvince.
        /// </summary>
        /// <value>The field-level result indicator for StateProvince.</value>
        [DataMember(Name="StateProvince.Result", EmitDefaultValue=false)]
        public string StateProvinceResult { get; set; }

        /// <summary>
        /// The field-level result indicator for PostalCode.
        /// </summary>
        /// <value>The field-level result indicator for PostalCode.</value>
        [DataMember(Name="PostalCode.Result", EmitDefaultValue=false)]
        public string PostalCodeResult { get; set; }

        /// <summary>
        /// The field-level result indicator for PostalCodeCity.
        /// </summary>
        /// <value>The field-level result indicator for PostalCodeCity.</value>
        [DataMember(Name="PostalCodeCity.Result", EmitDefaultValue=false)]
        public string PostalCodeCityResult { get; set; }

        /// <summary>
        /// The field-level result indicator for AddressRecord.
        /// </summary>
        /// <value>The field-level result indicator for AddressRecord.</value>
        [DataMember(Name="AddressRecord.Result", EmitDefaultValue=false)]
        public string AddressRecordResult { get; set; }

        /// <summary>
        /// The field-level result indicator for PostalCode Source.
        /// </summary>
        /// <value>The field-level result indicator for PostalCode Source.</value>
        [DataMember(Name="PostalCode.Source", EmitDefaultValue=false)]
        public string PostalCodeSource { get; set; }

        /// <summary>
        /// Indicates the type of postal code returned.
        /// </summary>
        /// <value>Indicates the type of postal code returned.</value>
        [DataMember(Name="PostalCode.Type", EmitDefaultValue=false)]
        public string PostalCodeType { get; set; }

        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="Country.Result", EmitDefaultValue=false)]
        public string CountryResult { get; set; }

        /// <summary>
        /// Indicates if the firm name got validated.
        /// </summary>
        /// <value>Indicates if the firm name got validated.</value>
        [DataMember(Name="FirmName.Result", EmitDefaultValue=false)]
        public string FirmNameResult { get; set; }

        /// <summary>
        /// Indicates the result of preferred alias processing.
        /// </summary>
        /// <value>Indicates the result of preferred alias processing.</value>
        [DataMember(Name="StreetNamePreferredAlias.Result", EmitDefaultValue=false)]
        public string StreetNamePreferredAliasResult { get; set; }

        /// <summary>
        /// Indicates the result of abbreviated alias processing.
        /// </summary>
        /// <value>Indicates the result of abbreviated alias processing.</value>
        [DataMember(Name="StreetNameAbbreviatedAlias.Result", EmitDefaultValue=false)]
        public string StreetNameAbbreviatedAliasResult { get; set; }

        /// <summary>
        /// The fifth line of the validated address.
        /// </summary>
        /// <value>The fifth line of the validated address.</value>
        [DataMember(Name="AddressLine5", EmitDefaultValue=false)]
        public string AddressLine5 { get; set; }

        /// <summary>
        /// A two character code indicating overall quality of the resulting address.
        /// </summary>
        /// <value>A two character code indicating overall quality of the resulting address.</value>
        [DataMember(Name="AddressQuality", EmitDefaultValue=false)]
        public string AddressQuality { get; set; }

        /// <summary>
        /// An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.
        /// </summary>
        /// <value>An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.</value>
        [DataMember(Name="Deliverability", EmitDefaultValue=false)]
        public string Deliverability { get; set; }

        /// <summary>
        /// A single letter code that indicates the type of address.
        /// </summary>
        /// <value>A single letter code that indicates the type of address.</value>
        [DataMember(Name="AddressType", EmitDefaultValue=false)]
        public string AddressType { get; set; }

        /// <summary>
        /// A locality is a village in rural areas or it may be a suburb in urban areas.
        /// </summary>
        /// <value>A locality is a village in rural areas or it may be a suburb in urban areas.</value>
        [DataMember(Name="Locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// A value of 0 and 100 that reflects how much the address has changed to make it valid.
        /// </summary>
        /// <value>A value of 0 and 100 that reflects how much the address has changed to make it valid.</value>
        [DataMember(Name="ChangeScore", EmitDefaultValue=false)]
        public string ChangeScore { get; set; }

        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="Suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }

        /// <summary>
        /// It is the formatted address, as it would appear on a physical mail piece.
        /// </summary>
        /// <value>It is the formatted address, as it would appear on a physical mail piece.</value>
        [DataMember(Name="BlockAddress", EmitDefaultValue=false)]
        public string BlockAddress { get; set; }

        /// <summary>
        /// Seven-digit number in degrees, calculated to four decimal places.
        /// </summary>
        /// <value>Seven-digit number in degrees, calculated to four decimal places.</value>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }

        /// <summary>
        /// Seven-digit number in degrees, calculated to four decimal places.
        /// </summary>
        /// <value>Seven-digit number in degrees, calculated to four decimal places.</value>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressPremiumOutput {\n");
            sb.Append("  UserFields: ").Append(UserFields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  RecordTypeDefault: ").Append(RecordTypeDefault).Append("\n");
            sb.Append("  MultipleMatches: ").Append(MultipleMatches).Append("\n");
            sb.Append("  CouldNotValidate: ").Append(CouldNotValidate).Append("\n");
            sb.Append("  CountryLevel: ").Append(CountryLevel).Append("\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PostalCodeBase: ").Append(PostalCodeBase).Append("\n");
            sb.Append("  PostalCodeAddOn: ").Append(PostalCodeAddOn).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AdditionalInputData: ").Append(AdditionalInputData).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  LeadingDirectional: ").Append(LeadingDirectional).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  TrailingDirectional: ").Append(TrailingDirectional).Append("\n");
            sb.Append("  ApartmentLabel: ").Append(ApartmentLabel).Append("\n");
            sb.Append("  ApartmentNumber: ").Append(ApartmentNumber).Append("\n");
            sb.Append("  ApartmentLabel2: ").Append(ApartmentLabel2).Append("\n");
            sb.Append("  ApartmentNumber2: ").Append(ApartmentNumber2).Append("\n");
            sb.Append("  RRHC: ").Append(RRHC).Append("\n");
            sb.Append("  POBox: ").Append(POBox).Append("\n");
            sb.Append("  PrivateMailbox: ").Append(PrivateMailbox).Append("\n");
            sb.Append("  PrivateMailboxType: ").Append(PrivateMailboxType).Append("\n");
            sb.Append("  HouseNumberInput: ").Append(HouseNumberInput).Append("\n");
            sb.Append("  LeadingDirectionalInput: ").Append(LeadingDirectionalInput).Append("\n");
            sb.Append("  StreetNameInput: ").Append(StreetNameInput).Append("\n");
            sb.Append("  StreetSuffixInput: ").Append(StreetSuffixInput).Append("\n");
            sb.Append("  TrailingDirectionalInput: ").Append(TrailingDirectionalInput).Append("\n");
            sb.Append("  ApartmentLabelInput: ").Append(ApartmentLabelInput).Append("\n");
            sb.Append("  ApartmentNumberInput: ").Append(ApartmentNumberInput).Append("\n");
            sb.Append("  RRHCInput: ").Append(RRHCInput).Append("\n");
            sb.Append("  POBoxInput: ").Append(POBoxInput).Append("\n");
            sb.Append("  PrivateMailboxInput: ").Append(PrivateMailboxInput).Append("\n");
            sb.Append("  PrivateMailboxTypeInput: ").Append(PrivateMailboxTypeInput).Append("\n");
            sb.Append("  CityInput: ").Append(CityInput).Append("\n");
            sb.Append("  StateProvinceInput: ").Append(StateProvinceInput).Append("\n");
            sb.Append("  PostalCodeInput: ").Append(PostalCodeInput).Append("\n");
            sb.Append("  CountryInput: ").Append(CountryInput).Append("\n");
            sb.Append("  FirmNameInput: ").Append(FirmNameInput).Append("\n");
            sb.Append("  HouseNumberResult: ").Append(HouseNumberResult).Append("\n");
            sb.Append("  LeadingDirectionalResult: ").Append(LeadingDirectionalResult).Append("\n");
            sb.Append("  StreetResult: ").Append(StreetResult).Append("\n");
            sb.Append("  StreetNameResult: ").Append(StreetNameResult).Append("\n");
            sb.Append("  StreetNameAliasType: ").Append(StreetNameAliasType).Append("\n");
            sb.Append("  StreetSuffixResult: ").Append(StreetSuffixResult).Append("\n");
            sb.Append("  TrailingDirectionalResult: ").Append(TrailingDirectionalResult).Append("\n");
            sb.Append("  ApartmentLabelResult: ").Append(ApartmentLabelResult).Append("\n");
            sb.Append("  ApartmentNumberResult: ").Append(ApartmentNumberResult).Append("\n");
            sb.Append("  ApartmentLabel2Result: ").Append(ApartmentLabel2Result).Append("\n");
            sb.Append("  ApartmentNumber2Result: ").Append(ApartmentNumber2Result).Append("\n");
            sb.Append("  RRHCResult: ").Append(RRHCResult).Append("\n");
            sb.Append("  RRHCType: ").Append(RRHCType).Append("\n");
            sb.Append("  POBoxResult: ").Append(POBoxResult).Append("\n");
            sb.Append("  CityResult: ").Append(CityResult).Append("\n");
            sb.Append("  StateProvinceResult: ").Append(StateProvinceResult).Append("\n");
            sb.Append("  PostalCodeResult: ").Append(PostalCodeResult).Append("\n");
            sb.Append("  PostalCodeCityResult: ").Append(PostalCodeCityResult).Append("\n");
            sb.Append("  AddressRecordResult: ").Append(AddressRecordResult).Append("\n");
            sb.Append("  PostalCodeSource: ").Append(PostalCodeSource).Append("\n");
            sb.Append("  PostalCodeType: ").Append(PostalCodeType).Append("\n");
            sb.Append("  CountryResult: ").Append(CountryResult).Append("\n");
            sb.Append("  FirmNameResult: ").Append(FirmNameResult).Append("\n");
            sb.Append("  StreetNamePreferredAliasResult: ").Append(StreetNamePreferredAliasResult).Append("\n");
            sb.Append("  StreetNameAbbreviatedAliasResult: ").Append(StreetNameAbbreviatedAliasResult).Append("\n");
            sb.Append("  AddressLine5: ").Append(AddressLine5).Append("\n");
            sb.Append("  AddressQuality: ").Append(AddressQuality).Append("\n");
            sb.Append("  Deliverability: ").Append(Deliverability).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  ChangeScore: ").Append(ChangeScore).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  BlockAddress: ").Append(BlockAddress).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateMailingAddressPremiumOutput);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressPremiumOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateMailingAddressPremiumOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressPremiumOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserFields == input.UserFields ||
                    this.UserFields != null &&
                    input.UserFields != null &&
                    this.UserFields.SequenceEqual(input.UserFields)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.RecordTypeDefault == input.RecordTypeDefault ||
                    (this.RecordTypeDefault != null &&
                    this.RecordTypeDefault.Equals(input.RecordTypeDefault))
                ) && 
                (
                    this.MultipleMatches == input.MultipleMatches ||
                    (this.MultipleMatches != null &&
                    this.MultipleMatches.Equals(input.MultipleMatches))
                ) && 
                (
                    this.CouldNotValidate == input.CouldNotValidate ||
                    (this.CouldNotValidate != null &&
                    this.CouldNotValidate.Equals(input.CouldNotValidate))
                ) && 
                (
                    this.CountryLevel == input.CountryLevel ||
                    (this.CountryLevel != null &&
                    this.CountryLevel.Equals(input.CountryLevel))
                ) && 
                (
                    this.AddressFormat == input.AddressFormat ||
                    (this.AddressFormat != null &&
                    this.AddressFormat.Equals(input.AddressFormat))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.AddressLine4 == input.AddressLine4 ||
                    (this.AddressLine4 != null &&
                    this.AddressLine4.Equals(input.AddressLine4))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PostalCodeBase == input.PostalCodeBase ||
                    (this.PostalCodeBase != null &&
                    this.PostalCodeBase.Equals(input.PostalCodeBase))
                ) && 
                (
                    this.PostalCodeAddOn == input.PostalCodeAddOn ||
                    (this.PostalCodeAddOn != null &&
                    this.PostalCodeAddOn.Equals(input.PostalCodeAddOn))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.AdditionalInputData == input.AdditionalInputData ||
                    (this.AdditionalInputData != null &&
                    this.AdditionalInputData.Equals(input.AdditionalInputData))
                ) && 
                (
                    this.FirmName == input.FirmName ||
                    (this.FirmName != null &&
                    this.FirmName.Equals(input.FirmName))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                ) && 
                (
                    this.LeadingDirectional == input.LeadingDirectional ||
                    (this.LeadingDirectional != null &&
                    this.LeadingDirectional.Equals(input.LeadingDirectional))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.TrailingDirectional == input.TrailingDirectional ||
                    (this.TrailingDirectional != null &&
                    this.TrailingDirectional.Equals(input.TrailingDirectional))
                ) && 
                (
                    this.ApartmentLabel == input.ApartmentLabel ||
                    (this.ApartmentLabel != null &&
                    this.ApartmentLabel.Equals(input.ApartmentLabel))
                ) && 
                (
                    this.ApartmentNumber == input.ApartmentNumber ||
                    (this.ApartmentNumber != null &&
                    this.ApartmentNumber.Equals(input.ApartmentNumber))
                ) && 
                (
                    this.ApartmentLabel2 == input.ApartmentLabel2 ||
                    (this.ApartmentLabel2 != null &&
                    this.ApartmentLabel2.Equals(input.ApartmentLabel2))
                ) && 
                (
                    this.ApartmentNumber2 == input.ApartmentNumber2 ||
                    (this.ApartmentNumber2 != null &&
                    this.ApartmentNumber2.Equals(input.ApartmentNumber2))
                ) && 
                (
                    this.RRHC == input.RRHC ||
                    (this.RRHC != null &&
                    this.RRHC.Equals(input.RRHC))
                ) && 
                (
                    this.POBox == input.POBox ||
                    (this.POBox != null &&
                    this.POBox.Equals(input.POBox))
                ) && 
                (
                    this.PrivateMailbox == input.PrivateMailbox ||
                    (this.PrivateMailbox != null &&
                    this.PrivateMailbox.Equals(input.PrivateMailbox))
                ) && 
                (
                    this.PrivateMailboxType == input.PrivateMailboxType ||
                    (this.PrivateMailboxType != null &&
                    this.PrivateMailboxType.Equals(input.PrivateMailboxType))
                ) && 
                (
                    this.HouseNumberInput == input.HouseNumberInput ||
                    (this.HouseNumberInput != null &&
                    this.HouseNumberInput.Equals(input.HouseNumberInput))
                ) && 
                (
                    this.LeadingDirectionalInput == input.LeadingDirectionalInput ||
                    (this.LeadingDirectionalInput != null &&
                    this.LeadingDirectionalInput.Equals(input.LeadingDirectionalInput))
                ) && 
                (
                    this.StreetNameInput == input.StreetNameInput ||
                    (this.StreetNameInput != null &&
                    this.StreetNameInput.Equals(input.StreetNameInput))
                ) && 
                (
                    this.StreetSuffixInput == input.StreetSuffixInput ||
                    (this.StreetSuffixInput != null &&
                    this.StreetSuffixInput.Equals(input.StreetSuffixInput))
                ) && 
                (
                    this.TrailingDirectionalInput == input.TrailingDirectionalInput ||
                    (this.TrailingDirectionalInput != null &&
                    this.TrailingDirectionalInput.Equals(input.TrailingDirectionalInput))
                ) && 
                (
                    this.ApartmentLabelInput == input.ApartmentLabelInput ||
                    (this.ApartmentLabelInput != null &&
                    this.ApartmentLabelInput.Equals(input.ApartmentLabelInput))
                ) && 
                (
                    this.ApartmentNumberInput == input.ApartmentNumberInput ||
                    (this.ApartmentNumberInput != null &&
                    this.ApartmentNumberInput.Equals(input.ApartmentNumberInput))
                ) && 
                (
                    this.RRHCInput == input.RRHCInput ||
                    (this.RRHCInput != null &&
                    this.RRHCInput.Equals(input.RRHCInput))
                ) && 
                (
                    this.POBoxInput == input.POBoxInput ||
                    (this.POBoxInput != null &&
                    this.POBoxInput.Equals(input.POBoxInput))
                ) && 
                (
                    this.PrivateMailboxInput == input.PrivateMailboxInput ||
                    (this.PrivateMailboxInput != null &&
                    this.PrivateMailboxInput.Equals(input.PrivateMailboxInput))
                ) && 
                (
                    this.PrivateMailboxTypeInput == input.PrivateMailboxTypeInput ||
                    (this.PrivateMailboxTypeInput != null &&
                    this.PrivateMailboxTypeInput.Equals(input.PrivateMailboxTypeInput))
                ) && 
                (
                    this.CityInput == input.CityInput ||
                    (this.CityInput != null &&
                    this.CityInput.Equals(input.CityInput))
                ) && 
                (
                    this.StateProvinceInput == input.StateProvinceInput ||
                    (this.StateProvinceInput != null &&
                    this.StateProvinceInput.Equals(input.StateProvinceInput))
                ) && 
                (
                    this.PostalCodeInput == input.PostalCodeInput ||
                    (this.PostalCodeInput != null &&
                    this.PostalCodeInput.Equals(input.PostalCodeInput))
                ) && 
                (
                    this.CountryInput == input.CountryInput ||
                    (this.CountryInput != null &&
                    this.CountryInput.Equals(input.CountryInput))
                ) && 
                (
                    this.FirmNameInput == input.FirmNameInput ||
                    (this.FirmNameInput != null &&
                    this.FirmNameInput.Equals(input.FirmNameInput))
                ) && 
                (
                    this.HouseNumberResult == input.HouseNumberResult ||
                    (this.HouseNumberResult != null &&
                    this.HouseNumberResult.Equals(input.HouseNumberResult))
                ) && 
                (
                    this.LeadingDirectionalResult == input.LeadingDirectionalResult ||
                    (this.LeadingDirectionalResult != null &&
                    this.LeadingDirectionalResult.Equals(input.LeadingDirectionalResult))
                ) && 
                (
                    this.StreetResult == input.StreetResult ||
                    (this.StreetResult != null &&
                    this.StreetResult.Equals(input.StreetResult))
                ) && 
                (
                    this.StreetNameResult == input.StreetNameResult ||
                    (this.StreetNameResult != null &&
                    this.StreetNameResult.Equals(input.StreetNameResult))
                ) && 
                (
                    this.StreetNameAliasType == input.StreetNameAliasType ||
                    (this.StreetNameAliasType != null &&
                    this.StreetNameAliasType.Equals(input.StreetNameAliasType))
                ) && 
                (
                    this.StreetSuffixResult == input.StreetSuffixResult ||
                    (this.StreetSuffixResult != null &&
                    this.StreetSuffixResult.Equals(input.StreetSuffixResult))
                ) && 
                (
                    this.TrailingDirectionalResult == input.TrailingDirectionalResult ||
                    (this.TrailingDirectionalResult != null &&
                    this.TrailingDirectionalResult.Equals(input.TrailingDirectionalResult))
                ) && 
                (
                    this.ApartmentLabelResult == input.ApartmentLabelResult ||
                    (this.ApartmentLabelResult != null &&
                    this.ApartmentLabelResult.Equals(input.ApartmentLabelResult))
                ) && 
                (
                    this.ApartmentNumberResult == input.ApartmentNumberResult ||
                    (this.ApartmentNumberResult != null &&
                    this.ApartmentNumberResult.Equals(input.ApartmentNumberResult))
                ) && 
                (
                    this.ApartmentLabel2Result == input.ApartmentLabel2Result ||
                    (this.ApartmentLabel2Result != null &&
                    this.ApartmentLabel2Result.Equals(input.ApartmentLabel2Result))
                ) && 
                (
                    this.ApartmentNumber2Result == input.ApartmentNumber2Result ||
                    (this.ApartmentNumber2Result != null &&
                    this.ApartmentNumber2Result.Equals(input.ApartmentNumber2Result))
                ) && 
                (
                    this.RRHCResult == input.RRHCResult ||
                    (this.RRHCResult != null &&
                    this.RRHCResult.Equals(input.RRHCResult))
                ) && 
                (
                    this.RRHCType == input.RRHCType ||
                    (this.RRHCType != null &&
                    this.RRHCType.Equals(input.RRHCType))
                ) && 
                (
                    this.POBoxResult == input.POBoxResult ||
                    (this.POBoxResult != null &&
                    this.POBoxResult.Equals(input.POBoxResult))
                ) && 
                (
                    this.CityResult == input.CityResult ||
                    (this.CityResult != null &&
                    this.CityResult.Equals(input.CityResult))
                ) && 
                (
                    this.StateProvinceResult == input.StateProvinceResult ||
                    (this.StateProvinceResult != null &&
                    this.StateProvinceResult.Equals(input.StateProvinceResult))
                ) && 
                (
                    this.PostalCodeResult == input.PostalCodeResult ||
                    (this.PostalCodeResult != null &&
                    this.PostalCodeResult.Equals(input.PostalCodeResult))
                ) && 
                (
                    this.PostalCodeCityResult == input.PostalCodeCityResult ||
                    (this.PostalCodeCityResult != null &&
                    this.PostalCodeCityResult.Equals(input.PostalCodeCityResult))
                ) && 
                (
                    this.AddressRecordResult == input.AddressRecordResult ||
                    (this.AddressRecordResult != null &&
                    this.AddressRecordResult.Equals(input.AddressRecordResult))
                ) && 
                (
                    this.PostalCodeSource == input.PostalCodeSource ||
                    (this.PostalCodeSource != null &&
                    this.PostalCodeSource.Equals(input.PostalCodeSource))
                ) && 
                (
                    this.PostalCodeType == input.PostalCodeType ||
                    (this.PostalCodeType != null &&
                    this.PostalCodeType.Equals(input.PostalCodeType))
                ) && 
                (
                    this.CountryResult == input.CountryResult ||
                    (this.CountryResult != null &&
                    this.CountryResult.Equals(input.CountryResult))
                ) && 
                (
                    this.FirmNameResult == input.FirmNameResult ||
                    (this.FirmNameResult != null &&
                    this.FirmNameResult.Equals(input.FirmNameResult))
                ) && 
                (
                    this.StreetNamePreferredAliasResult == input.StreetNamePreferredAliasResult ||
                    (this.StreetNamePreferredAliasResult != null &&
                    this.StreetNamePreferredAliasResult.Equals(input.StreetNamePreferredAliasResult))
                ) && 
                (
                    this.StreetNameAbbreviatedAliasResult == input.StreetNameAbbreviatedAliasResult ||
                    (this.StreetNameAbbreviatedAliasResult != null &&
                    this.StreetNameAbbreviatedAliasResult.Equals(input.StreetNameAbbreviatedAliasResult))
                ) && 
                (
                    this.AddressLine5 == input.AddressLine5 ||
                    (this.AddressLine5 != null &&
                    this.AddressLine5.Equals(input.AddressLine5))
                ) && 
                (
                    this.AddressQuality == input.AddressQuality ||
                    (this.AddressQuality != null &&
                    this.AddressQuality.Equals(input.AddressQuality))
                ) && 
                (
                    this.Deliverability == input.Deliverability ||
                    (this.Deliverability != null &&
                    this.Deliverability.Equals(input.Deliverability))
                ) && 
                (
                    this.AddressType == input.AddressType ||
                    (this.AddressType != null &&
                    this.AddressType.Equals(input.AddressType))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.ChangeScore == input.ChangeScore ||
                    (this.ChangeScore != null &&
                    this.ChangeScore.Equals(input.ChangeScore))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.BlockAddress == input.BlockAddress ||
                    (this.BlockAddress != null &&
                    this.BlockAddress.Equals(input.BlockAddress))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserFields != null)
                    hashCode = hashCode * 59 + this.UserFields.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hashCode = hashCode * 59 + this.StatusDescription.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.RecordType != null)
                    hashCode = hashCode * 59 + this.RecordType.GetHashCode();
                if (this.RecordTypeDefault != null)
                    hashCode = hashCode * 59 + this.RecordTypeDefault.GetHashCode();
                if (this.MultipleMatches != null)
                    hashCode = hashCode * 59 + this.MultipleMatches.GetHashCode();
                if (this.CouldNotValidate != null)
                    hashCode = hashCode * 59 + this.CouldNotValidate.GetHashCode();
                if (this.CountryLevel != null)
                    hashCode = hashCode * 59 + this.CountryLevel.GetHashCode();
                if (this.AddressFormat != null)
                    hashCode = hashCode * 59 + this.AddressFormat.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressLine4 != null)
                    hashCode = hashCode * 59 + this.AddressLine4.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.PostalCodeBase != null)
                    hashCode = hashCode * 59 + this.PostalCodeBase.GetHashCode();
                if (this.PostalCodeAddOn != null)
                    hashCode = hashCode * 59 + this.PostalCodeAddOn.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.AdditionalInputData != null)
                    hashCode = hashCode * 59 + this.AdditionalInputData.GetHashCode();
                if (this.FirmName != null)
                    hashCode = hashCode * 59 + this.FirmName.GetHashCode();
                if (this.HouseNumber != null)
                    hashCode = hashCode * 59 + this.HouseNumber.GetHashCode();
                if (this.LeadingDirectional != null)
                    hashCode = hashCode * 59 + this.LeadingDirectional.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.TrailingDirectional != null)
                    hashCode = hashCode * 59 + this.TrailingDirectional.GetHashCode();
                if (this.ApartmentLabel != null)
                    hashCode = hashCode * 59 + this.ApartmentLabel.GetHashCode();
                if (this.ApartmentNumber != null)
                    hashCode = hashCode * 59 + this.ApartmentNumber.GetHashCode();
                if (this.ApartmentLabel2 != null)
                    hashCode = hashCode * 59 + this.ApartmentLabel2.GetHashCode();
                if (this.ApartmentNumber2 != null)
                    hashCode = hashCode * 59 + this.ApartmentNumber2.GetHashCode();
                if (this.RRHC != null)
                    hashCode = hashCode * 59 + this.RRHC.GetHashCode();
                if (this.POBox != null)
                    hashCode = hashCode * 59 + this.POBox.GetHashCode();
                if (this.PrivateMailbox != null)
                    hashCode = hashCode * 59 + this.PrivateMailbox.GetHashCode();
                if (this.PrivateMailboxType != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxType.GetHashCode();
                if (this.HouseNumberInput != null)
                    hashCode = hashCode * 59 + this.HouseNumberInput.GetHashCode();
                if (this.LeadingDirectionalInput != null)
                    hashCode = hashCode * 59 + this.LeadingDirectionalInput.GetHashCode();
                if (this.StreetNameInput != null)
                    hashCode = hashCode * 59 + this.StreetNameInput.GetHashCode();
                if (this.StreetSuffixInput != null)
                    hashCode = hashCode * 59 + this.StreetSuffixInput.GetHashCode();
                if (this.TrailingDirectionalInput != null)
                    hashCode = hashCode * 59 + this.TrailingDirectionalInput.GetHashCode();
                if (this.ApartmentLabelInput != null)
                    hashCode = hashCode * 59 + this.ApartmentLabelInput.GetHashCode();
                if (this.ApartmentNumberInput != null)
                    hashCode = hashCode * 59 + this.ApartmentNumberInput.GetHashCode();
                if (this.RRHCInput != null)
                    hashCode = hashCode * 59 + this.RRHCInput.GetHashCode();
                if (this.POBoxInput != null)
                    hashCode = hashCode * 59 + this.POBoxInput.GetHashCode();
                if (this.PrivateMailboxInput != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxInput.GetHashCode();
                if (this.PrivateMailboxTypeInput != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxTypeInput.GetHashCode();
                if (this.CityInput != null)
                    hashCode = hashCode * 59 + this.CityInput.GetHashCode();
                if (this.StateProvinceInput != null)
                    hashCode = hashCode * 59 + this.StateProvinceInput.GetHashCode();
                if (this.PostalCodeInput != null)
                    hashCode = hashCode * 59 + this.PostalCodeInput.GetHashCode();
                if (this.CountryInput != null)
                    hashCode = hashCode * 59 + this.CountryInput.GetHashCode();
                if (this.FirmNameInput != null)
                    hashCode = hashCode * 59 + this.FirmNameInput.GetHashCode();
                if (this.HouseNumberResult != null)
                    hashCode = hashCode * 59 + this.HouseNumberResult.GetHashCode();
                if (this.LeadingDirectionalResult != null)
                    hashCode = hashCode * 59 + this.LeadingDirectionalResult.GetHashCode();
                if (this.StreetResult != null)
                    hashCode = hashCode * 59 + this.StreetResult.GetHashCode();
                if (this.StreetNameResult != null)
                    hashCode = hashCode * 59 + this.StreetNameResult.GetHashCode();
                if (this.StreetNameAliasType != null)
                    hashCode = hashCode * 59 + this.StreetNameAliasType.GetHashCode();
                if (this.StreetSuffixResult != null)
                    hashCode = hashCode * 59 + this.StreetSuffixResult.GetHashCode();
                if (this.TrailingDirectionalResult != null)
                    hashCode = hashCode * 59 + this.TrailingDirectionalResult.GetHashCode();
                if (this.ApartmentLabelResult != null)
                    hashCode = hashCode * 59 + this.ApartmentLabelResult.GetHashCode();
                if (this.ApartmentNumberResult != null)
                    hashCode = hashCode * 59 + this.ApartmentNumberResult.GetHashCode();
                if (this.ApartmentLabel2Result != null)
                    hashCode = hashCode * 59 + this.ApartmentLabel2Result.GetHashCode();
                if (this.ApartmentNumber2Result != null)
                    hashCode = hashCode * 59 + this.ApartmentNumber2Result.GetHashCode();
                if (this.RRHCResult != null)
                    hashCode = hashCode * 59 + this.RRHCResult.GetHashCode();
                if (this.RRHCType != null)
                    hashCode = hashCode * 59 + this.RRHCType.GetHashCode();
                if (this.POBoxResult != null)
                    hashCode = hashCode * 59 + this.POBoxResult.GetHashCode();
                if (this.CityResult != null)
                    hashCode = hashCode * 59 + this.CityResult.GetHashCode();
                if (this.StateProvinceResult != null)
                    hashCode = hashCode * 59 + this.StateProvinceResult.GetHashCode();
                if (this.PostalCodeResult != null)
                    hashCode = hashCode * 59 + this.PostalCodeResult.GetHashCode();
                if (this.PostalCodeCityResult != null)
                    hashCode = hashCode * 59 + this.PostalCodeCityResult.GetHashCode();
                if (this.AddressRecordResult != null)
                    hashCode = hashCode * 59 + this.AddressRecordResult.GetHashCode();
                if (this.PostalCodeSource != null)
                    hashCode = hashCode * 59 + this.PostalCodeSource.GetHashCode();
                if (this.PostalCodeType != null)
                    hashCode = hashCode * 59 + this.PostalCodeType.GetHashCode();
                if (this.CountryResult != null)
                    hashCode = hashCode * 59 + this.CountryResult.GetHashCode();
                if (this.FirmNameResult != null)
                    hashCode = hashCode * 59 + this.FirmNameResult.GetHashCode();
                if (this.StreetNamePreferredAliasResult != null)
                    hashCode = hashCode * 59 + this.StreetNamePreferredAliasResult.GetHashCode();
                if (this.StreetNameAbbreviatedAliasResult != null)
                    hashCode = hashCode * 59 + this.StreetNameAbbreviatedAliasResult.GetHashCode();
                if (this.AddressLine5 != null)
                    hashCode = hashCode * 59 + this.AddressLine5.GetHashCode();
                if (this.AddressQuality != null)
                    hashCode = hashCode * 59 + this.AddressQuality.GetHashCode();
                if (this.Deliverability != null)
                    hashCode = hashCode * 59 + this.Deliverability.GetHashCode();
                if (this.AddressType != null)
                    hashCode = hashCode * 59 + this.AddressType.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.ChangeScore != null)
                    hashCode = hashCode * 59 + this.ChangeScore.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.BlockAddress != null)
                    hashCode = hashCode * 59 + this.BlockAddress.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
