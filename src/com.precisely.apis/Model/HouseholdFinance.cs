/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// HouseholdFinance
    /// </summary>
    [DataContract]
    public partial class HouseholdFinance :  IEquatable<HouseholdFinance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HouseholdFinance" /> class.
        /// </summary>
        /// <param name="AverageIncome">AverageIncome.</param>
        /// <param name="AverageAssets">AverageAssets.</param>
        /// <param name="AverageWealth">AverageWealth.</param>
        /// <param name="Boundary">Boundary.</param>
        public HouseholdFinance(string AverageIncome = null, string AverageAssets = null, string AverageWealth = null, Boundary Boundary = null)
        {
            this.AverageIncome = AverageIncome;
            this.AverageAssets = AverageAssets;
            this.AverageWealth = AverageWealth;
            this.Boundary = Boundary;
        }
        
        /// <summary>
        /// Gets or Sets AverageIncome
        /// </summary>
        [DataMember(Name="averageIncome", EmitDefaultValue=false)]
        public string AverageIncome { get; set; }
        /// <summary>
        /// Gets or Sets AverageAssets
        /// </summary>
        [DataMember(Name="averageAssets", EmitDefaultValue=false)]
        public string AverageAssets { get; set; }
        /// <summary>
        /// Gets or Sets AverageWealth
        /// </summary>
        [DataMember(Name="averageWealth", EmitDefaultValue=false)]
        public string AverageWealth { get; set; }
        /// <summary>
        /// Gets or Sets Boundary
        /// </summary>
        [DataMember(Name="boundary", EmitDefaultValue=false)]
        public Boundary Boundary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HouseholdFinance {\n");
            sb.Append("  AverageIncome: ").Append(AverageIncome).Append("\n");
            sb.Append("  AverageAssets: ").Append(AverageAssets).Append("\n");
            sb.Append("  AverageWealth: ").Append(AverageWealth).Append("\n");
            sb.Append("  Boundary: ").Append(Boundary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HouseholdFinance);
        }

        /// <summary>
        /// Returns true if HouseholdFinance instances are equal
        /// </summary>
        /// <param name="other">Instance of HouseholdFinance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HouseholdFinance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AverageIncome == other.AverageIncome ||
                    this.AverageIncome != null &&
                    this.AverageIncome.Equals(other.AverageIncome)
                ) && 
                (
                    this.AverageAssets == other.AverageAssets ||
                    this.AverageAssets != null &&
                    this.AverageAssets.Equals(other.AverageAssets)
                ) && 
                (
                    this.AverageWealth == other.AverageWealth ||
                    this.AverageWealth != null &&
                    this.AverageWealth.Equals(other.AverageWealth)
                ) && 
                (
                    this.Boundary == other.Boundary ||
                    this.Boundary != null &&
                    this.Boundary.Equals(other.Boundary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AverageIncome != null)
                    hash = hash * 59 + this.AverageIncome.GetHashCode();
                if (this.AverageAssets != null)
                    hash = hash * 59 + this.AverageAssets.GetHashCode();
                if (this.AverageWealth != null)
                    hash = hash * 59 + this.AverageWealth.GetHashCode();
                if (this.Boundary != null)
                    hash = hash * 59 + this.Boundary.GetHashCode();
                return hash;
            }
        }
    }

}
