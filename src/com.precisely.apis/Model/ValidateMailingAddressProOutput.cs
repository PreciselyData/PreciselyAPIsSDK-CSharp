/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressProOutput
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressProOutput :  IEquatable<ValidateMailingAddressProOutput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressProOutput" /> class.
        /// </summary>
        /// <param name="UserFields">These fields are returned, unmodified, in the user_fields section of the response..</param>
        /// <param name="AddressLine1">The first line of the validated address..</param>
        /// <param name="AddressLine2">The second line of the validated address..</param>
        /// <param name="FirmName">The validated firm or company name..</param>
        /// <param name="ChangeScore">A value of 0 and 100 that reflects how much the address has changed to make it valid..</param>
        /// <param name="Locality">Generally a locality is a village in rural areas or it may be a suburb in urban areas..</param>
        /// <param name="Suburb">The suburb name..</param>
        /// <param name="AddressType">A single letter code that indicates the type of address..</param>
        /// <param name="Deliverability">An estimate of confidence that an item mailed or shipped to this address would be successfully delivered..</param>
        /// <param name="AddressQuality">A two character code indicating overall quality of the resulting address..</param>
        /// <param name="CouldNotValidate">Mentions the address component that could not be validated, in case no match is found..</param>
        /// <param name="City">The validated city name..</param>
        /// <param name="PostalCode">The validated ZIP Code or postal code..</param>
        /// <param name="Country">The country in the format determined by what you selected..</param>
        /// <param name="StateProvince">The validated state or province abbreviation..</param>
        /// <param name="BlockAddress">The formatted address, as it would appear on a physical mail piece..</param>
        /// <param name="AdditionalInputData">Input data that could not be matched to a particular address component..</param>
        /// <param name="PostalCodeBase">The 5-digit ZIP Code..</param>
        /// <param name="PostalCodeAddOn">The 4-digit add-on part of the ZIP Code..</param>
        /// <param name="Status">Reports the success or failure of the match attempt..</param>
        /// <param name="StatusCode">Reason for failure, if there is one..</param>
        /// <param name="StatusDescription">Description of the problem, if there is one..</param>
        public ValidateMailingAddressProOutput(List<ValidateMailingAddressInputRowUserFields> UserFields = null, string AddressLine1 = null, string AddressLine2 = null, string FirmName = null, string ChangeScore = null, string Locality = null, string Suburb = null, string AddressType = null, string Deliverability = null, string AddressQuality = null, string CouldNotValidate = null, string City = null, string PostalCode = null, string Country = null, string StateProvince = null, string BlockAddress = null, string AdditionalInputData = null, string PostalCodeBase = null, string PostalCodeAddOn = null, string Status = null, string StatusCode = null, string StatusDescription = null)
        {
            this.UserFields = UserFields;
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.FirmName = FirmName;
            this.ChangeScore = ChangeScore;
            this.Locality = Locality;
            this.Suburb = Suburb;
            this.AddressType = AddressType;
            this.Deliverability = Deliverability;
            this.AddressQuality = AddressQuality;
            this.CouldNotValidate = CouldNotValidate;
            this.City = City;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.StateProvince = StateProvince;
            this.BlockAddress = BlockAddress;
            this.AdditionalInputData = AdditionalInputData;
            this.PostalCodeBase = PostalCodeBase;
            this.PostalCodeAddOn = PostalCodeAddOn;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.StatusDescription = StatusDescription;
        }
        
        /// <summary>
        /// These fields are returned, unmodified, in the user_fields section of the response.
        /// </summary>
        /// <value>These fields are returned, unmodified, in the user_fields section of the response.</value>
        [DataMember(Name="user_fields", EmitDefaultValue=false)]
        public List<ValidateMailingAddressInputRowUserFields> UserFields { get; set; }
        /// <summary>
        /// The first line of the validated address.
        /// </summary>
        /// <value>The first line of the validated address.</value>
        [DataMember(Name="AddressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the validated address.
        /// </summary>
        /// <value>The second line of the validated address.</value>
        [DataMember(Name="AddressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The validated firm or company name.
        /// </summary>
        /// <value>The validated firm or company name.</value>
        [DataMember(Name="FirmName", EmitDefaultValue=false)]
        public string FirmName { get; set; }
        /// <summary>
        /// A value of 0 and 100 that reflects how much the address has changed to make it valid.
        /// </summary>
        /// <value>A value of 0 and 100 that reflects how much the address has changed to make it valid.</value>
        [DataMember(Name="ChangeScore", EmitDefaultValue=false)]
        public string ChangeScore { get; set; }
        /// <summary>
        /// Generally a locality is a village in rural areas or it may be a suburb in urban areas.
        /// </summary>
        /// <value>Generally a locality is a village in rural areas or it may be a suburb in urban areas.</value>
        [DataMember(Name="Locality", EmitDefaultValue=false)]
        public string Locality { get; set; }
        /// <summary>
        /// The suburb name.
        /// </summary>
        /// <value>The suburb name.</value>
        [DataMember(Name="Suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }
        /// <summary>
        /// A single letter code that indicates the type of address.
        /// </summary>
        /// <value>A single letter code that indicates the type of address.</value>
        [DataMember(Name="AddressType", EmitDefaultValue=false)]
        public string AddressType { get; set; }
        /// <summary>
        /// An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.
        /// </summary>
        /// <value>An estimate of confidence that an item mailed or shipped to this address would be successfully delivered.</value>
        [DataMember(Name="Deliverability", EmitDefaultValue=false)]
        public string Deliverability { get; set; }
        /// <summary>
        /// A two character code indicating overall quality of the resulting address.
        /// </summary>
        /// <value>A two character code indicating overall quality of the resulting address.</value>
        [DataMember(Name="AddressQuality", EmitDefaultValue=false)]
        public string AddressQuality { get; set; }
        /// <summary>
        /// Mentions the address component that could not be validated, in case no match is found.
        /// </summary>
        /// <value>Mentions the address component that could not be validated, in case no match is found.</value>
        [DataMember(Name="CouldNotValidate", EmitDefaultValue=false)]
        public string CouldNotValidate { get; set; }
        /// <summary>
        /// The validated city name.
        /// </summary>
        /// <value>The validated city name.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The validated ZIP Code or postal code.
        /// </summary>
        /// <value>The validated ZIP Code or postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The country in the format determined by what you selected.
        /// </summary>
        /// <value>The country in the format determined by what you selected.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The validated state or province abbreviation.
        /// </summary>
        /// <value>The validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }
        /// <summary>
        /// The formatted address, as it would appear on a physical mail piece.
        /// </summary>
        /// <value>The formatted address, as it would appear on a physical mail piece.</value>
        [DataMember(Name="BlockAddress", EmitDefaultValue=false)]
        public string BlockAddress { get; set; }
        /// <summary>
        /// Input data that could not be matched to a particular address component.
        /// </summary>
        /// <value>Input data that could not be matched to a particular address component.</value>
        [DataMember(Name="AdditionalInputData", EmitDefaultValue=false)]
        public string AdditionalInputData { get; set; }
        /// <summary>
        /// The 5-digit ZIP Code.
        /// </summary>
        /// <value>The 5-digit ZIP Code.</value>
        [DataMember(Name="PostalCode.Base", EmitDefaultValue=false)]
        public string PostalCodeBase { get; set; }
        /// <summary>
        /// The 4-digit add-on part of the ZIP Code.
        /// </summary>
        /// <value>The 4-digit add-on part of the ZIP Code.</value>
        [DataMember(Name="PostalCode.AddOn", EmitDefaultValue=false)]
        public string PostalCodeAddOn { get; set; }
        /// <summary>
        /// Reports the success or failure of the match attempt.
        /// </summary>
        /// <value>Reports the success or failure of the match attempt.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Reason for failure, if there is one.
        /// </summary>
        /// <value>Reason for failure, if there is one.</value>
        [DataMember(Name="Status.Code", EmitDefaultValue=false)]
        public string StatusCode { get; set; }
        /// <summary>
        /// Description of the problem, if there is one.
        /// </summary>
        /// <value>Description of the problem, if there is one.</value>
        [DataMember(Name="Status.Description", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressProOutput {\n");
            sb.Append("  UserFields: ").Append(UserFields).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  ChangeScore: ").Append(ChangeScore).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Deliverability: ").Append(Deliverability).Append("\n");
            sb.Append("  AddressQuality: ").Append(AddressQuality).Append("\n");
            sb.Append("  CouldNotValidate: ").Append(CouldNotValidate).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  BlockAddress: ").Append(BlockAddress).Append("\n");
            sb.Append("  AdditionalInputData: ").Append(AdditionalInputData).Append("\n");
            sb.Append("  PostalCodeBase: ").Append(PostalCodeBase).Append("\n");
            sb.Append("  PostalCodeAddOn: ").Append(PostalCodeAddOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ValidateMailingAddressProOutput);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressProOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidateMailingAddressProOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressProOutput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserFields == other.UserFields ||
                    this.UserFields != null &&
                    this.UserFields.SequenceEqual(other.UserFields)
                ) && 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.FirmName == other.FirmName ||
                    this.FirmName != null &&
                    this.FirmName.Equals(other.FirmName)
                ) && 
                (
                    this.ChangeScore == other.ChangeScore ||
                    this.ChangeScore != null &&
                    this.ChangeScore.Equals(other.ChangeScore)
                ) && 
                (
                    this.Locality == other.Locality ||
                    this.Locality != null &&
                    this.Locality.Equals(other.Locality)
                ) && 
                (
                    this.Suburb == other.Suburb ||
                    this.Suburb != null &&
                    this.Suburb.Equals(other.Suburb)
                ) && 
                (
                    this.AddressType == other.AddressType ||
                    this.AddressType != null &&
                    this.AddressType.Equals(other.AddressType)
                ) && 
                (
                    this.Deliverability == other.Deliverability ||
                    this.Deliverability != null &&
                    this.Deliverability.Equals(other.Deliverability)
                ) && 
                (
                    this.AddressQuality == other.AddressQuality ||
                    this.AddressQuality != null &&
                    this.AddressQuality.Equals(other.AddressQuality)
                ) && 
                (
                    this.CouldNotValidate == other.CouldNotValidate ||
                    this.CouldNotValidate != null &&
                    this.CouldNotValidate.Equals(other.CouldNotValidate)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.StateProvince == other.StateProvince ||
                    this.StateProvince != null &&
                    this.StateProvince.Equals(other.StateProvince)
                ) && 
                (
                    this.BlockAddress == other.BlockAddress ||
                    this.BlockAddress != null &&
                    this.BlockAddress.Equals(other.BlockAddress)
                ) && 
                (
                    this.AdditionalInputData == other.AdditionalInputData ||
                    this.AdditionalInputData != null &&
                    this.AdditionalInputData.Equals(other.AdditionalInputData)
                ) && 
                (
                    this.PostalCodeBase == other.PostalCodeBase ||
                    this.PostalCodeBase != null &&
                    this.PostalCodeBase.Equals(other.PostalCodeBase)
                ) && 
                (
                    this.PostalCodeAddOn == other.PostalCodeAddOn ||
                    this.PostalCodeAddOn != null &&
                    this.PostalCodeAddOn.Equals(other.PostalCodeAddOn)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.StatusDescription == other.StatusDescription ||
                    this.StatusDescription != null &&
                    this.StatusDescription.Equals(other.StatusDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserFields != null)
                    hash = hash * 59 + this.UserFields.GetHashCode();
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.FirmName != null)
                    hash = hash * 59 + this.FirmName.GetHashCode();
                if (this.ChangeScore != null)
                    hash = hash * 59 + this.ChangeScore.GetHashCode();
                if (this.Locality != null)
                    hash = hash * 59 + this.Locality.GetHashCode();
                if (this.Suburb != null)
                    hash = hash * 59 + this.Suburb.GetHashCode();
                if (this.AddressType != null)
                    hash = hash * 59 + this.AddressType.GetHashCode();
                if (this.Deliverability != null)
                    hash = hash * 59 + this.Deliverability.GetHashCode();
                if (this.AddressQuality != null)
                    hash = hash * 59 + this.AddressQuality.GetHashCode();
                if (this.CouldNotValidate != null)
                    hash = hash * 59 + this.CouldNotValidate.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.StateProvince != null)
                    hash = hash * 59 + this.StateProvince.GetHashCode();
                if (this.BlockAddress != null)
                    hash = hash * 59 + this.BlockAddress.GetHashCode();
                if (this.AdditionalInputData != null)
                    hash = hash * 59 + this.AdditionalInputData.GetHashCode();
                if (this.PostalCodeBase != null)
                    hash = hash * 59 + this.PostalCodeBase.GetHashCode();
                if (this.PostalCodeAddOn != null)
                    hash = hash * 59 + this.PostalCodeAddOn.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hash = hash * 59 + this.StatusDescription.GetHashCode();
                return hash;
            }
        }
    }

}
