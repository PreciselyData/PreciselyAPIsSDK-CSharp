/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 12.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// FloodZone
    /// </summary>
    [DataContract]
    public partial class FloodZone :  IEquatable<FloodZone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FloodZone" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="areaType">areaType.</param>
        /// <param name="riskLevel">riskLevel.</param>
        /// <param name="primaryZone">primaryZone.</param>
        /// <param name="baseFloodElevation">baseFloodElevation.</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        public FloodZone(string code = default(string), string areaType = default(string), string riskLevel = default(string), PrimaryZone primaryZone = default(PrimaryZone), BaseFloodElevation baseFloodElevation = default(BaseFloodElevation), string additionalInfo = default(string))
        {
            this.Code = code;
            this.AreaType = areaType;
            this.RiskLevel = riskLevel;
            this.PrimaryZone = primaryZone;
            this.BaseFloodElevation = baseFloodElevation;
            this.AdditionalInfo = additionalInfo;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets AreaType
        /// </summary>
        [DataMember(Name="areaType", EmitDefaultValue=false)]
        public string AreaType { get; set; }

        /// <summary>
        /// Gets or Sets RiskLevel
        /// </summary>
        [DataMember(Name="riskLevel", EmitDefaultValue=false)]
        public string RiskLevel { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryZone
        /// </summary>
        [DataMember(Name="primaryZone", EmitDefaultValue=false)]
        public PrimaryZone PrimaryZone { get; set; }

        /// <summary>
        /// Gets or Sets BaseFloodElevation
        /// </summary>
        [DataMember(Name="baseFloodElevation", EmitDefaultValue=false)]
        public BaseFloodElevation BaseFloodElevation { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FloodZone {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  AreaType: ").Append(AreaType).Append("\n");
            sb.Append("  RiskLevel: ").Append(RiskLevel).Append("\n");
            sb.Append("  PrimaryZone: ").Append(PrimaryZone).Append("\n");
            sb.Append("  BaseFloodElevation: ").Append(BaseFloodElevation).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FloodZone);
        }

        /// <summary>
        /// Returns true if FloodZone instances are equal
        /// </summary>
        /// <param name="input">Instance of FloodZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FloodZone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.AreaType == input.AreaType ||
                    (this.AreaType != null &&
                    this.AreaType.Equals(input.AreaType))
                ) && 
                (
                    this.RiskLevel == input.RiskLevel ||
                    (this.RiskLevel != null &&
                    this.RiskLevel.Equals(input.RiskLevel))
                ) && 
                (
                    this.PrimaryZone == input.PrimaryZone ||
                    (this.PrimaryZone != null &&
                    this.PrimaryZone.Equals(input.PrimaryZone))
                ) && 
                (
                    this.BaseFloodElevation == input.BaseFloodElevation ||
                    (this.BaseFloodElevation != null &&
                    this.BaseFloodElevation.Equals(input.BaseFloodElevation))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.AreaType != null)
                    hashCode = hashCode * 59 + this.AreaType.GetHashCode();
                if (this.RiskLevel != null)
                    hashCode = hashCode * 59 + this.RiskLevel.GetHashCode();
                if (this.PrimaryZone != null)
                    hashCode = hashCode * 59 + this.PrimaryZone.GetHashCode();
                if (this.BaseFloodElevation != null)
                    hashCode = hashCode * 59 + this.BaseFloodElevation.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
