/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// Census
    /// </summary>
    [DataContract]
    public partial class Census :  IEquatable<Census>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Census" /> class.
        /// </summary>
        /// <param name="cbsa">cbsa.</param>
        /// <param name="matchLevel">matchLevel.</param>
        /// <param name="matchCode">matchCode.</param>
        /// <param name="tract">tract.</param>
        /// <param name="mcd">mcd.</param>
        public Census(Cbsa cbsa = default(Cbsa), string matchLevel = default(string), string matchCode = default(string), string tract = default(string), Mcd mcd = default(Mcd))
        {
            this.Cbsa = cbsa;
            this.MatchLevel = matchLevel;
            this.MatchCode = matchCode;
            this.Tract = tract;
            this.Mcd = mcd;
        }

        /// <summary>
        /// Gets or Sets Cbsa
        /// </summary>
        [DataMember(Name="cbsa", EmitDefaultValue=false)]
        public Cbsa Cbsa { get; set; }

        /// <summary>
        /// Gets or Sets MatchLevel
        /// </summary>
        [DataMember(Name="matchLevel", EmitDefaultValue=false)]
        public string MatchLevel { get; set; }

        /// <summary>
        /// Gets or Sets MatchCode
        /// </summary>
        [DataMember(Name="matchCode", EmitDefaultValue=false)]
        public string MatchCode { get; set; }

        /// <summary>
        /// Gets or Sets Tract
        /// </summary>
        [DataMember(Name="tract", EmitDefaultValue=false)]
        public string Tract { get; set; }

        /// <summary>
        /// Gets or Sets Mcd
        /// </summary>
        [DataMember(Name="mcd", EmitDefaultValue=false)]
        public Mcd Mcd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Census {\n");
            sb.Append("  Cbsa: ").Append(Cbsa).Append("\n");
            sb.Append("  MatchLevel: ").Append(MatchLevel).Append("\n");
            sb.Append("  MatchCode: ").Append(MatchCode).Append("\n");
            sb.Append("  Tract: ").Append(Tract).Append("\n");
            sb.Append("  Mcd: ").Append(Mcd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Census);
        }

        /// <summary>
        /// Returns true if Census instances are equal
        /// </summary>
        /// <param name="input">Instance of Census to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Census input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cbsa == input.Cbsa ||
                    (this.Cbsa != null &&
                    this.Cbsa.Equals(input.Cbsa))
                ) && 
                (
                    this.MatchLevel == input.MatchLevel ||
                    (this.MatchLevel != null &&
                    this.MatchLevel.Equals(input.MatchLevel))
                ) && 
                (
                    this.MatchCode == input.MatchCode ||
                    (this.MatchCode != null &&
                    this.MatchCode.Equals(input.MatchCode))
                ) && 
                (
                    this.Tract == input.Tract ||
                    (this.Tract != null &&
                    this.Tract.Equals(input.Tract))
                ) && 
                (
                    this.Mcd == input.Mcd ||
                    (this.Mcd != null &&
                    this.Mcd.Equals(input.Mcd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cbsa != null)
                    hashCode = hashCode * 59 + this.Cbsa.GetHashCode();
                if (this.MatchLevel != null)
                    hashCode = hashCode * 59 + this.MatchLevel.GetHashCode();
                if (this.MatchCode != null)
                    hashCode = hashCode * 59 + this.MatchCode.GetHashCode();
                if (this.Tract != null)
                    hashCode = hashCode * 59 + this.Tract.GetHashCode();
                if (this.Mcd != null)
                    hashCode = hashCode * 59 + this.Mcd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
