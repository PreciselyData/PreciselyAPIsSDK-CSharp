/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 16.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.precisely.apis.Client.OpenAPIDateConverter;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressUSCANAPIOutput
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressUSCANAPIOutput :  IEquatable<ValidateMailingAddressUSCANAPIOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressUSCANAPIOutput" /> class.
        /// </summary>
        /// <param name="userFields">These fields are returned, unmodified, in the user_fields section of the response..</param>
        /// <param name="status">Reports the success or failure of the match attempt..</param>
        /// <param name="statusCode">Reason for failure, if there is one..</param>
        /// <param name="statusDescription">Specifies the description of the problem, if there is one..</param>
        /// <param name="addressLine1">Specifies the first line of the validated and standardized address..</param>
        /// <param name="addressLine2">Specifies the second line of the validated and standardized address..</param>
        /// <param name="city">Specifies the validated city name..</param>
        /// <param name="stateProvince">Specifies the validated state or province abbreviation..</param>
        /// <param name="postalCode">Specifies the validated ZIP Code or postal code..</param>
        /// <param name="country">Specifies the country in the format determined by the selection from ISO or UPO or English..</param>
        /// <param name="firmName">Specifies the validated firm or company name..</param>
        /// <param name="blockAddress">Specifies the formatted address, as it would appear on a physical mail piece. .</param>
        /// <param name="postalCodeBase">Specifies the 5-digit ZIP Code..</param>
        /// <param name="postalCodeAddOn">Specifies the 4-digit add-on part of the ZIP Code..</param>
        /// <param name="additionalInputData">Specifies input data not used by the address validation process..</param>
        /// <param name="couldNotValidate">Specifies the address component that could not be validated, in case no match is found. .</param>
        /// <param name="addressFormat">Specifies the type of address data being returned..</param>
        /// <param name="addressLine3">Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes..</param>
        /// <param name="addressLine4">Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes..</param>
        /// <param name="addressRecordResult">Specifies the result codes that apply to international addresses only..</param>
        /// <param name="apartmentLabel">Specifies the apartment designator such as STE or APT..</param>
        /// <param name="apartmentLabelInput">Specifies the apartment designator such as STE or APT..</param>
        /// <param name="apartmentLabelResult">Specifies the result of apartment label..</param>
        /// <param name="apartmentNumber">Specifies the apartment number..</param>
        /// <param name="apartmentNumberInput">Specifies the apartment number..</param>
        /// <param name="apartmentNumberResult">Specifies the result of apartment number..</param>
        /// <param name="cityInput">Specifies the validated city name..</param>
        /// <param name="cityResult">Specifies the result of the validated city name..</param>
        /// <param name="confidence">Specifies the the level of confidence assigned to the address being returned..</param>
        /// <param name="countryInput">Specifies the name of the country..</param>
        /// <param name="countryResult">Specifies the result code for the country..</param>
        /// <param name="countryLevel">Specifies the category of address matching available..</param>
        /// <param name="firmNameInput">Specifies the validated firm or company name..</param>
        /// <param name="firmNameResult">Specifies if the firm name got validated..</param>
        /// <param name="houseNumber">Specifies the house number..</param>
        /// <param name="houseNumberInput">Specifies the house number..</param>
        /// <param name="houseNumberResult">Specifies the result for house number..</param>
        /// <param name="leadingDirectional">Specifies the leading directional..</param>
        /// <param name="leadingDirectionalInput">Specifies the leading directional..</param>
        /// <param name="leadingDirectionalResult">Specifies the result of leading directional..</param>
        /// <param name="multipleMatches">Specifies the address component with multiple matches, if multiple matches were found: .</param>
        /// <param name="pOBox">Specifies the post office box number..</param>
        /// <param name="pOBoxInput">Specifies the post office box number..</param>
        /// <param name="pOBoxResult">Specifies the result of post office box number..</param>
        /// <param name="postalCodeInput">Specifies the validated postal code. For U.S. addresses, this is the ZIP code..</param>
        /// <param name="postalCodeResult">Specifies the result of validated postal code..</param>
        /// <param name="postalCodeSource">Specifies the result code..</param>
        /// <param name="postalCodeType">Specifies the type of postal code returned..</param>
        /// <param name="postalCodeCityResult">Specifies the international result code..</param>
        /// <param name="privateMailbox">Specifies the private mailbox indicator..</param>
        /// <param name="privateMailboxInput">Specifies the private mailbox indicator..</param>
        /// <param name="privateMailboxType">Specifies the type of private mailbox..</param>
        /// <param name="privateMailboxTypeInput">Specifies the type of private mailbox..</param>
        /// <param name="recordType">Specifies the type of address record, as defined by U.S. and Canadian postal authorities..</param>
        /// <param name="recordTypeDefault">Specifies the code indicating the default match..</param>
        /// <param name="rRHC">Specifies the Rural Route/Highway Contract indicator..</param>
        /// <param name="rRHCInput">Specifies the Rural Route/Highway Contract indicator..</param>
        /// <param name="rRHCResult">Specifies the result for Rural Route/Highway Contract indicator..</param>
        /// <param name="rRHCType">Specifies the result code for Rural Route/Highway Contract indicator..</param>
        /// <param name="stateProvinceInput">Specifies the validated state or province abbreviation..</param>
        /// <param name="stateProvinceResult">Specifies the result of validated state or province abbreviation..</param>
        /// <param name="streetResult">Specifies the result codes for international addresses..</param>
        /// <param name="streetName">Specifies the street name..</param>
        /// <param name="streetNameAliasType">Specifies result code that applies to U.S. addresses only..</param>
        /// <param name="streetNameInput">Specifies the street name..</param>
        /// <param name="streetNameResult">Specifies the result of the street name..</param>
        /// <param name="streetNameAbbreviatedAliasResult">Indicates the result of abbreviated alias processing..</param>
        /// <param name="streetNamePreferredAliasResult">Specifies the result of preferred alias processing..</param>
        /// <param name="streetSuffix">Specifies the street suffix..</param>
        /// <param name="streetSuffixInput">Specifies the street suffix..</param>
        /// <param name="streetSuffixResult">Specifies the result of the street suffix..</param>
        /// <param name="trailingDirectional">Specifies the trailing directional..</param>
        /// <param name="trailingDirectionalInput">Specifies the trailing directional..</param>
        /// <param name="trailingDirectionalResult">Specifies the result of the trailing directional..</param>
        /// <param name="matchScore">Specifies an indication of the degree to which the output address is correct..</param>
        /// <param name="uSLACS">Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only)..</param>
        /// <param name="uSLACSReturnCode">Specifies the the success or failure of LACS processing. This is for U.S. addresses only)..</param>
        /// <param name="rDI">Specifies the values indicating address type..</param>
        /// <param name="cMRA">Specifies if the address is a Commercial Mail Receiving Agency (CMRA)..</param>
        /// <param name="dPV">Specifies the results of Delivery Point Validation (DPV) processing..</param>
        /// <param name="dPVFootnote">Specifies the DPV footnote codes..</param>
        /// <param name="suiteLinkReturnCode">Indicates whether or not API corrected the secondary address information (U.S. addresses only). .</param>
        /// <param name="suiteLinkMatchCode">Provides additional information on the SuiteLink match attempt. (U.S. addresses only).</param>
        /// <param name="suiteLinkFidelity">Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database..</param>
        /// <param name="uSBCCheckDigit">Specifies the check-digit portion of the 11-digit delivery point barcode..</param>
        /// <param name="postalBarCode">Specifies the delivery point portion of the delivery point barcode..</param>
        /// <param name="uSCarrierRouteCode">Specifies carrier route code..</param>
        /// <param name="uSFIPSCountyNumber">Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only)..</param>
        /// <param name="uSCountyName">Specifies the county name (U.S. addresses only)..</param>
        /// <param name="uSCongressionalDistrict">Specifies congressional district (U.S. addresses only)..</param>
        /// <param name="uSAltAddr">Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only)..</param>
        /// <param name="uSLastLineNumber">Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city..</param>
        /// <param name="uSFinanceNumber">Specifies the finance number in which the address resides (U.S. addresses only)..</param>
        /// <param name="uSUrbanName">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="uSUrbanNameInput">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="uSUrbanNameResult">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="multimatchCount">If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found..</param>
        /// <param name="addressBlock1">AddressBlock1.</param>
        /// <param name="addressBlock2">AddressBlock2.</param>
        /// <param name="addressBlock3">AddressBlock3.</param>
        /// <param name="addressBlock4">AddressBlock4.</param>
        /// <param name="addressBlock5">AddressBlock5.</param>
        /// <param name="addressBlock6">AddressBlock6.</param>
        /// <param name="addressBlock7">AddressBlock7.</param>
        /// <param name="addressBlock8">AddressBlock8.</param>
        /// <param name="addressBlock9">AddressBlock9.</param>
        /// <param name="canLanguage">Specifies whether the address is in English or French. This is for Canadian address only..</param>
        /// <param name="dPVNoStat">Specifies whether the building is a no stat building and therefore unable to receive mail..</param>
        /// <param name="dPVVacant">Specifies whether the building is vacant, unoccupied for 90 days..</param>
        public ValidateMailingAddressUSCANAPIOutput(List<GetPostalCodesAPIOutputUserFields> userFields = default(List<GetPostalCodesAPIOutputUserFields>), string status = default(string), string statusCode = default(string), string statusDescription = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string city = default(string), string stateProvince = default(string), string postalCode = default(string), string country = default(string), string firmName = default(string), string blockAddress = default(string), string postalCodeBase = default(string), string postalCodeAddOn = default(string), string additionalInputData = default(string), string couldNotValidate = default(string), string addressFormat = default(string), string addressLine3 = default(string), string addressLine4 = default(string), string addressRecordResult = default(string), string apartmentLabel = default(string), string apartmentLabelInput = default(string), string apartmentLabelResult = default(string), string apartmentNumber = default(string), string apartmentNumberInput = default(string), string apartmentNumberResult = default(string), string cityInput = default(string), string cityResult = default(string), string confidence = default(string), string countryInput = default(string), string countryResult = default(string), string countryLevel = default(string), string firmNameInput = default(string), string firmNameResult = default(string), string houseNumber = default(string), string houseNumberInput = default(string), string houseNumberResult = default(string), string leadingDirectional = default(string), string leadingDirectionalInput = default(string), string leadingDirectionalResult = default(string), string multipleMatches = default(string), string pOBox = default(string), string pOBoxInput = default(string), string pOBoxResult = default(string), string postalCodeInput = default(string), string postalCodeResult = default(string), string postalCodeSource = default(string), string postalCodeType = default(string), string postalCodeCityResult = default(string), string privateMailbox = default(string), string privateMailboxInput = default(string), string privateMailboxType = default(string), string privateMailboxTypeInput = default(string), string recordType = default(string), string recordTypeDefault = default(string), string rRHC = default(string), string rRHCInput = default(string), string rRHCResult = default(string), string rRHCType = default(string), string stateProvinceInput = default(string), string stateProvinceResult = default(string), string streetResult = default(string), string streetName = default(string), string streetNameAliasType = default(string), string streetNameInput = default(string), string streetNameResult = default(string), string streetNameAbbreviatedAliasResult = default(string), string streetNamePreferredAliasResult = default(string), string streetSuffix = default(string), string streetSuffixInput = default(string), string streetSuffixResult = default(string), string trailingDirectional = default(string), string trailingDirectionalInput = default(string), string trailingDirectionalResult = default(string), string matchScore = default(string), string uSLACS = default(string), string uSLACSReturnCode = default(string), string rDI = default(string), string cMRA = default(string), string dPV = default(string), string dPVFootnote = default(string), string suiteLinkReturnCode = default(string), string suiteLinkMatchCode = default(string), string suiteLinkFidelity = default(string), string uSBCCheckDigit = default(string), string postalBarCode = default(string), string uSCarrierRouteCode = default(string), string uSFIPSCountyNumber = default(string), string uSCountyName = default(string), string uSCongressionalDistrict = default(string), string uSAltAddr = default(string), string uSLastLineNumber = default(string), string uSFinanceNumber = default(string), string uSUrbanName = default(string), string uSUrbanNameInput = default(string), string uSUrbanNameResult = default(string), string multimatchCount = default(string), string addressBlock1 = default(string), string addressBlock2 = default(string), string addressBlock3 = default(string), string addressBlock4 = default(string), string addressBlock5 = default(string), string addressBlock6 = default(string), string addressBlock7 = default(string), string addressBlock8 = default(string), string addressBlock9 = default(string), string canLanguage = default(string), string dPVNoStat = default(string), string dPVVacant = default(string))
        {
            this.UserFields = userFields;
            this.Status = status;
            this.StatusCode = statusCode;
            this.StatusDescription = statusDescription;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.City = city;
            this.StateProvince = stateProvince;
            this.PostalCode = postalCode;
            this.Country = country;
            this.FirmName = firmName;
            this.BlockAddress = blockAddress;
            this.PostalCodeBase = postalCodeBase;
            this.PostalCodeAddOn = postalCodeAddOn;
            this.AdditionalInputData = additionalInputData;
            this.CouldNotValidate = couldNotValidate;
            this.AddressFormat = addressFormat;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.AddressRecordResult = addressRecordResult;
            this.ApartmentLabel = apartmentLabel;
            this.ApartmentLabelInput = apartmentLabelInput;
            this.ApartmentLabelResult = apartmentLabelResult;
            this.ApartmentNumber = apartmentNumber;
            this.ApartmentNumberInput = apartmentNumberInput;
            this.ApartmentNumberResult = apartmentNumberResult;
            this.CityInput = cityInput;
            this.CityResult = cityResult;
            this.Confidence = confidence;
            this.CountryInput = countryInput;
            this.CountryResult = countryResult;
            this.CountryLevel = countryLevel;
            this.FirmNameInput = firmNameInput;
            this.FirmNameResult = firmNameResult;
            this.HouseNumber = houseNumber;
            this.HouseNumberInput = houseNumberInput;
            this.HouseNumberResult = houseNumberResult;
            this.LeadingDirectional = leadingDirectional;
            this.LeadingDirectionalInput = leadingDirectionalInput;
            this.LeadingDirectionalResult = leadingDirectionalResult;
            this.MultipleMatches = multipleMatches;
            this.POBox = pOBox;
            this.POBoxInput = pOBoxInput;
            this.POBoxResult = pOBoxResult;
            this.PostalCodeInput = postalCodeInput;
            this.PostalCodeResult = postalCodeResult;
            this.PostalCodeSource = postalCodeSource;
            this.PostalCodeType = postalCodeType;
            this.PostalCodeCityResult = postalCodeCityResult;
            this.PrivateMailbox = privateMailbox;
            this.PrivateMailboxInput = privateMailboxInput;
            this.PrivateMailboxType = privateMailboxType;
            this.PrivateMailboxTypeInput = privateMailboxTypeInput;
            this.RecordType = recordType;
            this.RecordTypeDefault = recordTypeDefault;
            this.RRHC = rRHC;
            this.RRHCInput = rRHCInput;
            this.RRHCResult = rRHCResult;
            this.RRHCType = rRHCType;
            this.StateProvinceInput = stateProvinceInput;
            this.StateProvinceResult = stateProvinceResult;
            this.StreetResult = streetResult;
            this.StreetName = streetName;
            this.StreetNameAliasType = streetNameAliasType;
            this.StreetNameInput = streetNameInput;
            this.StreetNameResult = streetNameResult;
            this.StreetNameAbbreviatedAliasResult = streetNameAbbreviatedAliasResult;
            this.StreetNamePreferredAliasResult = streetNamePreferredAliasResult;
            this.StreetSuffix = streetSuffix;
            this.StreetSuffixInput = streetSuffixInput;
            this.StreetSuffixResult = streetSuffixResult;
            this.TrailingDirectional = trailingDirectional;
            this.TrailingDirectionalInput = trailingDirectionalInput;
            this.TrailingDirectionalResult = trailingDirectionalResult;
            this.MatchScore = matchScore;
            this.USLACS = uSLACS;
            this.USLACSReturnCode = uSLACSReturnCode;
            this.RDI = rDI;
            this.CMRA = cMRA;
            this.DPV = dPV;
            this.DPVFootnote = dPVFootnote;
            this.SuiteLinkReturnCode = suiteLinkReturnCode;
            this.SuiteLinkMatchCode = suiteLinkMatchCode;
            this.SuiteLinkFidelity = suiteLinkFidelity;
            this.USBCCheckDigit = uSBCCheckDigit;
            this.PostalBarCode = postalBarCode;
            this.USCarrierRouteCode = uSCarrierRouteCode;
            this.USFIPSCountyNumber = uSFIPSCountyNumber;
            this.USCountyName = uSCountyName;
            this.USCongressionalDistrict = uSCongressionalDistrict;
            this.USAltAddr = uSAltAddr;
            this.USLastLineNumber = uSLastLineNumber;
            this.USFinanceNumber = uSFinanceNumber;
            this.USUrbanName = uSUrbanName;
            this.USUrbanNameInput = uSUrbanNameInput;
            this.USUrbanNameResult = uSUrbanNameResult;
            this.MultimatchCount = multimatchCount;
            this.AddressBlock1 = addressBlock1;
            this.AddressBlock2 = addressBlock2;
            this.AddressBlock3 = addressBlock3;
            this.AddressBlock4 = addressBlock4;
            this.AddressBlock5 = addressBlock5;
            this.AddressBlock6 = addressBlock6;
            this.AddressBlock7 = addressBlock7;
            this.AddressBlock8 = addressBlock8;
            this.AddressBlock9 = addressBlock9;
            this.CanLanguage = canLanguage;
            this.DPVNoStat = dPVNoStat;
            this.DPVVacant = dPVVacant;
        }

        /// <summary>
        /// These fields are returned, unmodified, in the user_fields section of the response.
        /// </summary>
        /// <value>These fields are returned, unmodified, in the user_fields section of the response.</value>
        [DataMember(Name="user_fields", EmitDefaultValue=false)]
        public List<GetPostalCodesAPIOutputUserFields> UserFields { get; set; }

        /// <summary>
        /// Reports the success or failure of the match attempt.
        /// </summary>
        /// <value>Reports the success or failure of the match attempt.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Reason for failure, if there is one.
        /// </summary>
        /// <value>Reason for failure, if there is one.</value>
        [DataMember(Name="Status.Code", EmitDefaultValue=false)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Specifies the description of the problem, if there is one.
        /// </summary>
        /// <value>Specifies the description of the problem, if there is one.</value>
        [DataMember(Name="Status.description", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Specifies the first line of the validated and standardized address.
        /// </summary>
        /// <value>Specifies the first line of the validated and standardized address.</value>
        [DataMember(Name="AddressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Specifies the second line of the validated and standardized address.
        /// </summary>
        /// <value>Specifies the second line of the validated and standardized address.</value>
        [DataMember(Name="AddressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Specifies the validated city name.
        /// </summary>
        /// <value>Specifies the validated city name.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Specifies the validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Specifies the validated ZIP Code or postal code.
        /// </summary>
        /// <value>Specifies the validated ZIP Code or postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Specifies the country in the format determined by the selection from ISO or UPO or English.
        /// </summary>
        /// <value>Specifies the country in the format determined by the selection from ISO or UPO or English.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Specifies the validated firm or company name.
        /// </summary>
        /// <value>Specifies the validated firm or company name.</value>
        [DataMember(Name="FirmName", EmitDefaultValue=false)]
        public string FirmName { get; set; }

        /// <summary>
        /// Specifies the formatted address, as it would appear on a physical mail piece. 
        /// </summary>
        /// <value>Specifies the formatted address, as it would appear on a physical mail piece. </value>
        [DataMember(Name="BlockAddress", EmitDefaultValue=false)]
        public string BlockAddress { get; set; }

        /// <summary>
        /// Specifies the 5-digit ZIP Code.
        /// </summary>
        /// <value>Specifies the 5-digit ZIP Code.</value>
        [DataMember(Name="PostalCode.Base", EmitDefaultValue=false)]
        public string PostalCodeBase { get; set; }

        /// <summary>
        /// Specifies the 4-digit add-on part of the ZIP Code.
        /// </summary>
        /// <value>Specifies the 4-digit add-on part of the ZIP Code.</value>
        [DataMember(Name="PostalCode.AddOn", EmitDefaultValue=false)]
        public string PostalCodeAddOn { get; set; }

        /// <summary>
        /// Specifies input data not used by the address validation process.
        /// </summary>
        /// <value>Specifies input data not used by the address validation process.</value>
        [DataMember(Name="AdditionalInputData", EmitDefaultValue=false)]
        public string AdditionalInputData { get; set; }

        /// <summary>
        /// Specifies the address component that could not be validated, in case no match is found. 
        /// </summary>
        /// <value>Specifies the address component that could not be validated, in case no match is found. </value>
        [DataMember(Name="CouldNotValidate", EmitDefaultValue=false)]
        public string CouldNotValidate { get; set; }

        /// <summary>
        /// Specifies the type of address data being returned.
        /// </summary>
        /// <value>Specifies the type of address data being returned.</value>
        [DataMember(Name="AddressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }

        /// <summary>
        /// Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.
        /// </summary>
        /// <value>Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.</value>
        [DataMember(Name="AddressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.
        /// </summary>
        /// <value>Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.</value>
        [DataMember(Name="AddressLine4", EmitDefaultValue=false)]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// Specifies the result codes that apply to international addresses only.
        /// </summary>
        /// <value>Specifies the result codes that apply to international addresses only.</value>
        [DataMember(Name="AddressRecord.Result", EmitDefaultValue=false)]
        public string AddressRecordResult { get; set; }

        /// <summary>
        /// Specifies the apartment designator such as STE or APT.
        /// </summary>
        /// <value>Specifies the apartment designator such as STE or APT.</value>
        [DataMember(Name="ApartmentLabel", EmitDefaultValue=false)]
        public string ApartmentLabel { get; set; }

        /// <summary>
        /// Specifies the apartment designator such as STE or APT.
        /// </summary>
        /// <value>Specifies the apartment designator such as STE or APT.</value>
        [DataMember(Name="ApartmentLabel.Input", EmitDefaultValue=false)]
        public string ApartmentLabelInput { get; set; }

        /// <summary>
        /// Specifies the result of apartment label.
        /// </summary>
        /// <value>Specifies the result of apartment label.</value>
        [DataMember(Name="ApartmentLabel.Result", EmitDefaultValue=false)]
        public string ApartmentLabelResult { get; set; }

        /// <summary>
        /// Specifies the apartment number.
        /// </summary>
        /// <value>Specifies the apartment number.</value>
        [DataMember(Name="ApartmentNumber", EmitDefaultValue=false)]
        public string ApartmentNumber { get; set; }

        /// <summary>
        /// Specifies the apartment number.
        /// </summary>
        /// <value>Specifies the apartment number.</value>
        [DataMember(Name="ApartmentNumber.Input", EmitDefaultValue=false)]
        public string ApartmentNumberInput { get; set; }

        /// <summary>
        /// Specifies the result of apartment number.
        /// </summary>
        /// <value>Specifies the result of apartment number.</value>
        [DataMember(Name="ApartmentNumber.Result", EmitDefaultValue=false)]
        public string ApartmentNumberResult { get; set; }

        /// <summary>
        /// Specifies the validated city name.
        /// </summary>
        /// <value>Specifies the validated city name.</value>
        [DataMember(Name="City.Input", EmitDefaultValue=false)]
        public string CityInput { get; set; }

        /// <summary>
        /// Specifies the result of the validated city name.
        /// </summary>
        /// <value>Specifies the result of the validated city name.</value>
        [DataMember(Name="City.Result", EmitDefaultValue=false)]
        public string CityResult { get; set; }

        /// <summary>
        /// Specifies the the level of confidence assigned to the address being returned.
        /// </summary>
        /// <value>Specifies the the level of confidence assigned to the address being returned.</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }

        /// <summary>
        /// Specifies the name of the country.
        /// </summary>
        /// <value>Specifies the name of the country.</value>
        [DataMember(Name="Country.Input", EmitDefaultValue=false)]
        public string CountryInput { get; set; }

        /// <summary>
        /// Specifies the result code for the country.
        /// </summary>
        /// <value>Specifies the result code for the country.</value>
        [DataMember(Name="Country.Result", EmitDefaultValue=false)]
        public string CountryResult { get; set; }

        /// <summary>
        /// Specifies the category of address matching available.
        /// </summary>
        /// <value>Specifies the category of address matching available.</value>
        [DataMember(Name="CountryLevel", EmitDefaultValue=false)]
        public string CountryLevel { get; set; }

        /// <summary>
        /// Specifies the validated firm or company name.
        /// </summary>
        /// <value>Specifies the validated firm or company name.</value>
        [DataMember(Name="FirmName.Input", EmitDefaultValue=false)]
        public string FirmNameInput { get; set; }

        /// <summary>
        /// Specifies if the firm name got validated.
        /// </summary>
        /// <value>Specifies if the firm name got validated.</value>
        [DataMember(Name="FirmName.Result", EmitDefaultValue=false)]
        public string FirmNameResult { get; set; }

        /// <summary>
        /// Specifies the house number.
        /// </summary>
        /// <value>Specifies the house number.</value>
        [DataMember(Name="HouseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Specifies the house number.
        /// </summary>
        /// <value>Specifies the house number.</value>
        [DataMember(Name="HouseNumber.Input", EmitDefaultValue=false)]
        public string HouseNumberInput { get; set; }

        /// <summary>
        /// Specifies the result for house number.
        /// </summary>
        /// <value>Specifies the result for house number.</value>
        [DataMember(Name="HouseNumber.Result", EmitDefaultValue=false)]
        public string HouseNumberResult { get; set; }

        /// <summary>
        /// Specifies the leading directional.
        /// </summary>
        /// <value>Specifies the leading directional.</value>
        [DataMember(Name="LeadingDirectional", EmitDefaultValue=false)]
        public string LeadingDirectional { get; set; }

        /// <summary>
        /// Specifies the leading directional.
        /// </summary>
        /// <value>Specifies the leading directional.</value>
        [DataMember(Name="LeadingDirectional.Input", EmitDefaultValue=false)]
        public string LeadingDirectionalInput { get; set; }

        /// <summary>
        /// Specifies the result of leading directional.
        /// </summary>
        /// <value>Specifies the result of leading directional.</value>
        [DataMember(Name="LeadingDirectional.Result", EmitDefaultValue=false)]
        public string LeadingDirectionalResult { get; set; }

        /// <summary>
        /// Specifies the address component with multiple matches, if multiple matches were found: 
        /// </summary>
        /// <value>Specifies the address component with multiple matches, if multiple matches were found: </value>
        [DataMember(Name="MultipleMatches", EmitDefaultValue=false)]
        public string MultipleMatches { get; set; }

        /// <summary>
        /// Specifies the post office box number.
        /// </summary>
        /// <value>Specifies the post office box number.</value>
        [DataMember(Name="POBox", EmitDefaultValue=false)]
        public string POBox { get; set; }

        /// <summary>
        /// Specifies the post office box number.
        /// </summary>
        /// <value>Specifies the post office box number.</value>
        [DataMember(Name="POBox.Input", EmitDefaultValue=false)]
        public string POBoxInput { get; set; }

        /// <summary>
        /// Specifies the result of post office box number.
        /// </summary>
        /// <value>Specifies the result of post office box number.</value>
        [DataMember(Name="POBox.Result", EmitDefaultValue=false)]
        public string POBoxResult { get; set; }

        /// <summary>
        /// Specifies the validated postal code. For U.S. addresses, this is the ZIP code.
        /// </summary>
        /// <value>Specifies the validated postal code. For U.S. addresses, this is the ZIP code.</value>
        [DataMember(Name="PostalCode.Input", EmitDefaultValue=false)]
        public string PostalCodeInput { get; set; }

        /// <summary>
        /// Specifies the result of validated postal code.
        /// </summary>
        /// <value>Specifies the result of validated postal code.</value>
        [DataMember(Name="PostalCode.Result", EmitDefaultValue=false)]
        public string PostalCodeResult { get; set; }

        /// <summary>
        /// Specifies the result code.
        /// </summary>
        /// <value>Specifies the result code.</value>
        [DataMember(Name="PostalCode.Source", EmitDefaultValue=false)]
        public string PostalCodeSource { get; set; }

        /// <summary>
        /// Specifies the type of postal code returned.
        /// </summary>
        /// <value>Specifies the type of postal code returned.</value>
        [DataMember(Name="PostalCode.Type", EmitDefaultValue=false)]
        public string PostalCodeType { get; set; }

        /// <summary>
        /// Specifies the international result code.
        /// </summary>
        /// <value>Specifies the international result code.</value>
        [DataMember(Name="PostalCodeCity.Result", EmitDefaultValue=false)]
        public string PostalCodeCityResult { get; set; }

        /// <summary>
        /// Specifies the private mailbox indicator.
        /// </summary>
        /// <value>Specifies the private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox", EmitDefaultValue=false)]
        public string PrivateMailbox { get; set; }

        /// <summary>
        /// Specifies the private mailbox indicator.
        /// </summary>
        /// <value>Specifies the private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox.Input", EmitDefaultValue=false)]
        public string PrivateMailboxInput { get; set; }

        /// <summary>
        /// Specifies the type of private mailbox.
        /// </summary>
        /// <value>Specifies the type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type", EmitDefaultValue=false)]
        public string PrivateMailboxType { get; set; }

        /// <summary>
        /// Specifies the type of private mailbox.
        /// </summary>
        /// <value>Specifies the type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type.Input", EmitDefaultValue=false)]
        public string PrivateMailboxTypeInput { get; set; }

        /// <summary>
        /// Specifies the type of address record, as defined by U.S. and Canadian postal authorities.
        /// </summary>
        /// <value>Specifies the type of address record, as defined by U.S. and Canadian postal authorities.</value>
        [DataMember(Name="RecordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }

        /// <summary>
        /// Specifies the code indicating the default match.
        /// </summary>
        /// <value>Specifies the code indicating the default match.</value>
        [DataMember(Name="RecordType.Default", EmitDefaultValue=false)]
        public string RecordTypeDefault { get; set; }

        /// <summary>
        /// Specifies the Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC", EmitDefaultValue=false)]
        public string RRHC { get; set; }

        /// <summary>
        /// Specifies the Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Input", EmitDefaultValue=false)]
        public string RRHCInput { get; set; }

        /// <summary>
        /// Specifies the result for Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the result for Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Result", EmitDefaultValue=false)]
        public string RRHCResult { get; set; }

        /// <summary>
        /// Specifies the result code for Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the result code for Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Type", EmitDefaultValue=false)]
        public string RRHCType { get; set; }

        /// <summary>
        /// Specifies the validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince.Input", EmitDefaultValue=false)]
        public string StateProvinceInput { get; set; }

        /// <summary>
        /// Specifies the result of validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the result of validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince.Result", EmitDefaultValue=false)]
        public string StateProvinceResult { get; set; }

        /// <summary>
        /// Specifies the result codes for international addresses.
        /// </summary>
        /// <value>Specifies the result codes for international addresses.</value>
        [DataMember(Name="Street.Result", EmitDefaultValue=false)]
        public string StreetResult { get; set; }

        /// <summary>
        /// Specifies the street name.
        /// </summary>
        /// <value>Specifies the street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Specifies result code that applies to U.S. addresses only.
        /// </summary>
        /// <value>Specifies result code that applies to U.S. addresses only.</value>
        [DataMember(Name="StreetName.Alias.Type", EmitDefaultValue=false)]
        public string StreetNameAliasType { get; set; }

        /// <summary>
        /// Specifies the street name.
        /// </summary>
        /// <value>Specifies the street name.</value>
        [DataMember(Name="StreetName.Input", EmitDefaultValue=false)]
        public string StreetNameInput { get; set; }

        /// <summary>
        /// Specifies the result of the street name.
        /// </summary>
        /// <value>Specifies the result of the street name.</value>
        [DataMember(Name="StreetName.Result", EmitDefaultValue=false)]
        public string StreetNameResult { get; set; }

        /// <summary>
        /// Indicates the result of abbreviated alias processing.
        /// </summary>
        /// <value>Indicates the result of abbreviated alias processing.</value>
        [DataMember(Name="StreetNameAbbreviatedAlias.Result", EmitDefaultValue=false)]
        public string StreetNameAbbreviatedAliasResult { get; set; }

        /// <summary>
        /// Specifies the result of preferred alias processing.
        /// </summary>
        /// <value>Specifies the result of preferred alias processing.</value>
        [DataMember(Name="StreetNamePreferredAlias.Result", EmitDefaultValue=false)]
        public string StreetNamePreferredAliasResult { get; set; }

        /// <summary>
        /// Specifies the street suffix.
        /// </summary>
        /// <value>Specifies the street suffix.</value>
        [DataMember(Name="StreetSuffix", EmitDefaultValue=false)]
        public string StreetSuffix { get; set; }

        /// <summary>
        /// Specifies the street suffix.
        /// </summary>
        /// <value>Specifies the street suffix.</value>
        [DataMember(Name="StreetSuffix.Input", EmitDefaultValue=false)]
        public string StreetSuffixInput { get; set; }

        /// <summary>
        /// Specifies the result of the street suffix.
        /// </summary>
        /// <value>Specifies the result of the street suffix.</value>
        [DataMember(Name="StreetSuffix.Result", EmitDefaultValue=false)]
        public string StreetSuffixResult { get; set; }

        /// <summary>
        /// Specifies the trailing directional.
        /// </summary>
        /// <value>Specifies the trailing directional.</value>
        [DataMember(Name="TrailingDirectional", EmitDefaultValue=false)]
        public string TrailingDirectional { get; set; }

        /// <summary>
        /// Specifies the trailing directional.
        /// </summary>
        /// <value>Specifies the trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Input", EmitDefaultValue=false)]
        public string TrailingDirectionalInput { get; set; }

        /// <summary>
        /// Specifies the result of the trailing directional.
        /// </summary>
        /// <value>Specifies the result of the trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Result", EmitDefaultValue=false)]
        public string TrailingDirectionalResult { get; set; }

        /// <summary>
        /// Specifies an indication of the degree to which the output address is correct.
        /// </summary>
        /// <value>Specifies an indication of the degree to which the output address is correct.</value>
        [DataMember(Name="MatchScore", EmitDefaultValue=false)]
        public string MatchScore { get; set; }

        /// <summary>
        /// Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).
        /// </summary>
        /// <value>Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).</value>
        [DataMember(Name="USLACS", EmitDefaultValue=false)]
        public string USLACS { get; set; }

        /// <summary>
        /// Specifies the the success or failure of LACS processing. This is for U.S. addresses only).
        /// </summary>
        /// <value>Specifies the the success or failure of LACS processing. This is for U.S. addresses only).</value>
        [DataMember(Name="USLACS.ReturnCode", EmitDefaultValue=false)]
        public string USLACSReturnCode { get; set; }

        /// <summary>
        /// Specifies the values indicating address type.
        /// </summary>
        /// <value>Specifies the values indicating address type.</value>
        [DataMember(Name="RDI", EmitDefaultValue=false)]
        public string RDI { get; set; }

        /// <summary>
        /// Specifies if the address is a Commercial Mail Receiving Agency (CMRA).
        /// </summary>
        /// <value>Specifies if the address is a Commercial Mail Receiving Agency (CMRA).</value>
        [DataMember(Name="CMRA", EmitDefaultValue=false)]
        public string CMRA { get; set; }

        /// <summary>
        /// Specifies the results of Delivery Point Validation (DPV) processing.
        /// </summary>
        /// <value>Specifies the results of Delivery Point Validation (DPV) processing.</value>
        [DataMember(Name="DPV", EmitDefaultValue=false)]
        public string DPV { get; set; }

        /// <summary>
        /// Specifies the DPV footnote codes.
        /// </summary>
        /// <value>Specifies the DPV footnote codes.</value>
        [DataMember(Name="DPVFootnote", EmitDefaultValue=false)]
        public string DPVFootnote { get; set; }

        /// <summary>
        /// Indicates whether or not API corrected the secondary address information (U.S. addresses only). 
        /// </summary>
        /// <value>Indicates whether or not API corrected the secondary address information (U.S. addresses only). </value>
        [DataMember(Name="SuiteLinkReturnCode", EmitDefaultValue=false)]
        public string SuiteLinkReturnCode { get; set; }

        /// <summary>
        /// Provides additional information on the SuiteLink match attempt. (U.S. addresses only)
        /// </summary>
        /// <value>Provides additional information on the SuiteLink match attempt. (U.S. addresses only)</value>
        [DataMember(Name="SuiteLinkMatchCode", EmitDefaultValue=false)]
        public string SuiteLinkMatchCode { get; set; }

        /// <summary>
        /// Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.
        /// </summary>
        /// <value>Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.</value>
        [DataMember(Name="SuiteLinkFidelity", EmitDefaultValue=false)]
        public string SuiteLinkFidelity { get; set; }

        /// <summary>
        /// Specifies the check-digit portion of the 11-digit delivery point barcode.
        /// </summary>
        /// <value>Specifies the check-digit portion of the 11-digit delivery point barcode.</value>
        [DataMember(Name="USBCCheckDigit", EmitDefaultValue=false)]
        public string USBCCheckDigit { get; set; }

        /// <summary>
        /// Specifies the delivery point portion of the delivery point barcode.
        /// </summary>
        /// <value>Specifies the delivery point portion of the delivery point barcode.</value>
        [DataMember(Name="PostalBarCode", EmitDefaultValue=false)]
        public string PostalBarCode { get; set; }

        /// <summary>
        /// Specifies carrier route code.
        /// </summary>
        /// <value>Specifies carrier route code.</value>
        [DataMember(Name="USCarrierRouteCode", EmitDefaultValue=false)]
        public string USCarrierRouteCode { get; set; }

        /// <summary>
        /// Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).
        /// </summary>
        /// <value>Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).</value>
        [DataMember(Name="USFIPSCountyNumber", EmitDefaultValue=false)]
        public string USFIPSCountyNumber { get; set; }

        /// <summary>
        /// Specifies the county name (U.S. addresses only).
        /// </summary>
        /// <value>Specifies the county name (U.S. addresses only).</value>
        [DataMember(Name="USCountyName", EmitDefaultValue=false)]
        public string USCountyName { get; set; }

        /// <summary>
        /// Specifies congressional district (U.S. addresses only).
        /// </summary>
        /// <value>Specifies congressional district (U.S. addresses only).</value>
        [DataMember(Name="USCongressionalDistrict", EmitDefaultValue=false)]
        public string USCongressionalDistrict { get; set; }

        /// <summary>
        /// Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).
        /// </summary>
        /// <value>Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).</value>
        [DataMember(Name="USAltAddr", EmitDefaultValue=false)]
        public string USAltAddr { get; set; }

        /// <summary>
        /// Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.
        /// </summary>
        /// <value>Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.</value>
        [DataMember(Name="USLastLineNumber", EmitDefaultValue=false)]
        public string USLastLineNumber { get; set; }

        /// <summary>
        /// Specifies the finance number in which the address resides (U.S. addresses only).
        /// </summary>
        /// <value>Specifies the finance number in which the address resides (U.S. addresses only).</value>
        [DataMember(Name="USFinanceNumber", EmitDefaultValue=false)]
        public string USFinanceNumber { get; set; }

        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName", EmitDefaultValue=false)]
        public string USUrbanName { get; set; }

        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName.Input", EmitDefaultValue=false)]
        public string USUrbanNameInput { get; set; }

        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName.Result", EmitDefaultValue=false)]
        public string USUrbanNameResult { get; set; }

        /// <summary>
        /// If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.
        /// </summary>
        /// <value>If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.</value>
        [DataMember(Name="MultimatchCount", EmitDefaultValue=false)]
        public string MultimatchCount { get; set; }

        /// <summary>
        /// AddressBlock1
        /// </summary>
        /// <value>AddressBlock1</value>
        [DataMember(Name="AddressBlock1", EmitDefaultValue=false)]
        public string AddressBlock1 { get; set; }

        /// <summary>
        /// AddressBlock2
        /// </summary>
        /// <value>AddressBlock2</value>
        [DataMember(Name="AddressBlock2", EmitDefaultValue=false)]
        public string AddressBlock2 { get; set; }

        /// <summary>
        /// AddressBlock3
        /// </summary>
        /// <value>AddressBlock3</value>
        [DataMember(Name="AddressBlock3", EmitDefaultValue=false)]
        public string AddressBlock3 { get; set; }

        /// <summary>
        /// AddressBlock4
        /// </summary>
        /// <value>AddressBlock4</value>
        [DataMember(Name="AddressBlock4", EmitDefaultValue=false)]
        public string AddressBlock4 { get; set; }

        /// <summary>
        /// AddressBlock5
        /// </summary>
        /// <value>AddressBlock5</value>
        [DataMember(Name="AddressBlock5", EmitDefaultValue=false)]
        public string AddressBlock5 { get; set; }

        /// <summary>
        /// AddressBlock6
        /// </summary>
        /// <value>AddressBlock6</value>
        [DataMember(Name="AddressBlock6", EmitDefaultValue=false)]
        public string AddressBlock6 { get; set; }

        /// <summary>
        /// AddressBlock7
        /// </summary>
        /// <value>AddressBlock7</value>
        [DataMember(Name="AddressBlock7", EmitDefaultValue=false)]
        public string AddressBlock7 { get; set; }

        /// <summary>
        /// AddressBlock8
        /// </summary>
        /// <value>AddressBlock8</value>
        [DataMember(Name="AddressBlock8", EmitDefaultValue=false)]
        public string AddressBlock8 { get; set; }

        /// <summary>
        /// AddressBlock9
        /// </summary>
        /// <value>AddressBlock9</value>
        [DataMember(Name="AddressBlock9", EmitDefaultValue=false)]
        public string AddressBlock9 { get; set; }

        /// <summary>
        /// Specifies whether the address is in English or French. This is for Canadian address only.
        /// </summary>
        /// <value>Specifies whether the address is in English or French. This is for Canadian address only.</value>
        [DataMember(Name="CanLanguage", EmitDefaultValue=false)]
        public string CanLanguage { get; set; }

        /// <summary>
        /// Specifies whether the building is a no stat building and therefore unable to receive mail.
        /// </summary>
        /// <value>Specifies whether the building is a no stat building and therefore unable to receive mail.</value>
        [DataMember(Name="DPVNoStat", EmitDefaultValue=false)]
        public string DPVNoStat { get; set; }

        /// <summary>
        /// Specifies whether the building is vacant, unoccupied for 90 days.
        /// </summary>
        /// <value>Specifies whether the building is vacant, unoccupied for 90 days.</value>
        [DataMember(Name="DPVVacant", EmitDefaultValue=false)]
        public string DPVVacant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressUSCANAPIOutput {\n");
            sb.Append("  UserFields: ").Append(UserFields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  BlockAddress: ").Append(BlockAddress).Append("\n");
            sb.Append("  PostalCodeBase: ").Append(PostalCodeBase).Append("\n");
            sb.Append("  PostalCodeAddOn: ").Append(PostalCodeAddOn).Append("\n");
            sb.Append("  AdditionalInputData: ").Append(AdditionalInputData).Append("\n");
            sb.Append("  CouldNotValidate: ").Append(CouldNotValidate).Append("\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  AddressRecordResult: ").Append(AddressRecordResult).Append("\n");
            sb.Append("  ApartmentLabel: ").Append(ApartmentLabel).Append("\n");
            sb.Append("  ApartmentLabelInput: ").Append(ApartmentLabelInput).Append("\n");
            sb.Append("  ApartmentLabelResult: ").Append(ApartmentLabelResult).Append("\n");
            sb.Append("  ApartmentNumber: ").Append(ApartmentNumber).Append("\n");
            sb.Append("  ApartmentNumberInput: ").Append(ApartmentNumberInput).Append("\n");
            sb.Append("  ApartmentNumberResult: ").Append(ApartmentNumberResult).Append("\n");
            sb.Append("  CityInput: ").Append(CityInput).Append("\n");
            sb.Append("  CityResult: ").Append(CityResult).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  CountryInput: ").Append(CountryInput).Append("\n");
            sb.Append("  CountryResult: ").Append(CountryResult).Append("\n");
            sb.Append("  CountryLevel: ").Append(CountryLevel).Append("\n");
            sb.Append("  FirmNameInput: ").Append(FirmNameInput).Append("\n");
            sb.Append("  FirmNameResult: ").Append(FirmNameResult).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  HouseNumberInput: ").Append(HouseNumberInput).Append("\n");
            sb.Append("  HouseNumberResult: ").Append(HouseNumberResult).Append("\n");
            sb.Append("  LeadingDirectional: ").Append(LeadingDirectional).Append("\n");
            sb.Append("  LeadingDirectionalInput: ").Append(LeadingDirectionalInput).Append("\n");
            sb.Append("  LeadingDirectionalResult: ").Append(LeadingDirectionalResult).Append("\n");
            sb.Append("  MultipleMatches: ").Append(MultipleMatches).Append("\n");
            sb.Append("  POBox: ").Append(POBox).Append("\n");
            sb.Append("  POBoxInput: ").Append(POBoxInput).Append("\n");
            sb.Append("  POBoxResult: ").Append(POBoxResult).Append("\n");
            sb.Append("  PostalCodeInput: ").Append(PostalCodeInput).Append("\n");
            sb.Append("  PostalCodeResult: ").Append(PostalCodeResult).Append("\n");
            sb.Append("  PostalCodeSource: ").Append(PostalCodeSource).Append("\n");
            sb.Append("  PostalCodeType: ").Append(PostalCodeType).Append("\n");
            sb.Append("  PostalCodeCityResult: ").Append(PostalCodeCityResult).Append("\n");
            sb.Append("  PrivateMailbox: ").Append(PrivateMailbox).Append("\n");
            sb.Append("  PrivateMailboxInput: ").Append(PrivateMailboxInput).Append("\n");
            sb.Append("  PrivateMailboxType: ").Append(PrivateMailboxType).Append("\n");
            sb.Append("  PrivateMailboxTypeInput: ").Append(PrivateMailboxTypeInput).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  RecordTypeDefault: ").Append(RecordTypeDefault).Append("\n");
            sb.Append("  RRHC: ").Append(RRHC).Append("\n");
            sb.Append("  RRHCInput: ").Append(RRHCInput).Append("\n");
            sb.Append("  RRHCResult: ").Append(RRHCResult).Append("\n");
            sb.Append("  RRHCType: ").Append(RRHCType).Append("\n");
            sb.Append("  StateProvinceInput: ").Append(StateProvinceInput).Append("\n");
            sb.Append("  StateProvinceResult: ").Append(StateProvinceResult).Append("\n");
            sb.Append("  StreetResult: ").Append(StreetResult).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetNameAliasType: ").Append(StreetNameAliasType).Append("\n");
            sb.Append("  StreetNameInput: ").Append(StreetNameInput).Append("\n");
            sb.Append("  StreetNameResult: ").Append(StreetNameResult).Append("\n");
            sb.Append("  StreetNameAbbreviatedAliasResult: ").Append(StreetNameAbbreviatedAliasResult).Append("\n");
            sb.Append("  StreetNamePreferredAliasResult: ").Append(StreetNamePreferredAliasResult).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixInput: ").Append(StreetSuffixInput).Append("\n");
            sb.Append("  StreetSuffixResult: ").Append(StreetSuffixResult).Append("\n");
            sb.Append("  TrailingDirectional: ").Append(TrailingDirectional).Append("\n");
            sb.Append("  TrailingDirectionalInput: ").Append(TrailingDirectionalInput).Append("\n");
            sb.Append("  TrailingDirectionalResult: ").Append(TrailingDirectionalResult).Append("\n");
            sb.Append("  MatchScore: ").Append(MatchScore).Append("\n");
            sb.Append("  USLACS: ").Append(USLACS).Append("\n");
            sb.Append("  USLACSReturnCode: ").Append(USLACSReturnCode).Append("\n");
            sb.Append("  RDI: ").Append(RDI).Append("\n");
            sb.Append("  CMRA: ").Append(CMRA).Append("\n");
            sb.Append("  DPV: ").Append(DPV).Append("\n");
            sb.Append("  DPVFootnote: ").Append(DPVFootnote).Append("\n");
            sb.Append("  SuiteLinkReturnCode: ").Append(SuiteLinkReturnCode).Append("\n");
            sb.Append("  SuiteLinkMatchCode: ").Append(SuiteLinkMatchCode).Append("\n");
            sb.Append("  SuiteLinkFidelity: ").Append(SuiteLinkFidelity).Append("\n");
            sb.Append("  USBCCheckDigit: ").Append(USBCCheckDigit).Append("\n");
            sb.Append("  PostalBarCode: ").Append(PostalBarCode).Append("\n");
            sb.Append("  USCarrierRouteCode: ").Append(USCarrierRouteCode).Append("\n");
            sb.Append("  USFIPSCountyNumber: ").Append(USFIPSCountyNumber).Append("\n");
            sb.Append("  USCountyName: ").Append(USCountyName).Append("\n");
            sb.Append("  USCongressionalDistrict: ").Append(USCongressionalDistrict).Append("\n");
            sb.Append("  USAltAddr: ").Append(USAltAddr).Append("\n");
            sb.Append("  USLastLineNumber: ").Append(USLastLineNumber).Append("\n");
            sb.Append("  USFinanceNumber: ").Append(USFinanceNumber).Append("\n");
            sb.Append("  USUrbanName: ").Append(USUrbanName).Append("\n");
            sb.Append("  USUrbanNameInput: ").Append(USUrbanNameInput).Append("\n");
            sb.Append("  USUrbanNameResult: ").Append(USUrbanNameResult).Append("\n");
            sb.Append("  MultimatchCount: ").Append(MultimatchCount).Append("\n");
            sb.Append("  AddressBlock1: ").Append(AddressBlock1).Append("\n");
            sb.Append("  AddressBlock2: ").Append(AddressBlock2).Append("\n");
            sb.Append("  AddressBlock3: ").Append(AddressBlock3).Append("\n");
            sb.Append("  AddressBlock4: ").Append(AddressBlock4).Append("\n");
            sb.Append("  AddressBlock5: ").Append(AddressBlock5).Append("\n");
            sb.Append("  AddressBlock6: ").Append(AddressBlock6).Append("\n");
            sb.Append("  AddressBlock7: ").Append(AddressBlock7).Append("\n");
            sb.Append("  AddressBlock8: ").Append(AddressBlock8).Append("\n");
            sb.Append("  AddressBlock9: ").Append(AddressBlock9).Append("\n");
            sb.Append("  CanLanguage: ").Append(CanLanguage).Append("\n");
            sb.Append("  DPVNoStat: ").Append(DPVNoStat).Append("\n");
            sb.Append("  DPVVacant: ").Append(DPVVacant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateMailingAddressUSCANAPIOutput);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressUSCANAPIOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateMailingAddressUSCANAPIOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressUSCANAPIOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserFields == input.UserFields ||
                    this.UserFields != null &&
                    input.UserFields != null &&
                    this.UserFields.SequenceEqual(input.UserFields)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FirmName == input.FirmName ||
                    (this.FirmName != null &&
                    this.FirmName.Equals(input.FirmName))
                ) && 
                (
                    this.BlockAddress == input.BlockAddress ||
                    (this.BlockAddress != null &&
                    this.BlockAddress.Equals(input.BlockAddress))
                ) && 
                (
                    this.PostalCodeBase == input.PostalCodeBase ||
                    (this.PostalCodeBase != null &&
                    this.PostalCodeBase.Equals(input.PostalCodeBase))
                ) && 
                (
                    this.PostalCodeAddOn == input.PostalCodeAddOn ||
                    (this.PostalCodeAddOn != null &&
                    this.PostalCodeAddOn.Equals(input.PostalCodeAddOn))
                ) && 
                (
                    this.AdditionalInputData == input.AdditionalInputData ||
                    (this.AdditionalInputData != null &&
                    this.AdditionalInputData.Equals(input.AdditionalInputData))
                ) && 
                (
                    this.CouldNotValidate == input.CouldNotValidate ||
                    (this.CouldNotValidate != null &&
                    this.CouldNotValidate.Equals(input.CouldNotValidate))
                ) && 
                (
                    this.AddressFormat == input.AddressFormat ||
                    (this.AddressFormat != null &&
                    this.AddressFormat.Equals(input.AddressFormat))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.AddressLine4 == input.AddressLine4 ||
                    (this.AddressLine4 != null &&
                    this.AddressLine4.Equals(input.AddressLine4))
                ) && 
                (
                    this.AddressRecordResult == input.AddressRecordResult ||
                    (this.AddressRecordResult != null &&
                    this.AddressRecordResult.Equals(input.AddressRecordResult))
                ) && 
                (
                    this.ApartmentLabel == input.ApartmentLabel ||
                    (this.ApartmentLabel != null &&
                    this.ApartmentLabel.Equals(input.ApartmentLabel))
                ) && 
                (
                    this.ApartmentLabelInput == input.ApartmentLabelInput ||
                    (this.ApartmentLabelInput != null &&
                    this.ApartmentLabelInput.Equals(input.ApartmentLabelInput))
                ) && 
                (
                    this.ApartmentLabelResult == input.ApartmentLabelResult ||
                    (this.ApartmentLabelResult != null &&
                    this.ApartmentLabelResult.Equals(input.ApartmentLabelResult))
                ) && 
                (
                    this.ApartmentNumber == input.ApartmentNumber ||
                    (this.ApartmentNumber != null &&
                    this.ApartmentNumber.Equals(input.ApartmentNumber))
                ) && 
                (
                    this.ApartmentNumberInput == input.ApartmentNumberInput ||
                    (this.ApartmentNumberInput != null &&
                    this.ApartmentNumberInput.Equals(input.ApartmentNumberInput))
                ) && 
                (
                    this.ApartmentNumberResult == input.ApartmentNumberResult ||
                    (this.ApartmentNumberResult != null &&
                    this.ApartmentNumberResult.Equals(input.ApartmentNumberResult))
                ) && 
                (
                    this.CityInput == input.CityInput ||
                    (this.CityInput != null &&
                    this.CityInput.Equals(input.CityInput))
                ) && 
                (
                    this.CityResult == input.CityResult ||
                    (this.CityResult != null &&
                    this.CityResult.Equals(input.CityResult))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.CountryInput == input.CountryInput ||
                    (this.CountryInput != null &&
                    this.CountryInput.Equals(input.CountryInput))
                ) && 
                (
                    this.CountryResult == input.CountryResult ||
                    (this.CountryResult != null &&
                    this.CountryResult.Equals(input.CountryResult))
                ) && 
                (
                    this.CountryLevel == input.CountryLevel ||
                    (this.CountryLevel != null &&
                    this.CountryLevel.Equals(input.CountryLevel))
                ) && 
                (
                    this.FirmNameInput == input.FirmNameInput ||
                    (this.FirmNameInput != null &&
                    this.FirmNameInput.Equals(input.FirmNameInput))
                ) && 
                (
                    this.FirmNameResult == input.FirmNameResult ||
                    (this.FirmNameResult != null &&
                    this.FirmNameResult.Equals(input.FirmNameResult))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                ) && 
                (
                    this.HouseNumberInput == input.HouseNumberInput ||
                    (this.HouseNumberInput != null &&
                    this.HouseNumberInput.Equals(input.HouseNumberInput))
                ) && 
                (
                    this.HouseNumberResult == input.HouseNumberResult ||
                    (this.HouseNumberResult != null &&
                    this.HouseNumberResult.Equals(input.HouseNumberResult))
                ) && 
                (
                    this.LeadingDirectional == input.LeadingDirectional ||
                    (this.LeadingDirectional != null &&
                    this.LeadingDirectional.Equals(input.LeadingDirectional))
                ) && 
                (
                    this.LeadingDirectionalInput == input.LeadingDirectionalInput ||
                    (this.LeadingDirectionalInput != null &&
                    this.LeadingDirectionalInput.Equals(input.LeadingDirectionalInput))
                ) && 
                (
                    this.LeadingDirectionalResult == input.LeadingDirectionalResult ||
                    (this.LeadingDirectionalResult != null &&
                    this.LeadingDirectionalResult.Equals(input.LeadingDirectionalResult))
                ) && 
                (
                    this.MultipleMatches == input.MultipleMatches ||
                    (this.MultipleMatches != null &&
                    this.MultipleMatches.Equals(input.MultipleMatches))
                ) && 
                (
                    this.POBox == input.POBox ||
                    (this.POBox != null &&
                    this.POBox.Equals(input.POBox))
                ) && 
                (
                    this.POBoxInput == input.POBoxInput ||
                    (this.POBoxInput != null &&
                    this.POBoxInput.Equals(input.POBoxInput))
                ) && 
                (
                    this.POBoxResult == input.POBoxResult ||
                    (this.POBoxResult != null &&
                    this.POBoxResult.Equals(input.POBoxResult))
                ) && 
                (
                    this.PostalCodeInput == input.PostalCodeInput ||
                    (this.PostalCodeInput != null &&
                    this.PostalCodeInput.Equals(input.PostalCodeInput))
                ) && 
                (
                    this.PostalCodeResult == input.PostalCodeResult ||
                    (this.PostalCodeResult != null &&
                    this.PostalCodeResult.Equals(input.PostalCodeResult))
                ) && 
                (
                    this.PostalCodeSource == input.PostalCodeSource ||
                    (this.PostalCodeSource != null &&
                    this.PostalCodeSource.Equals(input.PostalCodeSource))
                ) && 
                (
                    this.PostalCodeType == input.PostalCodeType ||
                    (this.PostalCodeType != null &&
                    this.PostalCodeType.Equals(input.PostalCodeType))
                ) && 
                (
                    this.PostalCodeCityResult == input.PostalCodeCityResult ||
                    (this.PostalCodeCityResult != null &&
                    this.PostalCodeCityResult.Equals(input.PostalCodeCityResult))
                ) && 
                (
                    this.PrivateMailbox == input.PrivateMailbox ||
                    (this.PrivateMailbox != null &&
                    this.PrivateMailbox.Equals(input.PrivateMailbox))
                ) && 
                (
                    this.PrivateMailboxInput == input.PrivateMailboxInput ||
                    (this.PrivateMailboxInput != null &&
                    this.PrivateMailboxInput.Equals(input.PrivateMailboxInput))
                ) && 
                (
                    this.PrivateMailboxType == input.PrivateMailboxType ||
                    (this.PrivateMailboxType != null &&
                    this.PrivateMailboxType.Equals(input.PrivateMailboxType))
                ) && 
                (
                    this.PrivateMailboxTypeInput == input.PrivateMailboxTypeInput ||
                    (this.PrivateMailboxTypeInput != null &&
                    this.PrivateMailboxTypeInput.Equals(input.PrivateMailboxTypeInput))
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.RecordTypeDefault == input.RecordTypeDefault ||
                    (this.RecordTypeDefault != null &&
                    this.RecordTypeDefault.Equals(input.RecordTypeDefault))
                ) && 
                (
                    this.RRHC == input.RRHC ||
                    (this.RRHC != null &&
                    this.RRHC.Equals(input.RRHC))
                ) && 
                (
                    this.RRHCInput == input.RRHCInput ||
                    (this.RRHCInput != null &&
                    this.RRHCInput.Equals(input.RRHCInput))
                ) && 
                (
                    this.RRHCResult == input.RRHCResult ||
                    (this.RRHCResult != null &&
                    this.RRHCResult.Equals(input.RRHCResult))
                ) && 
                (
                    this.RRHCType == input.RRHCType ||
                    (this.RRHCType != null &&
                    this.RRHCType.Equals(input.RRHCType))
                ) && 
                (
                    this.StateProvinceInput == input.StateProvinceInput ||
                    (this.StateProvinceInput != null &&
                    this.StateProvinceInput.Equals(input.StateProvinceInput))
                ) && 
                (
                    this.StateProvinceResult == input.StateProvinceResult ||
                    (this.StateProvinceResult != null &&
                    this.StateProvinceResult.Equals(input.StateProvinceResult))
                ) && 
                (
                    this.StreetResult == input.StreetResult ||
                    (this.StreetResult != null &&
                    this.StreetResult.Equals(input.StreetResult))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetNameAliasType == input.StreetNameAliasType ||
                    (this.StreetNameAliasType != null &&
                    this.StreetNameAliasType.Equals(input.StreetNameAliasType))
                ) && 
                (
                    this.StreetNameInput == input.StreetNameInput ||
                    (this.StreetNameInput != null &&
                    this.StreetNameInput.Equals(input.StreetNameInput))
                ) && 
                (
                    this.StreetNameResult == input.StreetNameResult ||
                    (this.StreetNameResult != null &&
                    this.StreetNameResult.Equals(input.StreetNameResult))
                ) && 
                (
                    this.StreetNameAbbreviatedAliasResult == input.StreetNameAbbreviatedAliasResult ||
                    (this.StreetNameAbbreviatedAliasResult != null &&
                    this.StreetNameAbbreviatedAliasResult.Equals(input.StreetNameAbbreviatedAliasResult))
                ) && 
                (
                    this.StreetNamePreferredAliasResult == input.StreetNamePreferredAliasResult ||
                    (this.StreetNamePreferredAliasResult != null &&
                    this.StreetNamePreferredAliasResult.Equals(input.StreetNamePreferredAliasResult))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.StreetSuffixInput == input.StreetSuffixInput ||
                    (this.StreetSuffixInput != null &&
                    this.StreetSuffixInput.Equals(input.StreetSuffixInput))
                ) && 
                (
                    this.StreetSuffixResult == input.StreetSuffixResult ||
                    (this.StreetSuffixResult != null &&
                    this.StreetSuffixResult.Equals(input.StreetSuffixResult))
                ) && 
                (
                    this.TrailingDirectional == input.TrailingDirectional ||
                    (this.TrailingDirectional != null &&
                    this.TrailingDirectional.Equals(input.TrailingDirectional))
                ) && 
                (
                    this.TrailingDirectionalInput == input.TrailingDirectionalInput ||
                    (this.TrailingDirectionalInput != null &&
                    this.TrailingDirectionalInput.Equals(input.TrailingDirectionalInput))
                ) && 
                (
                    this.TrailingDirectionalResult == input.TrailingDirectionalResult ||
                    (this.TrailingDirectionalResult != null &&
                    this.TrailingDirectionalResult.Equals(input.TrailingDirectionalResult))
                ) && 
                (
                    this.MatchScore == input.MatchScore ||
                    (this.MatchScore != null &&
                    this.MatchScore.Equals(input.MatchScore))
                ) && 
                (
                    this.USLACS == input.USLACS ||
                    (this.USLACS != null &&
                    this.USLACS.Equals(input.USLACS))
                ) && 
                (
                    this.USLACSReturnCode == input.USLACSReturnCode ||
                    (this.USLACSReturnCode != null &&
                    this.USLACSReturnCode.Equals(input.USLACSReturnCode))
                ) && 
                (
                    this.RDI == input.RDI ||
                    (this.RDI != null &&
                    this.RDI.Equals(input.RDI))
                ) && 
                (
                    this.CMRA == input.CMRA ||
                    (this.CMRA != null &&
                    this.CMRA.Equals(input.CMRA))
                ) && 
                (
                    this.DPV == input.DPV ||
                    (this.DPV != null &&
                    this.DPV.Equals(input.DPV))
                ) && 
                (
                    this.DPVFootnote == input.DPVFootnote ||
                    (this.DPVFootnote != null &&
                    this.DPVFootnote.Equals(input.DPVFootnote))
                ) && 
                (
                    this.SuiteLinkReturnCode == input.SuiteLinkReturnCode ||
                    (this.SuiteLinkReturnCode != null &&
                    this.SuiteLinkReturnCode.Equals(input.SuiteLinkReturnCode))
                ) && 
                (
                    this.SuiteLinkMatchCode == input.SuiteLinkMatchCode ||
                    (this.SuiteLinkMatchCode != null &&
                    this.SuiteLinkMatchCode.Equals(input.SuiteLinkMatchCode))
                ) && 
                (
                    this.SuiteLinkFidelity == input.SuiteLinkFidelity ||
                    (this.SuiteLinkFidelity != null &&
                    this.SuiteLinkFidelity.Equals(input.SuiteLinkFidelity))
                ) && 
                (
                    this.USBCCheckDigit == input.USBCCheckDigit ||
                    (this.USBCCheckDigit != null &&
                    this.USBCCheckDigit.Equals(input.USBCCheckDigit))
                ) && 
                (
                    this.PostalBarCode == input.PostalBarCode ||
                    (this.PostalBarCode != null &&
                    this.PostalBarCode.Equals(input.PostalBarCode))
                ) && 
                (
                    this.USCarrierRouteCode == input.USCarrierRouteCode ||
                    (this.USCarrierRouteCode != null &&
                    this.USCarrierRouteCode.Equals(input.USCarrierRouteCode))
                ) && 
                (
                    this.USFIPSCountyNumber == input.USFIPSCountyNumber ||
                    (this.USFIPSCountyNumber != null &&
                    this.USFIPSCountyNumber.Equals(input.USFIPSCountyNumber))
                ) && 
                (
                    this.USCountyName == input.USCountyName ||
                    (this.USCountyName != null &&
                    this.USCountyName.Equals(input.USCountyName))
                ) && 
                (
                    this.USCongressionalDistrict == input.USCongressionalDistrict ||
                    (this.USCongressionalDistrict != null &&
                    this.USCongressionalDistrict.Equals(input.USCongressionalDistrict))
                ) && 
                (
                    this.USAltAddr == input.USAltAddr ||
                    (this.USAltAddr != null &&
                    this.USAltAddr.Equals(input.USAltAddr))
                ) && 
                (
                    this.USLastLineNumber == input.USLastLineNumber ||
                    (this.USLastLineNumber != null &&
                    this.USLastLineNumber.Equals(input.USLastLineNumber))
                ) && 
                (
                    this.USFinanceNumber == input.USFinanceNumber ||
                    (this.USFinanceNumber != null &&
                    this.USFinanceNumber.Equals(input.USFinanceNumber))
                ) && 
                (
                    this.USUrbanName == input.USUrbanName ||
                    (this.USUrbanName != null &&
                    this.USUrbanName.Equals(input.USUrbanName))
                ) && 
                (
                    this.USUrbanNameInput == input.USUrbanNameInput ||
                    (this.USUrbanNameInput != null &&
                    this.USUrbanNameInput.Equals(input.USUrbanNameInput))
                ) && 
                (
                    this.USUrbanNameResult == input.USUrbanNameResult ||
                    (this.USUrbanNameResult != null &&
                    this.USUrbanNameResult.Equals(input.USUrbanNameResult))
                ) && 
                (
                    this.MultimatchCount == input.MultimatchCount ||
                    (this.MultimatchCount != null &&
                    this.MultimatchCount.Equals(input.MultimatchCount))
                ) && 
                (
                    this.AddressBlock1 == input.AddressBlock1 ||
                    (this.AddressBlock1 != null &&
                    this.AddressBlock1.Equals(input.AddressBlock1))
                ) && 
                (
                    this.AddressBlock2 == input.AddressBlock2 ||
                    (this.AddressBlock2 != null &&
                    this.AddressBlock2.Equals(input.AddressBlock2))
                ) && 
                (
                    this.AddressBlock3 == input.AddressBlock3 ||
                    (this.AddressBlock3 != null &&
                    this.AddressBlock3.Equals(input.AddressBlock3))
                ) && 
                (
                    this.AddressBlock4 == input.AddressBlock4 ||
                    (this.AddressBlock4 != null &&
                    this.AddressBlock4.Equals(input.AddressBlock4))
                ) && 
                (
                    this.AddressBlock5 == input.AddressBlock5 ||
                    (this.AddressBlock5 != null &&
                    this.AddressBlock5.Equals(input.AddressBlock5))
                ) && 
                (
                    this.AddressBlock6 == input.AddressBlock6 ||
                    (this.AddressBlock6 != null &&
                    this.AddressBlock6.Equals(input.AddressBlock6))
                ) && 
                (
                    this.AddressBlock7 == input.AddressBlock7 ||
                    (this.AddressBlock7 != null &&
                    this.AddressBlock7.Equals(input.AddressBlock7))
                ) && 
                (
                    this.AddressBlock8 == input.AddressBlock8 ||
                    (this.AddressBlock8 != null &&
                    this.AddressBlock8.Equals(input.AddressBlock8))
                ) && 
                (
                    this.AddressBlock9 == input.AddressBlock9 ||
                    (this.AddressBlock9 != null &&
                    this.AddressBlock9.Equals(input.AddressBlock9))
                ) && 
                (
                    this.CanLanguage == input.CanLanguage ||
                    (this.CanLanguage != null &&
                    this.CanLanguage.Equals(input.CanLanguage))
                ) && 
                (
                    this.DPVNoStat == input.DPVNoStat ||
                    (this.DPVNoStat != null &&
                    this.DPVNoStat.Equals(input.DPVNoStat))
                ) && 
                (
                    this.DPVVacant == input.DPVVacant ||
                    (this.DPVVacant != null &&
                    this.DPVVacant.Equals(input.DPVVacant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserFields != null)
                    hashCode = hashCode * 59 + this.UserFields.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hashCode = hashCode * 59 + this.StatusDescription.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.FirmName != null)
                    hashCode = hashCode * 59 + this.FirmName.GetHashCode();
                if (this.BlockAddress != null)
                    hashCode = hashCode * 59 + this.BlockAddress.GetHashCode();
                if (this.PostalCodeBase != null)
                    hashCode = hashCode * 59 + this.PostalCodeBase.GetHashCode();
                if (this.PostalCodeAddOn != null)
                    hashCode = hashCode * 59 + this.PostalCodeAddOn.GetHashCode();
                if (this.AdditionalInputData != null)
                    hashCode = hashCode * 59 + this.AdditionalInputData.GetHashCode();
                if (this.CouldNotValidate != null)
                    hashCode = hashCode * 59 + this.CouldNotValidate.GetHashCode();
                if (this.AddressFormat != null)
                    hashCode = hashCode * 59 + this.AddressFormat.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressLine4 != null)
                    hashCode = hashCode * 59 + this.AddressLine4.GetHashCode();
                if (this.AddressRecordResult != null)
                    hashCode = hashCode * 59 + this.AddressRecordResult.GetHashCode();
                if (this.ApartmentLabel != null)
                    hashCode = hashCode * 59 + this.ApartmentLabel.GetHashCode();
                if (this.ApartmentLabelInput != null)
                    hashCode = hashCode * 59 + this.ApartmentLabelInput.GetHashCode();
                if (this.ApartmentLabelResult != null)
                    hashCode = hashCode * 59 + this.ApartmentLabelResult.GetHashCode();
                if (this.ApartmentNumber != null)
                    hashCode = hashCode * 59 + this.ApartmentNumber.GetHashCode();
                if (this.ApartmentNumberInput != null)
                    hashCode = hashCode * 59 + this.ApartmentNumberInput.GetHashCode();
                if (this.ApartmentNumberResult != null)
                    hashCode = hashCode * 59 + this.ApartmentNumberResult.GetHashCode();
                if (this.CityInput != null)
                    hashCode = hashCode * 59 + this.CityInput.GetHashCode();
                if (this.CityResult != null)
                    hashCode = hashCode * 59 + this.CityResult.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.CountryInput != null)
                    hashCode = hashCode * 59 + this.CountryInput.GetHashCode();
                if (this.CountryResult != null)
                    hashCode = hashCode * 59 + this.CountryResult.GetHashCode();
                if (this.CountryLevel != null)
                    hashCode = hashCode * 59 + this.CountryLevel.GetHashCode();
                if (this.FirmNameInput != null)
                    hashCode = hashCode * 59 + this.FirmNameInput.GetHashCode();
                if (this.FirmNameResult != null)
                    hashCode = hashCode * 59 + this.FirmNameResult.GetHashCode();
                if (this.HouseNumber != null)
                    hashCode = hashCode * 59 + this.HouseNumber.GetHashCode();
                if (this.HouseNumberInput != null)
                    hashCode = hashCode * 59 + this.HouseNumberInput.GetHashCode();
                if (this.HouseNumberResult != null)
                    hashCode = hashCode * 59 + this.HouseNumberResult.GetHashCode();
                if (this.LeadingDirectional != null)
                    hashCode = hashCode * 59 + this.LeadingDirectional.GetHashCode();
                if (this.LeadingDirectionalInput != null)
                    hashCode = hashCode * 59 + this.LeadingDirectionalInput.GetHashCode();
                if (this.LeadingDirectionalResult != null)
                    hashCode = hashCode * 59 + this.LeadingDirectionalResult.GetHashCode();
                if (this.MultipleMatches != null)
                    hashCode = hashCode * 59 + this.MultipleMatches.GetHashCode();
                if (this.POBox != null)
                    hashCode = hashCode * 59 + this.POBox.GetHashCode();
                if (this.POBoxInput != null)
                    hashCode = hashCode * 59 + this.POBoxInput.GetHashCode();
                if (this.POBoxResult != null)
                    hashCode = hashCode * 59 + this.POBoxResult.GetHashCode();
                if (this.PostalCodeInput != null)
                    hashCode = hashCode * 59 + this.PostalCodeInput.GetHashCode();
                if (this.PostalCodeResult != null)
                    hashCode = hashCode * 59 + this.PostalCodeResult.GetHashCode();
                if (this.PostalCodeSource != null)
                    hashCode = hashCode * 59 + this.PostalCodeSource.GetHashCode();
                if (this.PostalCodeType != null)
                    hashCode = hashCode * 59 + this.PostalCodeType.GetHashCode();
                if (this.PostalCodeCityResult != null)
                    hashCode = hashCode * 59 + this.PostalCodeCityResult.GetHashCode();
                if (this.PrivateMailbox != null)
                    hashCode = hashCode * 59 + this.PrivateMailbox.GetHashCode();
                if (this.PrivateMailboxInput != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxInput.GetHashCode();
                if (this.PrivateMailboxType != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxType.GetHashCode();
                if (this.PrivateMailboxTypeInput != null)
                    hashCode = hashCode * 59 + this.PrivateMailboxTypeInput.GetHashCode();
                if (this.RecordType != null)
                    hashCode = hashCode * 59 + this.RecordType.GetHashCode();
                if (this.RecordTypeDefault != null)
                    hashCode = hashCode * 59 + this.RecordTypeDefault.GetHashCode();
                if (this.RRHC != null)
                    hashCode = hashCode * 59 + this.RRHC.GetHashCode();
                if (this.RRHCInput != null)
                    hashCode = hashCode * 59 + this.RRHCInput.GetHashCode();
                if (this.RRHCResult != null)
                    hashCode = hashCode * 59 + this.RRHCResult.GetHashCode();
                if (this.RRHCType != null)
                    hashCode = hashCode * 59 + this.RRHCType.GetHashCode();
                if (this.StateProvinceInput != null)
                    hashCode = hashCode * 59 + this.StateProvinceInput.GetHashCode();
                if (this.StateProvinceResult != null)
                    hashCode = hashCode * 59 + this.StateProvinceResult.GetHashCode();
                if (this.StreetResult != null)
                    hashCode = hashCode * 59 + this.StreetResult.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetNameAliasType != null)
                    hashCode = hashCode * 59 + this.StreetNameAliasType.GetHashCode();
                if (this.StreetNameInput != null)
                    hashCode = hashCode * 59 + this.StreetNameInput.GetHashCode();
                if (this.StreetNameResult != null)
                    hashCode = hashCode * 59 + this.StreetNameResult.GetHashCode();
                if (this.StreetNameAbbreviatedAliasResult != null)
                    hashCode = hashCode * 59 + this.StreetNameAbbreviatedAliasResult.GetHashCode();
                if (this.StreetNamePreferredAliasResult != null)
                    hashCode = hashCode * 59 + this.StreetNamePreferredAliasResult.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixInput != null)
                    hashCode = hashCode * 59 + this.StreetSuffixInput.GetHashCode();
                if (this.StreetSuffixResult != null)
                    hashCode = hashCode * 59 + this.StreetSuffixResult.GetHashCode();
                if (this.TrailingDirectional != null)
                    hashCode = hashCode * 59 + this.TrailingDirectional.GetHashCode();
                if (this.TrailingDirectionalInput != null)
                    hashCode = hashCode * 59 + this.TrailingDirectionalInput.GetHashCode();
                if (this.TrailingDirectionalResult != null)
                    hashCode = hashCode * 59 + this.TrailingDirectionalResult.GetHashCode();
                if (this.MatchScore != null)
                    hashCode = hashCode * 59 + this.MatchScore.GetHashCode();
                if (this.USLACS != null)
                    hashCode = hashCode * 59 + this.USLACS.GetHashCode();
                if (this.USLACSReturnCode != null)
                    hashCode = hashCode * 59 + this.USLACSReturnCode.GetHashCode();
                if (this.RDI != null)
                    hashCode = hashCode * 59 + this.RDI.GetHashCode();
                if (this.CMRA != null)
                    hashCode = hashCode * 59 + this.CMRA.GetHashCode();
                if (this.DPV != null)
                    hashCode = hashCode * 59 + this.DPV.GetHashCode();
                if (this.DPVFootnote != null)
                    hashCode = hashCode * 59 + this.DPVFootnote.GetHashCode();
                if (this.SuiteLinkReturnCode != null)
                    hashCode = hashCode * 59 + this.SuiteLinkReturnCode.GetHashCode();
                if (this.SuiteLinkMatchCode != null)
                    hashCode = hashCode * 59 + this.SuiteLinkMatchCode.GetHashCode();
                if (this.SuiteLinkFidelity != null)
                    hashCode = hashCode * 59 + this.SuiteLinkFidelity.GetHashCode();
                if (this.USBCCheckDigit != null)
                    hashCode = hashCode * 59 + this.USBCCheckDigit.GetHashCode();
                if (this.PostalBarCode != null)
                    hashCode = hashCode * 59 + this.PostalBarCode.GetHashCode();
                if (this.USCarrierRouteCode != null)
                    hashCode = hashCode * 59 + this.USCarrierRouteCode.GetHashCode();
                if (this.USFIPSCountyNumber != null)
                    hashCode = hashCode * 59 + this.USFIPSCountyNumber.GetHashCode();
                if (this.USCountyName != null)
                    hashCode = hashCode * 59 + this.USCountyName.GetHashCode();
                if (this.USCongressionalDistrict != null)
                    hashCode = hashCode * 59 + this.USCongressionalDistrict.GetHashCode();
                if (this.USAltAddr != null)
                    hashCode = hashCode * 59 + this.USAltAddr.GetHashCode();
                if (this.USLastLineNumber != null)
                    hashCode = hashCode * 59 + this.USLastLineNumber.GetHashCode();
                if (this.USFinanceNumber != null)
                    hashCode = hashCode * 59 + this.USFinanceNumber.GetHashCode();
                if (this.USUrbanName != null)
                    hashCode = hashCode * 59 + this.USUrbanName.GetHashCode();
                if (this.USUrbanNameInput != null)
                    hashCode = hashCode * 59 + this.USUrbanNameInput.GetHashCode();
                if (this.USUrbanNameResult != null)
                    hashCode = hashCode * 59 + this.USUrbanNameResult.GetHashCode();
                if (this.MultimatchCount != null)
                    hashCode = hashCode * 59 + this.MultimatchCount.GetHashCode();
                if (this.AddressBlock1 != null)
                    hashCode = hashCode * 59 + this.AddressBlock1.GetHashCode();
                if (this.AddressBlock2 != null)
                    hashCode = hashCode * 59 + this.AddressBlock2.GetHashCode();
                if (this.AddressBlock3 != null)
                    hashCode = hashCode * 59 + this.AddressBlock3.GetHashCode();
                if (this.AddressBlock4 != null)
                    hashCode = hashCode * 59 + this.AddressBlock4.GetHashCode();
                if (this.AddressBlock5 != null)
                    hashCode = hashCode * 59 + this.AddressBlock5.GetHashCode();
                if (this.AddressBlock6 != null)
                    hashCode = hashCode * 59 + this.AddressBlock6.GetHashCode();
                if (this.AddressBlock7 != null)
                    hashCode = hashCode * 59 + this.AddressBlock7.GetHashCode();
                if (this.AddressBlock8 != null)
                    hashCode = hashCode * 59 + this.AddressBlock8.GetHashCode();
                if (this.AddressBlock9 != null)
                    hashCode = hashCode * 59 + this.AddressBlock9.GetHashCode();
                if (this.CanLanguage != null)
                    hashCode = hashCode * 59 + this.CanLanguage.GetHashCode();
                if (this.DPVNoStat != null)
                    hashCode = hashCode * 59 + this.DPVNoStat.GetHashCode();
                if (this.DPVVacant != null)
                    hashCode = hashCode * 59 + this.DPVVacant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
