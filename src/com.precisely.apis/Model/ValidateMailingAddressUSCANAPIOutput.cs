/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace com.precisely.apis.Model
{
    /// <summary>
    /// ValidateMailingAddressUSCANAPIOutput
    /// </summary>
    [DataContract]
    public partial class ValidateMailingAddressUSCANAPIOutput :  IEquatable<ValidateMailingAddressUSCANAPIOutput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateMailingAddressUSCANAPIOutput" /> class.
        /// </summary>
        /// <param name="UserFields">These fields are returned, unmodified, in the user_fields section of the response..</param>
        /// <param name="Status">Reports the success or failure of the match attempt..</param>
        /// <param name="StatusCode">Reason for failure, if there is one..</param>
        /// <param name="StatusDescription">Specifies the description of the problem, if there is one..</param>
        /// <param name="AddressLine1">Specifies the first line of the validated and standardized address..</param>
        /// <param name="AddressLine2">Specifies the second line of the validated and standardized address..</param>
        /// <param name="City">Specifies the validated city name..</param>
        /// <param name="StateProvince">Specifies the validated state or province abbreviation..</param>
        /// <param name="PostalCode">Specifies the validated ZIP Code or postal code..</param>
        /// <param name="Country">Specifies the country in the format determined by the selection from ISO or UPO or English..</param>
        /// <param name="FirmName">Specifies the validated firm or company name..</param>
        /// <param name="BlockAddress">Specifies the formatted address, as it would appear on a physical mail piece. .</param>
        /// <param name="PostalCodeBase">Specifies the 5-digit ZIP Code..</param>
        /// <param name="PostalCodeAddOn">Specifies the 4-digit add-on part of the ZIP Code..</param>
        /// <param name="AdditionalInputData">Specifies input data not used by the address validation process..</param>
        /// <param name="CouldNotValidate">Specifies the address component that could not be validated, in case no match is found. .</param>
        /// <param name="AddressFormat">Specifies the type of address data being returned..</param>
        /// <param name="AddressLine3">Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes..</param>
        /// <param name="AddressLine4">Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes..</param>
        /// <param name="AddressRecordResult">Specifies the result codes that apply to international addresses only..</param>
        /// <param name="ApartmentLabel">Specifies the apartment designator such as STE or APT..</param>
        /// <param name="ApartmentLabelInput">Specifies the apartment designator such as STE or APT..</param>
        /// <param name="ApartmentLabelResult">Specifies the result of apartment label..</param>
        /// <param name="ApartmentNumber">Specifies the apartment number..</param>
        /// <param name="ApartmentNumberInput">Specifies the apartment number..</param>
        /// <param name="ApartmentNumberResult">Specifies the result of apartment number..</param>
        /// <param name="CityInput">Specifies the validated city name..</param>
        /// <param name="CityResult">Specifies the result of the validated city name..</param>
        /// <param name="Confidence">Specifies the the level of confidence assigned to the address being returned..</param>
        /// <param name="CountryInput">Specifies the name of the country..</param>
        /// <param name="CountryResult">Specifies the result code for the country..</param>
        /// <param name="CountryLevel">Specifies the category of address matching available..</param>
        /// <param name="FirmNameInput">Specifies the validated firm or company name..</param>
        /// <param name="FirmNameResult">Specifies if the firm name got validated..</param>
        /// <param name="HouseNumber">Specifies the house number..</param>
        /// <param name="HouseNumberInput">Specifies the house number..</param>
        /// <param name="HouseNumberResult">Specifies the result for house number..</param>
        /// <param name="LeadingDirectional">Specifies the leading directional..</param>
        /// <param name="LeadingDirectionalInput">Specifies the leading directional..</param>
        /// <param name="LeadingDirectionalResult">Specifies the result of leading directional..</param>
        /// <param name="MultipleMatches">Specifies the address component with multiple matches, if multiple matches were found: .</param>
        /// <param name="POBox">Specifies the post office box number..</param>
        /// <param name="POBoxInput">Specifies the post office box number..</param>
        /// <param name="POBoxResult">Specifies the result of post office box number..</param>
        /// <param name="PostalCodeInput">Specifies the validated postal code. For U.S. addresses, this is the ZIP code..</param>
        /// <param name="PostalCodeResult">Specifies the result of validated postal code..</param>
        /// <param name="PostalCodeSource">Specifies the result code..</param>
        /// <param name="PostalCodeType">Specifies the type of postal code returned..</param>
        /// <param name="PostalCodeCityResult">Specifies the international result code..</param>
        /// <param name="PrivateMailbox">Specifies the private mailbox indicator..</param>
        /// <param name="PrivateMailboxInput">Specifies the private mailbox indicator..</param>
        /// <param name="PrivateMailboxType">Specifies the type of private mailbox..</param>
        /// <param name="PrivateMailboxTypeInput">Specifies the type of private mailbox..</param>
        /// <param name="RecordType">Specifies the type of address record, as defined by U.S. and Canadian postal authorities..</param>
        /// <param name="RecordTypeDefault">Specifies the code indicating the default match..</param>
        /// <param name="RRHC">Specifies the Rural Route/Highway Contract indicator..</param>
        /// <param name="RRHCInput">Specifies the Rural Route/Highway Contract indicator..</param>
        /// <param name="RRHCResult">Specifies the result for Rural Route/Highway Contract indicator..</param>
        /// <param name="RRHCType">Specifies the result code for Rural Route/Highway Contract indicator..</param>
        /// <param name="StateProvinceInput">Specifies the validated state or province abbreviation..</param>
        /// <param name="StateProvinceResult">Specifies the result of validated state or province abbreviation..</param>
        /// <param name="StreetResult">Specifies the result codes for international addresses..</param>
        /// <param name="StreetName">Specifies the street name..</param>
        /// <param name="StreetNameAliasType">Specifies result code that applies to U.S. addresses only..</param>
        /// <param name="StreetNameInput">Specifies the street name..</param>
        /// <param name="StreetNameResult">Specifies the result of the street name..</param>
        /// <param name="StreetNameAbbreviatedAliasResult">Indicates the result of abbreviated alias processing..</param>
        /// <param name="StreetNamePreferredAliasResult">Specifies the result of preferred alias processing..</param>
        /// <param name="StreetSuffix">Specifies the street suffix..</param>
        /// <param name="StreetSuffixInput">Specifies the street suffix..</param>
        /// <param name="StreetSuffixResult">Specifies the result of the street suffix..</param>
        /// <param name="TrailingDirectional">Specifies the trailing directional..</param>
        /// <param name="TrailingDirectionalInput">Specifies the trailing directional..</param>
        /// <param name="TrailingDirectionalResult">Specifies the result of the trailing directional..</param>
        /// <param name="MatchScore">Specifies an indication of the degree to which the output address is correct..</param>
        /// <param name="USLACS">Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only)..</param>
        /// <param name="USLACSReturnCode">Specifies the the success or failure of LACS processing. This is for U.S. addresses only)..</param>
        /// <param name="RDI">Specifies the values indicating address type..</param>
        /// <param name="CMRA">Specifies if the address is a Commercial Mail Receiving Agency (CMRA)..</param>
        /// <param name="DPV">Specifies the results of Delivery Point Validation (DPV) processing..</param>
        /// <param name="DPVFootnote">Specifies the DPV footnote codes..</param>
        /// <param name="SuiteLinkReturnCode">Indicates whether or not API corrected the secondary address information (U.S. addresses only). .</param>
        /// <param name="SuiteLinkMatchCode">Provides additional information on the SuiteLink match attempt. (U.S. addresses only).</param>
        /// <param name="SuiteLinkFidelity">Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database..</param>
        /// <param name="USBCCheckDigit">Specifies the check-digit portion of the 11-digit delivery point barcode..</param>
        /// <param name="PostalBarCode">Specifies the delivery point portion of the delivery point barcode..</param>
        /// <param name="USCarrierRouteCode">Specifies carrier route code..</param>
        /// <param name="USFIPSCountyNumber">Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only)..</param>
        /// <param name="USCountyName">Specifies the county name (U.S. addresses only)..</param>
        /// <param name="USCongressionalDistrict">Specifies congressional district (U.S. addresses only)..</param>
        /// <param name="USAltAddr">Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only)..</param>
        /// <param name="USLastLineNumber">Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city..</param>
        /// <param name="USFinanceNumber">Specifies the finance number in which the address resides (U.S. addresses only)..</param>
        /// <param name="USUrbanName">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="USUrbanNameInput">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="USUrbanNameResult">U.S. address urbanization name. Used primarily for Puerto Rico addresses..</param>
        /// <param name="MultimatchCount">If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found..</param>
        /// <param name="AddressBlock1">AddressBlock1.</param>
        /// <param name="AddressBlock2">AddressBlock2.</param>
        /// <param name="AddressBlock3">AddressBlock3.</param>
        /// <param name="AddressBlock4">AddressBlock4.</param>
        /// <param name="AddressBlock5">AddressBlock5.</param>
        /// <param name="AddressBlock6">AddressBlock6.</param>
        /// <param name="AddressBlock7">AddressBlock7.</param>
        /// <param name="AddressBlock8">AddressBlock8.</param>
        /// <param name="AddressBlock9">AddressBlock9.</param>
        /// <param name="CanLanguage">Specifies whether the address is in English or French. This is for Canadian address only..</param>
        /// <param name="DPVNoStat">Specifies whether the building is a no stat building and therefore unable to receive mail..</param>
        /// <param name="DPVVacant">Specifies whether the building is vacant, unoccupied for 90 days..</param>
        public ValidateMailingAddressUSCANAPIOutput(List<ValidateMailingAddressInputRowUserFields> UserFields = null, string Status = null, string StatusCode = null, string StatusDescription = null, string AddressLine1 = null, string AddressLine2 = null, string City = null, string StateProvince = null, string PostalCode = null, string Country = null, string FirmName = null, string BlockAddress = null, string PostalCodeBase = null, string PostalCodeAddOn = null, string AdditionalInputData = null, string CouldNotValidate = null, string AddressFormat = null, string AddressLine3 = null, string AddressLine4 = null, string AddressRecordResult = null, string ApartmentLabel = null, string ApartmentLabelInput = null, string ApartmentLabelResult = null, string ApartmentNumber = null, string ApartmentNumberInput = null, string ApartmentNumberResult = null, string CityInput = null, string CityResult = null, string Confidence = null, string CountryInput = null, string CountryResult = null, string CountryLevel = null, string FirmNameInput = null, string FirmNameResult = null, string HouseNumber = null, string HouseNumberInput = null, string HouseNumberResult = null, string LeadingDirectional = null, string LeadingDirectionalInput = null, string LeadingDirectionalResult = null, string MultipleMatches = null, string POBox = null, string POBoxInput = null, string POBoxResult = null, string PostalCodeInput = null, string PostalCodeResult = null, string PostalCodeSource = null, string PostalCodeType = null, string PostalCodeCityResult = null, string PrivateMailbox = null, string PrivateMailboxInput = null, string PrivateMailboxType = null, string PrivateMailboxTypeInput = null, string RecordType = null, string RecordTypeDefault = null, string RRHC = null, string RRHCInput = null, string RRHCResult = null, string RRHCType = null, string StateProvinceInput = null, string StateProvinceResult = null, string StreetResult = null, string StreetName = null, string StreetNameAliasType = null, string StreetNameInput = null, string StreetNameResult = null, string StreetNameAbbreviatedAliasResult = null, string StreetNamePreferredAliasResult = null, string StreetSuffix = null, string StreetSuffixInput = null, string StreetSuffixResult = null, string TrailingDirectional = null, string TrailingDirectionalInput = null, string TrailingDirectionalResult = null, string MatchScore = null, string USLACS = null, string USLACSReturnCode = null, string RDI = null, string CMRA = null, string DPV = null, string DPVFootnote = null, string SuiteLinkReturnCode = null, string SuiteLinkMatchCode = null, string SuiteLinkFidelity = null, string USBCCheckDigit = null, string PostalBarCode = null, string USCarrierRouteCode = null, string USFIPSCountyNumber = null, string USCountyName = null, string USCongressionalDistrict = null, string USAltAddr = null, string USLastLineNumber = null, string USFinanceNumber = null, string USUrbanName = null, string USUrbanNameInput = null, string USUrbanNameResult = null, string MultimatchCount = null, string AddressBlock1 = null, string AddressBlock2 = null, string AddressBlock3 = null, string AddressBlock4 = null, string AddressBlock5 = null, string AddressBlock6 = null, string AddressBlock7 = null, string AddressBlock8 = null, string AddressBlock9 = null, string CanLanguage = null, string DPVNoStat = null, string DPVVacant = null)
        {
            this.UserFields = UserFields;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.StatusDescription = StatusDescription;
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.City = City;
            this.StateProvince = StateProvince;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.FirmName = FirmName;
            this.BlockAddress = BlockAddress;
            this.PostalCodeBase = PostalCodeBase;
            this.PostalCodeAddOn = PostalCodeAddOn;
            this.AdditionalInputData = AdditionalInputData;
            this.CouldNotValidate = CouldNotValidate;
            this.AddressFormat = AddressFormat;
            this.AddressLine3 = AddressLine3;
            this.AddressLine4 = AddressLine4;
            this.AddressRecordResult = AddressRecordResult;
            this.ApartmentLabel = ApartmentLabel;
            this.ApartmentLabelInput = ApartmentLabelInput;
            this.ApartmentLabelResult = ApartmentLabelResult;
            this.ApartmentNumber = ApartmentNumber;
            this.ApartmentNumberInput = ApartmentNumberInput;
            this.ApartmentNumberResult = ApartmentNumberResult;
            this.CityInput = CityInput;
            this.CityResult = CityResult;
            this.Confidence = Confidence;
            this.CountryInput = CountryInput;
            this.CountryResult = CountryResult;
            this.CountryLevel = CountryLevel;
            this.FirmNameInput = FirmNameInput;
            this.FirmNameResult = FirmNameResult;
            this.HouseNumber = HouseNumber;
            this.HouseNumberInput = HouseNumberInput;
            this.HouseNumberResult = HouseNumberResult;
            this.LeadingDirectional = LeadingDirectional;
            this.LeadingDirectionalInput = LeadingDirectionalInput;
            this.LeadingDirectionalResult = LeadingDirectionalResult;
            this.MultipleMatches = MultipleMatches;
            this.POBox = POBox;
            this.POBoxInput = POBoxInput;
            this.POBoxResult = POBoxResult;
            this.PostalCodeInput = PostalCodeInput;
            this.PostalCodeResult = PostalCodeResult;
            this.PostalCodeSource = PostalCodeSource;
            this.PostalCodeType = PostalCodeType;
            this.PostalCodeCityResult = PostalCodeCityResult;
            this.PrivateMailbox = PrivateMailbox;
            this.PrivateMailboxInput = PrivateMailboxInput;
            this.PrivateMailboxType = PrivateMailboxType;
            this.PrivateMailboxTypeInput = PrivateMailboxTypeInput;
            this.RecordType = RecordType;
            this.RecordTypeDefault = RecordTypeDefault;
            this.RRHC = RRHC;
            this.RRHCInput = RRHCInput;
            this.RRHCResult = RRHCResult;
            this.RRHCType = RRHCType;
            this.StateProvinceInput = StateProvinceInput;
            this.StateProvinceResult = StateProvinceResult;
            this.StreetResult = StreetResult;
            this.StreetName = StreetName;
            this.StreetNameAliasType = StreetNameAliasType;
            this.StreetNameInput = StreetNameInput;
            this.StreetNameResult = StreetNameResult;
            this.StreetNameAbbreviatedAliasResult = StreetNameAbbreviatedAliasResult;
            this.StreetNamePreferredAliasResult = StreetNamePreferredAliasResult;
            this.StreetSuffix = StreetSuffix;
            this.StreetSuffixInput = StreetSuffixInput;
            this.StreetSuffixResult = StreetSuffixResult;
            this.TrailingDirectional = TrailingDirectional;
            this.TrailingDirectionalInput = TrailingDirectionalInput;
            this.TrailingDirectionalResult = TrailingDirectionalResult;
            this.MatchScore = MatchScore;
            this.USLACS = USLACS;
            this.USLACSReturnCode = USLACSReturnCode;
            this.RDI = RDI;
            this.CMRA = CMRA;
            this.DPV = DPV;
            this.DPVFootnote = DPVFootnote;
            this.SuiteLinkReturnCode = SuiteLinkReturnCode;
            this.SuiteLinkMatchCode = SuiteLinkMatchCode;
            this.SuiteLinkFidelity = SuiteLinkFidelity;
            this.USBCCheckDigit = USBCCheckDigit;
            this.PostalBarCode = PostalBarCode;
            this.USCarrierRouteCode = USCarrierRouteCode;
            this.USFIPSCountyNumber = USFIPSCountyNumber;
            this.USCountyName = USCountyName;
            this.USCongressionalDistrict = USCongressionalDistrict;
            this.USAltAddr = USAltAddr;
            this.USLastLineNumber = USLastLineNumber;
            this.USFinanceNumber = USFinanceNumber;
            this.USUrbanName = USUrbanName;
            this.USUrbanNameInput = USUrbanNameInput;
            this.USUrbanNameResult = USUrbanNameResult;
            this.MultimatchCount = MultimatchCount;
            this.AddressBlock1 = AddressBlock1;
            this.AddressBlock2 = AddressBlock2;
            this.AddressBlock3 = AddressBlock3;
            this.AddressBlock4 = AddressBlock4;
            this.AddressBlock5 = AddressBlock5;
            this.AddressBlock6 = AddressBlock6;
            this.AddressBlock7 = AddressBlock7;
            this.AddressBlock8 = AddressBlock8;
            this.AddressBlock9 = AddressBlock9;
            this.CanLanguage = CanLanguage;
            this.DPVNoStat = DPVNoStat;
            this.DPVVacant = DPVVacant;
        }
        
        /// <summary>
        /// These fields are returned, unmodified, in the user_fields section of the response.
        /// </summary>
        /// <value>These fields are returned, unmodified, in the user_fields section of the response.</value>
        [DataMember(Name="user_fields", EmitDefaultValue=false)]
        public List<ValidateMailingAddressInputRowUserFields> UserFields { get; set; }
        /// <summary>
        /// Reports the success or failure of the match attempt.
        /// </summary>
        /// <value>Reports the success or failure of the match attempt.</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Reason for failure, if there is one.
        /// </summary>
        /// <value>Reason for failure, if there is one.</value>
        [DataMember(Name="Status.Code", EmitDefaultValue=false)]
        public string StatusCode { get; set; }
        /// <summary>
        /// Specifies the description of the problem, if there is one.
        /// </summary>
        /// <value>Specifies the description of the problem, if there is one.</value>
        [DataMember(Name="Status.description", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }
        /// <summary>
        /// Specifies the first line of the validated and standardized address.
        /// </summary>
        /// <value>Specifies the first line of the validated and standardized address.</value>
        [DataMember(Name="AddressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// Specifies the second line of the validated and standardized address.
        /// </summary>
        /// <value>Specifies the second line of the validated and standardized address.</value>
        [DataMember(Name="AddressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// Specifies the validated city name.
        /// </summary>
        /// <value>Specifies the validated city name.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Specifies the validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }
        /// <summary>
        /// Specifies the validated ZIP Code or postal code.
        /// </summary>
        /// <value>Specifies the validated ZIP Code or postal code.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// Specifies the country in the format determined by the selection from ISO or UPO or English.
        /// </summary>
        /// <value>Specifies the country in the format determined by the selection from ISO or UPO or English.</value>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Specifies the validated firm or company name.
        /// </summary>
        /// <value>Specifies the validated firm or company name.</value>
        [DataMember(Name="FirmName", EmitDefaultValue=false)]
        public string FirmName { get; set; }
        /// <summary>
        /// Specifies the formatted address, as it would appear on a physical mail piece. 
        /// </summary>
        /// <value>Specifies the formatted address, as it would appear on a physical mail piece. </value>
        [DataMember(Name="BlockAddress", EmitDefaultValue=false)]
        public string BlockAddress { get; set; }
        /// <summary>
        /// Specifies the 5-digit ZIP Code.
        /// </summary>
        /// <value>Specifies the 5-digit ZIP Code.</value>
        [DataMember(Name="PostalCode.Base", EmitDefaultValue=false)]
        public string PostalCodeBase { get; set; }
        /// <summary>
        /// Specifies the 4-digit add-on part of the ZIP Code.
        /// </summary>
        /// <value>Specifies the 4-digit add-on part of the ZIP Code.</value>
        [DataMember(Name="PostalCode.AddOn", EmitDefaultValue=false)]
        public string PostalCodeAddOn { get; set; }
        /// <summary>
        /// Specifies input data not used by the address validation process.
        /// </summary>
        /// <value>Specifies input data not used by the address validation process.</value>
        [DataMember(Name="AdditionalInputData", EmitDefaultValue=false)]
        public string AdditionalInputData { get; set; }
        /// <summary>
        /// Specifies the address component that could not be validated, in case no match is found. 
        /// </summary>
        /// <value>Specifies the address component that could not be validated, in case no match is found. </value>
        [DataMember(Name="CouldNotValidate", EmitDefaultValue=false)]
        public string CouldNotValidate { get; set; }
        /// <summary>
        /// Specifies the type of address data being returned.
        /// </summary>
        /// <value>Specifies the type of address data being returned.</value>
        [DataMember(Name="AddressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }
        /// <summary>
        /// Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.
        /// </summary>
        /// <value>Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.</value>
        [DataMember(Name="AddressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }
        /// <summary>
        /// Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.
        /// </summary>
        /// <value>Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.</value>
        [DataMember(Name="AddressLine4", EmitDefaultValue=false)]
        public string AddressLine4 { get; set; }
        /// <summary>
        /// Specifies the result codes that apply to international addresses only.
        /// </summary>
        /// <value>Specifies the result codes that apply to international addresses only.</value>
        [DataMember(Name="AddressRecord.Result", EmitDefaultValue=false)]
        public string AddressRecordResult { get; set; }
        /// <summary>
        /// Specifies the apartment designator such as STE or APT.
        /// </summary>
        /// <value>Specifies the apartment designator such as STE or APT.</value>
        [DataMember(Name="ApartmentLabel", EmitDefaultValue=false)]
        public string ApartmentLabel { get; set; }
        /// <summary>
        /// Specifies the apartment designator such as STE or APT.
        /// </summary>
        /// <value>Specifies the apartment designator such as STE or APT.</value>
        [DataMember(Name="ApartmentLabel.Input", EmitDefaultValue=false)]
        public string ApartmentLabelInput { get; set; }
        /// <summary>
        /// Specifies the result of apartment label.
        /// </summary>
        /// <value>Specifies the result of apartment label.</value>
        [DataMember(Name="ApartmentLabel.Result", EmitDefaultValue=false)]
        public string ApartmentLabelResult { get; set; }
        /// <summary>
        /// Specifies the apartment number.
        /// </summary>
        /// <value>Specifies the apartment number.</value>
        [DataMember(Name="ApartmentNumber", EmitDefaultValue=false)]
        public string ApartmentNumber { get; set; }
        /// <summary>
        /// Specifies the apartment number.
        /// </summary>
        /// <value>Specifies the apartment number.</value>
        [DataMember(Name="ApartmentNumber.Input", EmitDefaultValue=false)]
        public string ApartmentNumberInput { get; set; }
        /// <summary>
        /// Specifies the result of apartment number.
        /// </summary>
        /// <value>Specifies the result of apartment number.</value>
        [DataMember(Name="ApartmentNumber.Result", EmitDefaultValue=false)]
        public string ApartmentNumberResult { get; set; }
        /// <summary>
        /// Specifies the validated city name.
        /// </summary>
        /// <value>Specifies the validated city name.</value>
        [DataMember(Name="City.Input", EmitDefaultValue=false)]
        public string CityInput { get; set; }
        /// <summary>
        /// Specifies the result of the validated city name.
        /// </summary>
        /// <value>Specifies the result of the validated city name.</value>
        [DataMember(Name="City.Result", EmitDefaultValue=false)]
        public string CityResult { get; set; }
        /// <summary>
        /// Specifies the the level of confidence assigned to the address being returned.
        /// </summary>
        /// <value>Specifies the the level of confidence assigned to the address being returned.</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }
        /// <summary>
        /// Specifies the name of the country.
        /// </summary>
        /// <value>Specifies the name of the country.</value>
        [DataMember(Name="Country.Input", EmitDefaultValue=false)]
        public string CountryInput { get; set; }
        /// <summary>
        /// Specifies the result code for the country.
        /// </summary>
        /// <value>Specifies the result code for the country.</value>
        [DataMember(Name="Country.Result", EmitDefaultValue=false)]
        public string CountryResult { get; set; }
        /// <summary>
        /// Specifies the category of address matching available.
        /// </summary>
        /// <value>Specifies the category of address matching available.</value>
        [DataMember(Name="CountryLevel", EmitDefaultValue=false)]
        public string CountryLevel { get; set; }
        /// <summary>
        /// Specifies the validated firm or company name.
        /// </summary>
        /// <value>Specifies the validated firm or company name.</value>
        [DataMember(Name="FirmName.Input", EmitDefaultValue=false)]
        public string FirmNameInput { get; set; }
        /// <summary>
        /// Specifies if the firm name got validated.
        /// </summary>
        /// <value>Specifies if the firm name got validated.</value>
        [DataMember(Name="FirmName.Result", EmitDefaultValue=false)]
        public string FirmNameResult { get; set; }
        /// <summary>
        /// Specifies the house number.
        /// </summary>
        /// <value>Specifies the house number.</value>
        [DataMember(Name="HouseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }
        /// <summary>
        /// Specifies the house number.
        /// </summary>
        /// <value>Specifies the house number.</value>
        [DataMember(Name="HouseNumber.Input", EmitDefaultValue=false)]
        public string HouseNumberInput { get; set; }
        /// <summary>
        /// Specifies the result for house number.
        /// </summary>
        /// <value>Specifies the result for house number.</value>
        [DataMember(Name="HouseNumber.Result", EmitDefaultValue=false)]
        public string HouseNumberResult { get; set; }
        /// <summary>
        /// Specifies the leading directional.
        /// </summary>
        /// <value>Specifies the leading directional.</value>
        [DataMember(Name="LeadingDirectional", EmitDefaultValue=false)]
        public string LeadingDirectional { get; set; }
        /// <summary>
        /// Specifies the leading directional.
        /// </summary>
        /// <value>Specifies the leading directional.</value>
        [DataMember(Name="LeadingDirectional.Input", EmitDefaultValue=false)]
        public string LeadingDirectionalInput { get; set; }
        /// <summary>
        /// Specifies the result of leading directional.
        /// </summary>
        /// <value>Specifies the result of leading directional.</value>
        [DataMember(Name="LeadingDirectional.Result", EmitDefaultValue=false)]
        public string LeadingDirectionalResult { get; set; }
        /// <summary>
        /// Specifies the address component with multiple matches, if multiple matches were found: 
        /// </summary>
        /// <value>Specifies the address component with multiple matches, if multiple matches were found: </value>
        [DataMember(Name="MultipleMatches", EmitDefaultValue=false)]
        public string MultipleMatches { get; set; }
        /// <summary>
        /// Specifies the post office box number.
        /// </summary>
        /// <value>Specifies the post office box number.</value>
        [DataMember(Name="POBox", EmitDefaultValue=false)]
        public string POBox { get; set; }
        /// <summary>
        /// Specifies the post office box number.
        /// </summary>
        /// <value>Specifies the post office box number.</value>
        [DataMember(Name="POBox.Input", EmitDefaultValue=false)]
        public string POBoxInput { get; set; }
        /// <summary>
        /// Specifies the result of post office box number.
        /// </summary>
        /// <value>Specifies the result of post office box number.</value>
        [DataMember(Name="POBox.Result", EmitDefaultValue=false)]
        public string POBoxResult { get; set; }
        /// <summary>
        /// Specifies the validated postal code. For U.S. addresses, this is the ZIP code.
        /// </summary>
        /// <value>Specifies the validated postal code. For U.S. addresses, this is the ZIP code.</value>
        [DataMember(Name="PostalCode.Input", EmitDefaultValue=false)]
        public string PostalCodeInput { get; set; }
        /// <summary>
        /// Specifies the result of validated postal code.
        /// </summary>
        /// <value>Specifies the result of validated postal code.</value>
        [DataMember(Name="PostalCode.Result", EmitDefaultValue=false)]
        public string PostalCodeResult { get; set; }
        /// <summary>
        /// Specifies the result code.
        /// </summary>
        /// <value>Specifies the result code.</value>
        [DataMember(Name="PostalCode.Source", EmitDefaultValue=false)]
        public string PostalCodeSource { get; set; }
        /// <summary>
        /// Specifies the type of postal code returned.
        /// </summary>
        /// <value>Specifies the type of postal code returned.</value>
        [DataMember(Name="PostalCode.Type", EmitDefaultValue=false)]
        public string PostalCodeType { get; set; }
        /// <summary>
        /// Specifies the international result code.
        /// </summary>
        /// <value>Specifies the international result code.</value>
        [DataMember(Name="PostalCodeCity.Result", EmitDefaultValue=false)]
        public string PostalCodeCityResult { get; set; }
        /// <summary>
        /// Specifies the private mailbox indicator.
        /// </summary>
        /// <value>Specifies the private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox", EmitDefaultValue=false)]
        public string PrivateMailbox { get; set; }
        /// <summary>
        /// Specifies the private mailbox indicator.
        /// </summary>
        /// <value>Specifies the private mailbox indicator.</value>
        [DataMember(Name="PrivateMailbox.Input", EmitDefaultValue=false)]
        public string PrivateMailboxInput { get; set; }
        /// <summary>
        /// Specifies the type of private mailbox.
        /// </summary>
        /// <value>Specifies the type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type", EmitDefaultValue=false)]
        public string PrivateMailboxType { get; set; }
        /// <summary>
        /// Specifies the type of private mailbox.
        /// </summary>
        /// <value>Specifies the type of private mailbox.</value>
        [DataMember(Name="PrivateMailbox.Type.Input", EmitDefaultValue=false)]
        public string PrivateMailboxTypeInput { get; set; }
        /// <summary>
        /// Specifies the type of address record, as defined by U.S. and Canadian postal authorities.
        /// </summary>
        /// <value>Specifies the type of address record, as defined by U.S. and Canadian postal authorities.</value>
        [DataMember(Name="RecordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }
        /// <summary>
        /// Specifies the code indicating the default match.
        /// </summary>
        /// <value>Specifies the code indicating the default match.</value>
        [DataMember(Name="RecordType.Default", EmitDefaultValue=false)]
        public string RecordTypeDefault { get; set; }
        /// <summary>
        /// Specifies the Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC", EmitDefaultValue=false)]
        public string RRHC { get; set; }
        /// <summary>
        /// Specifies the Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Input", EmitDefaultValue=false)]
        public string RRHCInput { get; set; }
        /// <summary>
        /// Specifies the result for Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the result for Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Result", EmitDefaultValue=false)]
        public string RRHCResult { get; set; }
        /// <summary>
        /// Specifies the result code for Rural Route/Highway Contract indicator.
        /// </summary>
        /// <value>Specifies the result code for Rural Route/Highway Contract indicator.</value>
        [DataMember(Name="RRHC.Type", EmitDefaultValue=false)]
        public string RRHCType { get; set; }
        /// <summary>
        /// Specifies the validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince.Input", EmitDefaultValue=false)]
        public string StateProvinceInput { get; set; }
        /// <summary>
        /// Specifies the result of validated state or province abbreviation.
        /// </summary>
        /// <value>Specifies the result of validated state or province abbreviation.</value>
        [DataMember(Name="StateProvince.Result", EmitDefaultValue=false)]
        public string StateProvinceResult { get; set; }
        /// <summary>
        /// Specifies the result codes for international addresses.
        /// </summary>
        /// <value>Specifies the result codes for international addresses.</value>
        [DataMember(Name="Street.Result", EmitDefaultValue=false)]
        public string StreetResult { get; set; }
        /// <summary>
        /// Specifies the street name.
        /// </summary>
        /// <value>Specifies the street name.</value>
        [DataMember(Name="StreetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }
        /// <summary>
        /// Specifies result code that applies to U.S. addresses only.
        /// </summary>
        /// <value>Specifies result code that applies to U.S. addresses only.</value>
        [DataMember(Name="StreetName.Alias.Type", EmitDefaultValue=false)]
        public string StreetNameAliasType { get; set; }
        /// <summary>
        /// Specifies the street name.
        /// </summary>
        /// <value>Specifies the street name.</value>
        [DataMember(Name="StreetName.Input", EmitDefaultValue=false)]
        public string StreetNameInput { get; set; }
        /// <summary>
        /// Specifies the result of the street name.
        /// </summary>
        /// <value>Specifies the result of the street name.</value>
        [DataMember(Name="StreetName.Result", EmitDefaultValue=false)]
        public string StreetNameResult { get; set; }
        /// <summary>
        /// Indicates the result of abbreviated alias processing.
        /// </summary>
        /// <value>Indicates the result of abbreviated alias processing.</value>
        [DataMember(Name="StreetNameAbbreviatedAlias.Result", EmitDefaultValue=false)]
        public string StreetNameAbbreviatedAliasResult { get; set; }
        /// <summary>
        /// Specifies the result of preferred alias processing.
        /// </summary>
        /// <value>Specifies the result of preferred alias processing.</value>
        [DataMember(Name="StreetNamePreferredAlias.Result", EmitDefaultValue=false)]
        public string StreetNamePreferredAliasResult { get; set; }
        /// <summary>
        /// Specifies the street suffix.
        /// </summary>
        /// <value>Specifies the street suffix.</value>
        [DataMember(Name="StreetSuffix", EmitDefaultValue=false)]
        public string StreetSuffix { get; set; }
        /// <summary>
        /// Specifies the street suffix.
        /// </summary>
        /// <value>Specifies the street suffix.</value>
        [DataMember(Name="StreetSuffix.Input", EmitDefaultValue=false)]
        public string StreetSuffixInput { get; set; }
        /// <summary>
        /// Specifies the result of the street suffix.
        /// </summary>
        /// <value>Specifies the result of the street suffix.</value>
        [DataMember(Name="StreetSuffix.Result", EmitDefaultValue=false)]
        public string StreetSuffixResult { get; set; }
        /// <summary>
        /// Specifies the trailing directional.
        /// </summary>
        /// <value>Specifies the trailing directional.</value>
        [DataMember(Name="TrailingDirectional", EmitDefaultValue=false)]
        public string TrailingDirectional { get; set; }
        /// <summary>
        /// Specifies the trailing directional.
        /// </summary>
        /// <value>Specifies the trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Input", EmitDefaultValue=false)]
        public string TrailingDirectionalInput { get; set; }
        /// <summary>
        /// Specifies the result of the trailing directional.
        /// </summary>
        /// <value>Specifies the result of the trailing directional.</value>
        [DataMember(Name="TrailingDirectional.Result", EmitDefaultValue=false)]
        public string TrailingDirectionalResult { get; set; }
        /// <summary>
        /// Specifies an indication of the degree to which the output address is correct.
        /// </summary>
        /// <value>Specifies an indication of the degree to which the output address is correct.</value>
        [DataMember(Name="MatchScore", EmitDefaultValue=false)]
        public string MatchScore { get; set; }
        /// <summary>
        /// Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).
        /// </summary>
        /// <value>Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).</value>
        [DataMember(Name="USLACS", EmitDefaultValue=false)]
        public string USLACS { get; set; }
        /// <summary>
        /// Specifies the the success or failure of LACS processing. This is for U.S. addresses only).
        /// </summary>
        /// <value>Specifies the the success or failure of LACS processing. This is for U.S. addresses only).</value>
        [DataMember(Name="USLACS.ReturnCode", EmitDefaultValue=false)]
        public string USLACSReturnCode { get; set; }
        /// <summary>
        /// Specifies the values indicating address type.
        /// </summary>
        /// <value>Specifies the values indicating address type.</value>
        [DataMember(Name="RDI", EmitDefaultValue=false)]
        public string RDI { get; set; }
        /// <summary>
        /// Specifies if the address is a Commercial Mail Receiving Agency (CMRA).
        /// </summary>
        /// <value>Specifies if the address is a Commercial Mail Receiving Agency (CMRA).</value>
        [DataMember(Name="CMRA", EmitDefaultValue=false)]
        public string CMRA { get; set; }
        /// <summary>
        /// Specifies the results of Delivery Point Validation (DPV) processing.
        /// </summary>
        /// <value>Specifies the results of Delivery Point Validation (DPV) processing.</value>
        [DataMember(Name="DPV", EmitDefaultValue=false)]
        public string DPV { get; set; }
        /// <summary>
        /// Specifies the DPV footnote codes.
        /// </summary>
        /// <value>Specifies the DPV footnote codes.</value>
        [DataMember(Name="DPVFootnote", EmitDefaultValue=false)]
        public string DPVFootnote { get; set; }
        /// <summary>
        /// Indicates whether or not API corrected the secondary address information (U.S. addresses only). 
        /// </summary>
        /// <value>Indicates whether or not API corrected the secondary address information (U.S. addresses only). </value>
        [DataMember(Name="SuiteLinkReturnCode", EmitDefaultValue=false)]
        public string SuiteLinkReturnCode { get; set; }
        /// <summary>
        /// Provides additional information on the SuiteLink match attempt. (U.S. addresses only)
        /// </summary>
        /// <value>Provides additional information on the SuiteLink match attempt. (U.S. addresses only)</value>
        [DataMember(Name="SuiteLinkMatchCode", EmitDefaultValue=false)]
        public string SuiteLinkMatchCode { get; set; }
        /// <summary>
        /// Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.
        /// </summary>
        /// <value>Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.</value>
        [DataMember(Name="SuiteLinkFidelity", EmitDefaultValue=false)]
        public string SuiteLinkFidelity { get; set; }
        /// <summary>
        /// Specifies the check-digit portion of the 11-digit delivery point barcode.
        /// </summary>
        /// <value>Specifies the check-digit portion of the 11-digit delivery point barcode.</value>
        [DataMember(Name="USBCCheckDigit", EmitDefaultValue=false)]
        public string USBCCheckDigit { get; set; }
        /// <summary>
        /// Specifies the delivery point portion of the delivery point barcode.
        /// </summary>
        /// <value>Specifies the delivery point portion of the delivery point barcode.</value>
        [DataMember(Name="PostalBarCode", EmitDefaultValue=false)]
        public string PostalBarCode { get; set; }
        /// <summary>
        /// Specifies carrier route code.
        /// </summary>
        /// <value>Specifies carrier route code.</value>
        [DataMember(Name="USCarrierRouteCode", EmitDefaultValue=false)]
        public string USCarrierRouteCode { get; set; }
        /// <summary>
        /// Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).
        /// </summary>
        /// <value>Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).</value>
        [DataMember(Name="USFIPSCountyNumber", EmitDefaultValue=false)]
        public string USFIPSCountyNumber { get; set; }
        /// <summary>
        /// Specifies the county name (U.S. addresses only).
        /// </summary>
        /// <value>Specifies the county name (U.S. addresses only).</value>
        [DataMember(Name="USCountyName", EmitDefaultValue=false)]
        public string USCountyName { get; set; }
        /// <summary>
        /// Specifies congressional district (U.S. addresses only).
        /// </summary>
        /// <value>Specifies congressional district (U.S. addresses only).</value>
        [DataMember(Name="USCongressionalDistrict", EmitDefaultValue=false)]
        public string USCongressionalDistrict { get; set; }
        /// <summary>
        /// Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).
        /// </summary>
        /// <value>Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).</value>
        [DataMember(Name="USAltAddr", EmitDefaultValue=false)]
        public string USAltAddr { get; set; }
        /// <summary>
        /// Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.
        /// </summary>
        /// <value>Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.</value>
        [DataMember(Name="USLastLineNumber", EmitDefaultValue=false)]
        public string USLastLineNumber { get; set; }
        /// <summary>
        /// Specifies the finance number in which the address resides (U.S. addresses only).
        /// </summary>
        /// <value>Specifies the finance number in which the address resides (U.S. addresses only).</value>
        [DataMember(Name="USFinanceNumber", EmitDefaultValue=false)]
        public string USFinanceNumber { get; set; }
        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName", EmitDefaultValue=false)]
        public string USUrbanName { get; set; }
        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName.Input", EmitDefaultValue=false)]
        public string USUrbanNameInput { get; set; }
        /// <summary>
        /// U.S. address urbanization name. Used primarily for Puerto Rico addresses.
        /// </summary>
        /// <value>U.S. address urbanization name. Used primarily for Puerto Rico addresses.</value>
        [DataMember(Name="USUrbanName.Result", EmitDefaultValue=false)]
        public string USUrbanNameResult { get; set; }
        /// <summary>
        /// If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.
        /// </summary>
        /// <value>If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.</value>
        [DataMember(Name="MultimatchCount", EmitDefaultValue=false)]
        public string MultimatchCount { get; set; }
        /// <summary>
        /// AddressBlock1
        /// </summary>
        /// <value>AddressBlock1</value>
        [DataMember(Name="AddressBlock1", EmitDefaultValue=false)]
        public string AddressBlock1 { get; set; }
        /// <summary>
        /// AddressBlock2
        /// </summary>
        /// <value>AddressBlock2</value>
        [DataMember(Name="AddressBlock2", EmitDefaultValue=false)]
        public string AddressBlock2 { get; set; }
        /// <summary>
        /// AddressBlock3
        /// </summary>
        /// <value>AddressBlock3</value>
        [DataMember(Name="AddressBlock3", EmitDefaultValue=false)]
        public string AddressBlock3 { get; set; }
        /// <summary>
        /// AddressBlock4
        /// </summary>
        /// <value>AddressBlock4</value>
        [DataMember(Name="AddressBlock4", EmitDefaultValue=false)]
        public string AddressBlock4 { get; set; }
        /// <summary>
        /// AddressBlock5
        /// </summary>
        /// <value>AddressBlock5</value>
        [DataMember(Name="AddressBlock5", EmitDefaultValue=false)]
        public string AddressBlock5 { get; set; }
        /// <summary>
        /// AddressBlock6
        /// </summary>
        /// <value>AddressBlock6</value>
        [DataMember(Name="AddressBlock6", EmitDefaultValue=false)]
        public string AddressBlock6 { get; set; }
        /// <summary>
        /// AddressBlock7
        /// </summary>
        /// <value>AddressBlock7</value>
        [DataMember(Name="AddressBlock7", EmitDefaultValue=false)]
        public string AddressBlock7 { get; set; }
        /// <summary>
        /// AddressBlock8
        /// </summary>
        /// <value>AddressBlock8</value>
        [DataMember(Name="AddressBlock8", EmitDefaultValue=false)]
        public string AddressBlock8 { get; set; }
        /// <summary>
        /// AddressBlock9
        /// </summary>
        /// <value>AddressBlock9</value>
        [DataMember(Name="AddressBlock9", EmitDefaultValue=false)]
        public string AddressBlock9 { get; set; }
        /// <summary>
        /// Specifies whether the address is in English or French. This is for Canadian address only.
        /// </summary>
        /// <value>Specifies whether the address is in English or French. This is for Canadian address only.</value>
        [DataMember(Name="CanLanguage", EmitDefaultValue=false)]
        public string CanLanguage { get; set; }
        /// <summary>
        /// Specifies whether the building is a no stat building and therefore unable to receive mail.
        /// </summary>
        /// <value>Specifies whether the building is a no stat building and therefore unable to receive mail.</value>
        [DataMember(Name="DPVNoStat", EmitDefaultValue=false)]
        public string DPVNoStat { get; set; }
        /// <summary>
        /// Specifies whether the building is vacant, unoccupied for 90 days.
        /// </summary>
        /// <value>Specifies whether the building is vacant, unoccupied for 90 days.</value>
        [DataMember(Name="DPVVacant", EmitDefaultValue=false)]
        public string DPVVacant { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateMailingAddressUSCANAPIOutput {\n");
            sb.Append("  UserFields: ").Append(UserFields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  BlockAddress: ").Append(BlockAddress).Append("\n");
            sb.Append("  PostalCodeBase: ").Append(PostalCodeBase).Append("\n");
            sb.Append("  PostalCodeAddOn: ").Append(PostalCodeAddOn).Append("\n");
            sb.Append("  AdditionalInputData: ").Append(AdditionalInputData).Append("\n");
            sb.Append("  CouldNotValidate: ").Append(CouldNotValidate).Append("\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  AddressRecordResult: ").Append(AddressRecordResult).Append("\n");
            sb.Append("  ApartmentLabel: ").Append(ApartmentLabel).Append("\n");
            sb.Append("  ApartmentLabelInput: ").Append(ApartmentLabelInput).Append("\n");
            sb.Append("  ApartmentLabelResult: ").Append(ApartmentLabelResult).Append("\n");
            sb.Append("  ApartmentNumber: ").Append(ApartmentNumber).Append("\n");
            sb.Append("  ApartmentNumberInput: ").Append(ApartmentNumberInput).Append("\n");
            sb.Append("  ApartmentNumberResult: ").Append(ApartmentNumberResult).Append("\n");
            sb.Append("  CityInput: ").Append(CityInput).Append("\n");
            sb.Append("  CityResult: ").Append(CityResult).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  CountryInput: ").Append(CountryInput).Append("\n");
            sb.Append("  CountryResult: ").Append(CountryResult).Append("\n");
            sb.Append("  CountryLevel: ").Append(CountryLevel).Append("\n");
            sb.Append("  FirmNameInput: ").Append(FirmNameInput).Append("\n");
            sb.Append("  FirmNameResult: ").Append(FirmNameResult).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  HouseNumberInput: ").Append(HouseNumberInput).Append("\n");
            sb.Append("  HouseNumberResult: ").Append(HouseNumberResult).Append("\n");
            sb.Append("  LeadingDirectional: ").Append(LeadingDirectional).Append("\n");
            sb.Append("  LeadingDirectionalInput: ").Append(LeadingDirectionalInput).Append("\n");
            sb.Append("  LeadingDirectionalResult: ").Append(LeadingDirectionalResult).Append("\n");
            sb.Append("  MultipleMatches: ").Append(MultipleMatches).Append("\n");
            sb.Append("  POBox: ").Append(POBox).Append("\n");
            sb.Append("  POBoxInput: ").Append(POBoxInput).Append("\n");
            sb.Append("  POBoxResult: ").Append(POBoxResult).Append("\n");
            sb.Append("  PostalCodeInput: ").Append(PostalCodeInput).Append("\n");
            sb.Append("  PostalCodeResult: ").Append(PostalCodeResult).Append("\n");
            sb.Append("  PostalCodeSource: ").Append(PostalCodeSource).Append("\n");
            sb.Append("  PostalCodeType: ").Append(PostalCodeType).Append("\n");
            sb.Append("  PostalCodeCityResult: ").Append(PostalCodeCityResult).Append("\n");
            sb.Append("  PrivateMailbox: ").Append(PrivateMailbox).Append("\n");
            sb.Append("  PrivateMailboxInput: ").Append(PrivateMailboxInput).Append("\n");
            sb.Append("  PrivateMailboxType: ").Append(PrivateMailboxType).Append("\n");
            sb.Append("  PrivateMailboxTypeInput: ").Append(PrivateMailboxTypeInput).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  RecordTypeDefault: ").Append(RecordTypeDefault).Append("\n");
            sb.Append("  RRHC: ").Append(RRHC).Append("\n");
            sb.Append("  RRHCInput: ").Append(RRHCInput).Append("\n");
            sb.Append("  RRHCResult: ").Append(RRHCResult).Append("\n");
            sb.Append("  RRHCType: ").Append(RRHCType).Append("\n");
            sb.Append("  StateProvinceInput: ").Append(StateProvinceInput).Append("\n");
            sb.Append("  StateProvinceResult: ").Append(StateProvinceResult).Append("\n");
            sb.Append("  StreetResult: ").Append(StreetResult).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetNameAliasType: ").Append(StreetNameAliasType).Append("\n");
            sb.Append("  StreetNameInput: ").Append(StreetNameInput).Append("\n");
            sb.Append("  StreetNameResult: ").Append(StreetNameResult).Append("\n");
            sb.Append("  StreetNameAbbreviatedAliasResult: ").Append(StreetNameAbbreviatedAliasResult).Append("\n");
            sb.Append("  StreetNamePreferredAliasResult: ").Append(StreetNamePreferredAliasResult).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixInput: ").Append(StreetSuffixInput).Append("\n");
            sb.Append("  StreetSuffixResult: ").Append(StreetSuffixResult).Append("\n");
            sb.Append("  TrailingDirectional: ").Append(TrailingDirectional).Append("\n");
            sb.Append("  TrailingDirectionalInput: ").Append(TrailingDirectionalInput).Append("\n");
            sb.Append("  TrailingDirectionalResult: ").Append(TrailingDirectionalResult).Append("\n");
            sb.Append("  MatchScore: ").Append(MatchScore).Append("\n");
            sb.Append("  USLACS: ").Append(USLACS).Append("\n");
            sb.Append("  USLACSReturnCode: ").Append(USLACSReturnCode).Append("\n");
            sb.Append("  RDI: ").Append(RDI).Append("\n");
            sb.Append("  CMRA: ").Append(CMRA).Append("\n");
            sb.Append("  DPV: ").Append(DPV).Append("\n");
            sb.Append("  DPVFootnote: ").Append(DPVFootnote).Append("\n");
            sb.Append("  SuiteLinkReturnCode: ").Append(SuiteLinkReturnCode).Append("\n");
            sb.Append("  SuiteLinkMatchCode: ").Append(SuiteLinkMatchCode).Append("\n");
            sb.Append("  SuiteLinkFidelity: ").Append(SuiteLinkFidelity).Append("\n");
            sb.Append("  USBCCheckDigit: ").Append(USBCCheckDigit).Append("\n");
            sb.Append("  PostalBarCode: ").Append(PostalBarCode).Append("\n");
            sb.Append("  USCarrierRouteCode: ").Append(USCarrierRouteCode).Append("\n");
            sb.Append("  USFIPSCountyNumber: ").Append(USFIPSCountyNumber).Append("\n");
            sb.Append("  USCountyName: ").Append(USCountyName).Append("\n");
            sb.Append("  USCongressionalDistrict: ").Append(USCongressionalDistrict).Append("\n");
            sb.Append("  USAltAddr: ").Append(USAltAddr).Append("\n");
            sb.Append("  USLastLineNumber: ").Append(USLastLineNumber).Append("\n");
            sb.Append("  USFinanceNumber: ").Append(USFinanceNumber).Append("\n");
            sb.Append("  USUrbanName: ").Append(USUrbanName).Append("\n");
            sb.Append("  USUrbanNameInput: ").Append(USUrbanNameInput).Append("\n");
            sb.Append("  USUrbanNameResult: ").Append(USUrbanNameResult).Append("\n");
            sb.Append("  MultimatchCount: ").Append(MultimatchCount).Append("\n");
            sb.Append("  AddressBlock1: ").Append(AddressBlock1).Append("\n");
            sb.Append("  AddressBlock2: ").Append(AddressBlock2).Append("\n");
            sb.Append("  AddressBlock3: ").Append(AddressBlock3).Append("\n");
            sb.Append("  AddressBlock4: ").Append(AddressBlock4).Append("\n");
            sb.Append("  AddressBlock5: ").Append(AddressBlock5).Append("\n");
            sb.Append("  AddressBlock6: ").Append(AddressBlock6).Append("\n");
            sb.Append("  AddressBlock7: ").Append(AddressBlock7).Append("\n");
            sb.Append("  AddressBlock8: ").Append(AddressBlock8).Append("\n");
            sb.Append("  AddressBlock9: ").Append(AddressBlock9).Append("\n");
            sb.Append("  CanLanguage: ").Append(CanLanguage).Append("\n");
            sb.Append("  DPVNoStat: ").Append(DPVNoStat).Append("\n");
            sb.Append("  DPVVacant: ").Append(DPVVacant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ValidateMailingAddressUSCANAPIOutput);
        }

        /// <summary>
        /// Returns true if ValidateMailingAddressUSCANAPIOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidateMailingAddressUSCANAPIOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateMailingAddressUSCANAPIOutput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserFields == other.UserFields ||
                    this.UserFields != null &&
                    this.UserFields.SequenceEqual(other.UserFields)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.StatusDescription == other.StatusDescription ||
                    this.StatusDescription != null &&
                    this.StatusDescription.Equals(other.StatusDescription)
                ) && 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.StateProvince == other.StateProvince ||
                    this.StateProvince != null &&
                    this.StateProvince.Equals(other.StateProvince)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.FirmName == other.FirmName ||
                    this.FirmName != null &&
                    this.FirmName.Equals(other.FirmName)
                ) && 
                (
                    this.BlockAddress == other.BlockAddress ||
                    this.BlockAddress != null &&
                    this.BlockAddress.Equals(other.BlockAddress)
                ) && 
                (
                    this.PostalCodeBase == other.PostalCodeBase ||
                    this.PostalCodeBase != null &&
                    this.PostalCodeBase.Equals(other.PostalCodeBase)
                ) && 
                (
                    this.PostalCodeAddOn == other.PostalCodeAddOn ||
                    this.PostalCodeAddOn != null &&
                    this.PostalCodeAddOn.Equals(other.PostalCodeAddOn)
                ) && 
                (
                    this.AdditionalInputData == other.AdditionalInputData ||
                    this.AdditionalInputData != null &&
                    this.AdditionalInputData.Equals(other.AdditionalInputData)
                ) && 
                (
                    this.CouldNotValidate == other.CouldNotValidate ||
                    this.CouldNotValidate != null &&
                    this.CouldNotValidate.Equals(other.CouldNotValidate)
                ) && 
                (
                    this.AddressFormat == other.AddressFormat ||
                    this.AddressFormat != null &&
                    this.AddressFormat.Equals(other.AddressFormat)
                ) && 
                (
                    this.AddressLine3 == other.AddressLine3 ||
                    this.AddressLine3 != null &&
                    this.AddressLine3.Equals(other.AddressLine3)
                ) && 
                (
                    this.AddressLine4 == other.AddressLine4 ||
                    this.AddressLine4 != null &&
                    this.AddressLine4.Equals(other.AddressLine4)
                ) && 
                (
                    this.AddressRecordResult == other.AddressRecordResult ||
                    this.AddressRecordResult != null &&
                    this.AddressRecordResult.Equals(other.AddressRecordResult)
                ) && 
                (
                    this.ApartmentLabel == other.ApartmentLabel ||
                    this.ApartmentLabel != null &&
                    this.ApartmentLabel.Equals(other.ApartmentLabel)
                ) && 
                (
                    this.ApartmentLabelInput == other.ApartmentLabelInput ||
                    this.ApartmentLabelInput != null &&
                    this.ApartmentLabelInput.Equals(other.ApartmentLabelInput)
                ) && 
                (
                    this.ApartmentLabelResult == other.ApartmentLabelResult ||
                    this.ApartmentLabelResult != null &&
                    this.ApartmentLabelResult.Equals(other.ApartmentLabelResult)
                ) && 
                (
                    this.ApartmentNumber == other.ApartmentNumber ||
                    this.ApartmentNumber != null &&
                    this.ApartmentNumber.Equals(other.ApartmentNumber)
                ) && 
                (
                    this.ApartmentNumberInput == other.ApartmentNumberInput ||
                    this.ApartmentNumberInput != null &&
                    this.ApartmentNumberInput.Equals(other.ApartmentNumberInput)
                ) && 
                (
                    this.ApartmentNumberResult == other.ApartmentNumberResult ||
                    this.ApartmentNumberResult != null &&
                    this.ApartmentNumberResult.Equals(other.ApartmentNumberResult)
                ) && 
                (
                    this.CityInput == other.CityInput ||
                    this.CityInput != null &&
                    this.CityInput.Equals(other.CityInput)
                ) && 
                (
                    this.CityResult == other.CityResult ||
                    this.CityResult != null &&
                    this.CityResult.Equals(other.CityResult)
                ) && 
                (
                    this.Confidence == other.Confidence ||
                    this.Confidence != null &&
                    this.Confidence.Equals(other.Confidence)
                ) && 
                (
                    this.CountryInput == other.CountryInput ||
                    this.CountryInput != null &&
                    this.CountryInput.Equals(other.CountryInput)
                ) && 
                (
                    this.CountryResult == other.CountryResult ||
                    this.CountryResult != null &&
                    this.CountryResult.Equals(other.CountryResult)
                ) && 
                (
                    this.CountryLevel == other.CountryLevel ||
                    this.CountryLevel != null &&
                    this.CountryLevel.Equals(other.CountryLevel)
                ) && 
                (
                    this.FirmNameInput == other.FirmNameInput ||
                    this.FirmNameInput != null &&
                    this.FirmNameInput.Equals(other.FirmNameInput)
                ) && 
                (
                    this.FirmNameResult == other.FirmNameResult ||
                    this.FirmNameResult != null &&
                    this.FirmNameResult.Equals(other.FirmNameResult)
                ) && 
                (
                    this.HouseNumber == other.HouseNumber ||
                    this.HouseNumber != null &&
                    this.HouseNumber.Equals(other.HouseNumber)
                ) && 
                (
                    this.HouseNumberInput == other.HouseNumberInput ||
                    this.HouseNumberInput != null &&
                    this.HouseNumberInput.Equals(other.HouseNumberInput)
                ) && 
                (
                    this.HouseNumberResult == other.HouseNumberResult ||
                    this.HouseNumberResult != null &&
                    this.HouseNumberResult.Equals(other.HouseNumberResult)
                ) && 
                (
                    this.LeadingDirectional == other.LeadingDirectional ||
                    this.LeadingDirectional != null &&
                    this.LeadingDirectional.Equals(other.LeadingDirectional)
                ) && 
                (
                    this.LeadingDirectionalInput == other.LeadingDirectionalInput ||
                    this.LeadingDirectionalInput != null &&
                    this.LeadingDirectionalInput.Equals(other.LeadingDirectionalInput)
                ) && 
                (
                    this.LeadingDirectionalResult == other.LeadingDirectionalResult ||
                    this.LeadingDirectionalResult != null &&
                    this.LeadingDirectionalResult.Equals(other.LeadingDirectionalResult)
                ) && 
                (
                    this.MultipleMatches == other.MultipleMatches ||
                    this.MultipleMatches != null &&
                    this.MultipleMatches.Equals(other.MultipleMatches)
                ) && 
                (
                    this.POBox == other.POBox ||
                    this.POBox != null &&
                    this.POBox.Equals(other.POBox)
                ) && 
                (
                    this.POBoxInput == other.POBoxInput ||
                    this.POBoxInput != null &&
                    this.POBoxInput.Equals(other.POBoxInput)
                ) && 
                (
                    this.POBoxResult == other.POBoxResult ||
                    this.POBoxResult != null &&
                    this.POBoxResult.Equals(other.POBoxResult)
                ) && 
                (
                    this.PostalCodeInput == other.PostalCodeInput ||
                    this.PostalCodeInput != null &&
                    this.PostalCodeInput.Equals(other.PostalCodeInput)
                ) && 
                (
                    this.PostalCodeResult == other.PostalCodeResult ||
                    this.PostalCodeResult != null &&
                    this.PostalCodeResult.Equals(other.PostalCodeResult)
                ) && 
                (
                    this.PostalCodeSource == other.PostalCodeSource ||
                    this.PostalCodeSource != null &&
                    this.PostalCodeSource.Equals(other.PostalCodeSource)
                ) && 
                (
                    this.PostalCodeType == other.PostalCodeType ||
                    this.PostalCodeType != null &&
                    this.PostalCodeType.Equals(other.PostalCodeType)
                ) && 
                (
                    this.PostalCodeCityResult == other.PostalCodeCityResult ||
                    this.PostalCodeCityResult != null &&
                    this.PostalCodeCityResult.Equals(other.PostalCodeCityResult)
                ) && 
                (
                    this.PrivateMailbox == other.PrivateMailbox ||
                    this.PrivateMailbox != null &&
                    this.PrivateMailbox.Equals(other.PrivateMailbox)
                ) && 
                (
                    this.PrivateMailboxInput == other.PrivateMailboxInput ||
                    this.PrivateMailboxInput != null &&
                    this.PrivateMailboxInput.Equals(other.PrivateMailboxInput)
                ) && 
                (
                    this.PrivateMailboxType == other.PrivateMailboxType ||
                    this.PrivateMailboxType != null &&
                    this.PrivateMailboxType.Equals(other.PrivateMailboxType)
                ) && 
                (
                    this.PrivateMailboxTypeInput == other.PrivateMailboxTypeInput ||
                    this.PrivateMailboxTypeInput != null &&
                    this.PrivateMailboxTypeInput.Equals(other.PrivateMailboxTypeInput)
                ) && 
                (
                    this.RecordType == other.RecordType ||
                    this.RecordType != null &&
                    this.RecordType.Equals(other.RecordType)
                ) && 
                (
                    this.RecordTypeDefault == other.RecordTypeDefault ||
                    this.RecordTypeDefault != null &&
                    this.RecordTypeDefault.Equals(other.RecordTypeDefault)
                ) && 
                (
                    this.RRHC == other.RRHC ||
                    this.RRHC != null &&
                    this.RRHC.Equals(other.RRHC)
                ) && 
                (
                    this.RRHCInput == other.RRHCInput ||
                    this.RRHCInput != null &&
                    this.RRHCInput.Equals(other.RRHCInput)
                ) && 
                (
                    this.RRHCResult == other.RRHCResult ||
                    this.RRHCResult != null &&
                    this.RRHCResult.Equals(other.RRHCResult)
                ) && 
                (
                    this.RRHCType == other.RRHCType ||
                    this.RRHCType != null &&
                    this.RRHCType.Equals(other.RRHCType)
                ) && 
                (
                    this.StateProvinceInput == other.StateProvinceInput ||
                    this.StateProvinceInput != null &&
                    this.StateProvinceInput.Equals(other.StateProvinceInput)
                ) && 
                (
                    this.StateProvinceResult == other.StateProvinceResult ||
                    this.StateProvinceResult != null &&
                    this.StateProvinceResult.Equals(other.StateProvinceResult)
                ) && 
                (
                    this.StreetResult == other.StreetResult ||
                    this.StreetResult != null &&
                    this.StreetResult.Equals(other.StreetResult)
                ) && 
                (
                    this.StreetName == other.StreetName ||
                    this.StreetName != null &&
                    this.StreetName.Equals(other.StreetName)
                ) && 
                (
                    this.StreetNameAliasType == other.StreetNameAliasType ||
                    this.StreetNameAliasType != null &&
                    this.StreetNameAliasType.Equals(other.StreetNameAliasType)
                ) && 
                (
                    this.StreetNameInput == other.StreetNameInput ||
                    this.StreetNameInput != null &&
                    this.StreetNameInput.Equals(other.StreetNameInput)
                ) && 
                (
                    this.StreetNameResult == other.StreetNameResult ||
                    this.StreetNameResult != null &&
                    this.StreetNameResult.Equals(other.StreetNameResult)
                ) && 
                (
                    this.StreetNameAbbreviatedAliasResult == other.StreetNameAbbreviatedAliasResult ||
                    this.StreetNameAbbreviatedAliasResult != null &&
                    this.StreetNameAbbreviatedAliasResult.Equals(other.StreetNameAbbreviatedAliasResult)
                ) && 
                (
                    this.StreetNamePreferredAliasResult == other.StreetNamePreferredAliasResult ||
                    this.StreetNamePreferredAliasResult != null &&
                    this.StreetNamePreferredAliasResult.Equals(other.StreetNamePreferredAliasResult)
                ) && 
                (
                    this.StreetSuffix == other.StreetSuffix ||
                    this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(other.StreetSuffix)
                ) && 
                (
                    this.StreetSuffixInput == other.StreetSuffixInput ||
                    this.StreetSuffixInput != null &&
                    this.StreetSuffixInput.Equals(other.StreetSuffixInput)
                ) && 
                (
                    this.StreetSuffixResult == other.StreetSuffixResult ||
                    this.StreetSuffixResult != null &&
                    this.StreetSuffixResult.Equals(other.StreetSuffixResult)
                ) && 
                (
                    this.TrailingDirectional == other.TrailingDirectional ||
                    this.TrailingDirectional != null &&
                    this.TrailingDirectional.Equals(other.TrailingDirectional)
                ) && 
                (
                    this.TrailingDirectionalInput == other.TrailingDirectionalInput ||
                    this.TrailingDirectionalInput != null &&
                    this.TrailingDirectionalInput.Equals(other.TrailingDirectionalInput)
                ) && 
                (
                    this.TrailingDirectionalResult == other.TrailingDirectionalResult ||
                    this.TrailingDirectionalResult != null &&
                    this.TrailingDirectionalResult.Equals(other.TrailingDirectionalResult)
                ) && 
                (
                    this.MatchScore == other.MatchScore ||
                    this.MatchScore != null &&
                    this.MatchScore.Equals(other.MatchScore)
                ) && 
                (
                    this.USLACS == other.USLACS ||
                    this.USLACS != null &&
                    this.USLACS.Equals(other.USLACS)
                ) && 
                (
                    this.USLACSReturnCode == other.USLACSReturnCode ||
                    this.USLACSReturnCode != null &&
                    this.USLACSReturnCode.Equals(other.USLACSReturnCode)
                ) && 
                (
                    this.RDI == other.RDI ||
                    this.RDI != null &&
                    this.RDI.Equals(other.RDI)
                ) && 
                (
                    this.CMRA == other.CMRA ||
                    this.CMRA != null &&
                    this.CMRA.Equals(other.CMRA)
                ) && 
                (
                    this.DPV == other.DPV ||
                    this.DPV != null &&
                    this.DPV.Equals(other.DPV)
                ) && 
                (
                    this.DPVFootnote == other.DPVFootnote ||
                    this.DPVFootnote != null &&
                    this.DPVFootnote.Equals(other.DPVFootnote)
                ) && 
                (
                    this.SuiteLinkReturnCode == other.SuiteLinkReturnCode ||
                    this.SuiteLinkReturnCode != null &&
                    this.SuiteLinkReturnCode.Equals(other.SuiteLinkReturnCode)
                ) && 
                (
                    this.SuiteLinkMatchCode == other.SuiteLinkMatchCode ||
                    this.SuiteLinkMatchCode != null &&
                    this.SuiteLinkMatchCode.Equals(other.SuiteLinkMatchCode)
                ) && 
                (
                    this.SuiteLinkFidelity == other.SuiteLinkFidelity ||
                    this.SuiteLinkFidelity != null &&
                    this.SuiteLinkFidelity.Equals(other.SuiteLinkFidelity)
                ) && 
                (
                    this.USBCCheckDigit == other.USBCCheckDigit ||
                    this.USBCCheckDigit != null &&
                    this.USBCCheckDigit.Equals(other.USBCCheckDigit)
                ) && 
                (
                    this.PostalBarCode == other.PostalBarCode ||
                    this.PostalBarCode != null &&
                    this.PostalBarCode.Equals(other.PostalBarCode)
                ) && 
                (
                    this.USCarrierRouteCode == other.USCarrierRouteCode ||
                    this.USCarrierRouteCode != null &&
                    this.USCarrierRouteCode.Equals(other.USCarrierRouteCode)
                ) && 
                (
                    this.USFIPSCountyNumber == other.USFIPSCountyNumber ||
                    this.USFIPSCountyNumber != null &&
                    this.USFIPSCountyNumber.Equals(other.USFIPSCountyNumber)
                ) && 
                (
                    this.USCountyName == other.USCountyName ||
                    this.USCountyName != null &&
                    this.USCountyName.Equals(other.USCountyName)
                ) && 
                (
                    this.USCongressionalDistrict == other.USCongressionalDistrict ||
                    this.USCongressionalDistrict != null &&
                    this.USCongressionalDistrict.Equals(other.USCongressionalDistrict)
                ) && 
                (
                    this.USAltAddr == other.USAltAddr ||
                    this.USAltAddr != null &&
                    this.USAltAddr.Equals(other.USAltAddr)
                ) && 
                (
                    this.USLastLineNumber == other.USLastLineNumber ||
                    this.USLastLineNumber != null &&
                    this.USLastLineNumber.Equals(other.USLastLineNumber)
                ) && 
                (
                    this.USFinanceNumber == other.USFinanceNumber ||
                    this.USFinanceNumber != null &&
                    this.USFinanceNumber.Equals(other.USFinanceNumber)
                ) && 
                (
                    this.USUrbanName == other.USUrbanName ||
                    this.USUrbanName != null &&
                    this.USUrbanName.Equals(other.USUrbanName)
                ) && 
                (
                    this.USUrbanNameInput == other.USUrbanNameInput ||
                    this.USUrbanNameInput != null &&
                    this.USUrbanNameInput.Equals(other.USUrbanNameInput)
                ) && 
                (
                    this.USUrbanNameResult == other.USUrbanNameResult ||
                    this.USUrbanNameResult != null &&
                    this.USUrbanNameResult.Equals(other.USUrbanNameResult)
                ) && 
                (
                    this.MultimatchCount == other.MultimatchCount ||
                    this.MultimatchCount != null &&
                    this.MultimatchCount.Equals(other.MultimatchCount)
                ) && 
                (
                    this.AddressBlock1 == other.AddressBlock1 ||
                    this.AddressBlock1 != null &&
                    this.AddressBlock1.Equals(other.AddressBlock1)
                ) && 
                (
                    this.AddressBlock2 == other.AddressBlock2 ||
                    this.AddressBlock2 != null &&
                    this.AddressBlock2.Equals(other.AddressBlock2)
                ) && 
                (
                    this.AddressBlock3 == other.AddressBlock3 ||
                    this.AddressBlock3 != null &&
                    this.AddressBlock3.Equals(other.AddressBlock3)
                ) && 
                (
                    this.AddressBlock4 == other.AddressBlock4 ||
                    this.AddressBlock4 != null &&
                    this.AddressBlock4.Equals(other.AddressBlock4)
                ) && 
                (
                    this.AddressBlock5 == other.AddressBlock5 ||
                    this.AddressBlock5 != null &&
                    this.AddressBlock5.Equals(other.AddressBlock5)
                ) && 
                (
                    this.AddressBlock6 == other.AddressBlock6 ||
                    this.AddressBlock6 != null &&
                    this.AddressBlock6.Equals(other.AddressBlock6)
                ) && 
                (
                    this.AddressBlock7 == other.AddressBlock7 ||
                    this.AddressBlock7 != null &&
                    this.AddressBlock7.Equals(other.AddressBlock7)
                ) && 
                (
                    this.AddressBlock8 == other.AddressBlock8 ||
                    this.AddressBlock8 != null &&
                    this.AddressBlock8.Equals(other.AddressBlock8)
                ) && 
                (
                    this.AddressBlock9 == other.AddressBlock9 ||
                    this.AddressBlock9 != null &&
                    this.AddressBlock9.Equals(other.AddressBlock9)
                ) && 
                (
                    this.CanLanguage == other.CanLanguage ||
                    this.CanLanguage != null &&
                    this.CanLanguage.Equals(other.CanLanguage)
                ) && 
                (
                    this.DPVNoStat == other.DPVNoStat ||
                    this.DPVNoStat != null &&
                    this.DPVNoStat.Equals(other.DPVNoStat)
                ) && 
                (
                    this.DPVVacant == other.DPVVacant ||
                    this.DPVVacant != null &&
                    this.DPVVacant.Equals(other.DPVVacant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserFields != null)
                    hash = hash * 59 + this.UserFields.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hash = hash * 59 + this.StatusDescription.GetHashCode();
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hash = hash * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.FirmName != null)
                    hash = hash * 59 + this.FirmName.GetHashCode();
                if (this.BlockAddress != null)
                    hash = hash * 59 + this.BlockAddress.GetHashCode();
                if (this.PostalCodeBase != null)
                    hash = hash * 59 + this.PostalCodeBase.GetHashCode();
                if (this.PostalCodeAddOn != null)
                    hash = hash * 59 + this.PostalCodeAddOn.GetHashCode();
                if (this.AdditionalInputData != null)
                    hash = hash * 59 + this.AdditionalInputData.GetHashCode();
                if (this.CouldNotValidate != null)
                    hash = hash * 59 + this.CouldNotValidate.GetHashCode();
                if (this.AddressFormat != null)
                    hash = hash * 59 + this.AddressFormat.GetHashCode();
                if (this.AddressLine3 != null)
                    hash = hash * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressLine4 != null)
                    hash = hash * 59 + this.AddressLine4.GetHashCode();
                if (this.AddressRecordResult != null)
                    hash = hash * 59 + this.AddressRecordResult.GetHashCode();
                if (this.ApartmentLabel != null)
                    hash = hash * 59 + this.ApartmentLabel.GetHashCode();
                if (this.ApartmentLabelInput != null)
                    hash = hash * 59 + this.ApartmentLabelInput.GetHashCode();
                if (this.ApartmentLabelResult != null)
                    hash = hash * 59 + this.ApartmentLabelResult.GetHashCode();
                if (this.ApartmentNumber != null)
                    hash = hash * 59 + this.ApartmentNumber.GetHashCode();
                if (this.ApartmentNumberInput != null)
                    hash = hash * 59 + this.ApartmentNumberInput.GetHashCode();
                if (this.ApartmentNumberResult != null)
                    hash = hash * 59 + this.ApartmentNumberResult.GetHashCode();
                if (this.CityInput != null)
                    hash = hash * 59 + this.CityInput.GetHashCode();
                if (this.CityResult != null)
                    hash = hash * 59 + this.CityResult.GetHashCode();
                if (this.Confidence != null)
                    hash = hash * 59 + this.Confidence.GetHashCode();
                if (this.CountryInput != null)
                    hash = hash * 59 + this.CountryInput.GetHashCode();
                if (this.CountryResult != null)
                    hash = hash * 59 + this.CountryResult.GetHashCode();
                if (this.CountryLevel != null)
                    hash = hash * 59 + this.CountryLevel.GetHashCode();
                if (this.FirmNameInput != null)
                    hash = hash * 59 + this.FirmNameInput.GetHashCode();
                if (this.FirmNameResult != null)
                    hash = hash * 59 + this.FirmNameResult.GetHashCode();
                if (this.HouseNumber != null)
                    hash = hash * 59 + this.HouseNumber.GetHashCode();
                if (this.HouseNumberInput != null)
                    hash = hash * 59 + this.HouseNumberInput.GetHashCode();
                if (this.HouseNumberResult != null)
                    hash = hash * 59 + this.HouseNumberResult.GetHashCode();
                if (this.LeadingDirectional != null)
                    hash = hash * 59 + this.LeadingDirectional.GetHashCode();
                if (this.LeadingDirectionalInput != null)
                    hash = hash * 59 + this.LeadingDirectionalInput.GetHashCode();
                if (this.LeadingDirectionalResult != null)
                    hash = hash * 59 + this.LeadingDirectionalResult.GetHashCode();
                if (this.MultipleMatches != null)
                    hash = hash * 59 + this.MultipleMatches.GetHashCode();
                if (this.POBox != null)
                    hash = hash * 59 + this.POBox.GetHashCode();
                if (this.POBoxInput != null)
                    hash = hash * 59 + this.POBoxInput.GetHashCode();
                if (this.POBoxResult != null)
                    hash = hash * 59 + this.POBoxResult.GetHashCode();
                if (this.PostalCodeInput != null)
                    hash = hash * 59 + this.PostalCodeInput.GetHashCode();
                if (this.PostalCodeResult != null)
                    hash = hash * 59 + this.PostalCodeResult.GetHashCode();
                if (this.PostalCodeSource != null)
                    hash = hash * 59 + this.PostalCodeSource.GetHashCode();
                if (this.PostalCodeType != null)
                    hash = hash * 59 + this.PostalCodeType.GetHashCode();
                if (this.PostalCodeCityResult != null)
                    hash = hash * 59 + this.PostalCodeCityResult.GetHashCode();
                if (this.PrivateMailbox != null)
                    hash = hash * 59 + this.PrivateMailbox.GetHashCode();
                if (this.PrivateMailboxInput != null)
                    hash = hash * 59 + this.PrivateMailboxInput.GetHashCode();
                if (this.PrivateMailboxType != null)
                    hash = hash * 59 + this.PrivateMailboxType.GetHashCode();
                if (this.PrivateMailboxTypeInput != null)
                    hash = hash * 59 + this.PrivateMailboxTypeInput.GetHashCode();
                if (this.RecordType != null)
                    hash = hash * 59 + this.RecordType.GetHashCode();
                if (this.RecordTypeDefault != null)
                    hash = hash * 59 + this.RecordTypeDefault.GetHashCode();
                if (this.RRHC != null)
                    hash = hash * 59 + this.RRHC.GetHashCode();
                if (this.RRHCInput != null)
                    hash = hash * 59 + this.RRHCInput.GetHashCode();
                if (this.RRHCResult != null)
                    hash = hash * 59 + this.RRHCResult.GetHashCode();
                if (this.RRHCType != null)
                    hash = hash * 59 + this.RRHCType.GetHashCode();
                if (this.StateProvinceInput != null)
                    hash = hash * 59 + this.StateProvinceInput.GetHashCode();
                if (this.StateProvinceResult != null)
                    hash = hash * 59 + this.StateProvinceResult.GetHashCode();
                if (this.StreetResult != null)
                    hash = hash * 59 + this.StreetResult.GetHashCode();
                if (this.StreetName != null)
                    hash = hash * 59 + this.StreetName.GetHashCode();
                if (this.StreetNameAliasType != null)
                    hash = hash * 59 + this.StreetNameAliasType.GetHashCode();
                if (this.StreetNameInput != null)
                    hash = hash * 59 + this.StreetNameInput.GetHashCode();
                if (this.StreetNameResult != null)
                    hash = hash * 59 + this.StreetNameResult.GetHashCode();
                if (this.StreetNameAbbreviatedAliasResult != null)
                    hash = hash * 59 + this.StreetNameAbbreviatedAliasResult.GetHashCode();
                if (this.StreetNamePreferredAliasResult != null)
                    hash = hash * 59 + this.StreetNamePreferredAliasResult.GetHashCode();
                if (this.StreetSuffix != null)
                    hash = hash * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixInput != null)
                    hash = hash * 59 + this.StreetSuffixInput.GetHashCode();
                if (this.StreetSuffixResult != null)
                    hash = hash * 59 + this.StreetSuffixResult.GetHashCode();
                if (this.TrailingDirectional != null)
                    hash = hash * 59 + this.TrailingDirectional.GetHashCode();
                if (this.TrailingDirectionalInput != null)
                    hash = hash * 59 + this.TrailingDirectionalInput.GetHashCode();
                if (this.TrailingDirectionalResult != null)
                    hash = hash * 59 + this.TrailingDirectionalResult.GetHashCode();
                if (this.MatchScore != null)
                    hash = hash * 59 + this.MatchScore.GetHashCode();
                if (this.USLACS != null)
                    hash = hash * 59 + this.USLACS.GetHashCode();
                if (this.USLACSReturnCode != null)
                    hash = hash * 59 + this.USLACSReturnCode.GetHashCode();
                if (this.RDI != null)
                    hash = hash * 59 + this.RDI.GetHashCode();
                if (this.CMRA != null)
                    hash = hash * 59 + this.CMRA.GetHashCode();
                if (this.DPV != null)
                    hash = hash * 59 + this.DPV.GetHashCode();
                if (this.DPVFootnote != null)
                    hash = hash * 59 + this.DPVFootnote.GetHashCode();
                if (this.SuiteLinkReturnCode != null)
                    hash = hash * 59 + this.SuiteLinkReturnCode.GetHashCode();
                if (this.SuiteLinkMatchCode != null)
                    hash = hash * 59 + this.SuiteLinkMatchCode.GetHashCode();
                if (this.SuiteLinkFidelity != null)
                    hash = hash * 59 + this.SuiteLinkFidelity.GetHashCode();
                if (this.USBCCheckDigit != null)
                    hash = hash * 59 + this.USBCCheckDigit.GetHashCode();
                if (this.PostalBarCode != null)
                    hash = hash * 59 + this.PostalBarCode.GetHashCode();
                if (this.USCarrierRouteCode != null)
                    hash = hash * 59 + this.USCarrierRouteCode.GetHashCode();
                if (this.USFIPSCountyNumber != null)
                    hash = hash * 59 + this.USFIPSCountyNumber.GetHashCode();
                if (this.USCountyName != null)
                    hash = hash * 59 + this.USCountyName.GetHashCode();
                if (this.USCongressionalDistrict != null)
                    hash = hash * 59 + this.USCongressionalDistrict.GetHashCode();
                if (this.USAltAddr != null)
                    hash = hash * 59 + this.USAltAddr.GetHashCode();
                if (this.USLastLineNumber != null)
                    hash = hash * 59 + this.USLastLineNumber.GetHashCode();
                if (this.USFinanceNumber != null)
                    hash = hash * 59 + this.USFinanceNumber.GetHashCode();
                if (this.USUrbanName != null)
                    hash = hash * 59 + this.USUrbanName.GetHashCode();
                if (this.USUrbanNameInput != null)
                    hash = hash * 59 + this.USUrbanNameInput.GetHashCode();
                if (this.USUrbanNameResult != null)
                    hash = hash * 59 + this.USUrbanNameResult.GetHashCode();
                if (this.MultimatchCount != null)
                    hash = hash * 59 + this.MultimatchCount.GetHashCode();
                if (this.AddressBlock1 != null)
                    hash = hash * 59 + this.AddressBlock1.GetHashCode();
                if (this.AddressBlock2 != null)
                    hash = hash * 59 + this.AddressBlock2.GetHashCode();
                if (this.AddressBlock3 != null)
                    hash = hash * 59 + this.AddressBlock3.GetHashCode();
                if (this.AddressBlock4 != null)
                    hash = hash * 59 + this.AddressBlock4.GetHashCode();
                if (this.AddressBlock5 != null)
                    hash = hash * 59 + this.AddressBlock5.GetHashCode();
                if (this.AddressBlock6 != null)
                    hash = hash * 59 + this.AddressBlock6.GetHashCode();
                if (this.AddressBlock7 != null)
                    hash = hash * 59 + this.AddressBlock7.GetHashCode();
                if (this.AddressBlock8 != null)
                    hash = hash * 59 + this.AddressBlock8.GetHashCode();
                if (this.AddressBlock9 != null)
                    hash = hash * 59 + this.AddressBlock9.GetHashCode();
                if (this.CanLanguage != null)
                    hash = hash * 59 + this.CanLanguage.GetHashCode();
                if (this.DPVNoStat != null)
                    hash = hash * 59 + this.DPVNoStat.GetHashCode();
                if (this.DPVVacant != null)
                    hash = hash * 59 + this.DPVVacant.GetHashCode();
                return hash;
            }
        }
    }

}
