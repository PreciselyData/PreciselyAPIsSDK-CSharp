/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZonesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets Basic Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <returns>BasicBoundary</returns>
        BasicBoundary GetBasicBoundaryByAddress (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string));

        /// <summary>
        /// Gets Basic Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <returns>ApiResponse of BasicBoundary</returns>
        ApiResponse<BasicBoundary> GetBasicBoundaryByAddressWithHttpInfo (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string));
        /// <summary>
        /// Gets Basic Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <returns>BasicBoundary</returns>
        BasicBoundary GetBasicBoundaryByLocation (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string));

        /// <summary>
        /// Gets Basic Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <returns>ApiResponse of BasicBoundary</returns>
        ApiResponse<BasicBoundary> GetBasicBoundaryByLocationWithHttpInfo (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string));
        /// <summary>
        /// Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>PoiBoundary</returns>
        PoiBoundary GetPOIBoundaryByAddress (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string));

        /// <summary>
        /// Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>ApiResponse of PoiBoundary</returns>
        ApiResponse<PoiBoundary> GetPOIBoundaryByAddressWithHttpInfo (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string));
        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <returns>POIBoundaryResponse</returns>
        POIBoundaryResponse GetPOIBoundaryByAddressBatch (POIBoundaryAddressRequest pOIBoundaryAddressRequest);

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <returns>ApiResponse of POIBoundaryResponse</returns>
        ApiResponse<POIBoundaryResponse> GetPOIBoundaryByAddressBatchWithHttpInfo (POIBoundaryAddressRequest pOIBoundaryAddressRequest);
        /// <summary>
        /// Get Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Get Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>PoiBoundary</returns>
        PoiBoundary GetPOIBoundaryByLocation (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string));

        /// <summary>
        /// Get Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Get Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>ApiResponse of PoiBoundary</returns>
        ApiResponse<PoiBoundary> GetPOIBoundaryByLocationWithHttpInfo (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string));
        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <returns>POIBoundaryResponse</returns>
        POIBoundaryResponse GetPOIBoundaryByLocationBatch (POIBoundaryLocationRequest pOIBoundaryLocationRequest);

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <returns>ApiResponse of POIBoundaryResponse</returns>
        ApiResponse<POIBoundaryResponse> GetPOIBoundaryByLocationBatchWithHttpInfo (POIBoundaryLocationRequest pOIBoundaryLocationRequest);
        /// <summary>
        /// Get TravelBoundary By Distance.
        /// </summary>
        /// <remarks>
        /// Returns the travel boundary based on travel distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>TravelBoundaries</returns>
        TravelBoundaries GetTravelBoundaryByDistance (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string));

        /// <summary>
        /// Get TravelBoundary By Distance.
        /// </summary>
        /// <remarks>
        /// Returns the travel boundary based on travel distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>ApiResponse of TravelBoundaries</returns>
        ApiResponse<TravelBoundaries> GetTravelBoundaryByDistanceWithHttpInfo (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string));
        /// <summary>
        /// Get TravelBoundary By Time.
        /// </summary>
        /// <remarks>
        /// Travel boundary based on travel time.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>TravelBoundaries</returns>
        TravelBoundaries GetTravelBoundaryByTime (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string));

        /// <summary>
        /// Get TravelBoundary By Time.
        /// </summary>
        /// <remarks>
        /// Travel boundary based on travel time.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>ApiResponse of TravelBoundaries</returns>
        ApiResponse<TravelBoundaries> GetTravelBoundaryByTimeWithHttpInfo (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets Basic Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BasicBoundary</returns>
        System.Threading.Tasks.Task<BasicBoundary> GetBasicBoundaryByAddressAsync (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Basic Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BasicBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicBoundary>> GetBasicBoundaryByAddressWithHttpInfoAsync (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Basic Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BasicBoundary</returns>
        System.Threading.Tasks.Task<BasicBoundary> GetBasicBoundaryByLocationAsync (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Basic Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Gets Basic Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BasicBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicBoundary>> GetBasicBoundaryByLocationWithHttpInfoAsync (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiBoundary</returns>
        System.Threading.Tasks.Task<PoiBoundary> GetPOIBoundaryByAddressAsync (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Gets Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoiBoundary>> GetPOIBoundaryByAddressWithHttpInfoAsync (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of POIBoundaryResponse</returns>
        System.Threading.Tasks.Task<POIBoundaryResponse> GetPOIBoundaryByAddressBatchAsync (POIBoundaryAddressRequest pOIBoundaryAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (POIBoundaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<POIBoundaryResponse>> GetPOIBoundaryByAddressBatchWithHttpInfoAsync (POIBoundaryAddressRequest pOIBoundaryAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Get Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiBoundary</returns>
        System.Threading.Tasks.Task<PoiBoundary> GetPOIBoundaryByLocationAsync (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Get Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoiBoundary>> GetPOIBoundaryByLocationWithHttpInfoAsync (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of POIBoundaryResponse</returns>
        System.Threading.Tasks.Task<POIBoundaryResponse> GetPOIBoundaryByLocationBatchAsync (POIBoundaryLocationRequest pOIBoundaryLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <remarks>
        /// Batch method for getting Point of Interests Boundary by Location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (POIBoundaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<POIBoundaryResponse>> GetPOIBoundaryByLocationBatchWithHttpInfoAsync (POIBoundaryLocationRequest pOIBoundaryLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get TravelBoundary By Distance.
        /// </summary>
        /// <remarks>
        /// Returns the travel boundary based on travel distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelBoundaries</returns>
        System.Threading.Tasks.Task<TravelBoundaries> GetTravelBoundaryByDistanceAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get TravelBoundary By Distance.
        /// </summary>
        /// <remarks>
        /// Returns the travel boundary based on travel distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelBoundaries)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelBoundaries>> GetTravelBoundaryByDistanceWithHttpInfoAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get TravelBoundary By Time.
        /// </summary>
        /// <remarks>
        /// Travel boundary based on travel time.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelBoundaries</returns>
        System.Threading.Tasks.Task<TravelBoundaries> GetTravelBoundaryByTimeAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get TravelBoundary By Time.
        /// </summary>
        /// <remarks>
        /// Travel boundary based on travel time.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelBoundaries)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelBoundaries>> GetTravelBoundaryByTimeWithHttpInfoAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ZonesServiceApi : IZonesServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZonesServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public ZonesServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZonesServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets Basic Boundary by Address. Gets Basic Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <returns>BasicBoundary</returns>
        public BasicBoundary GetBasicBoundaryByAddress (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string))
        {
             ApiResponse<BasicBoundary> localVarResponse = GetBasicBoundaryByAddressWithHttpInfo(address, country, distance, distanceUnit, resolution, responseSrs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Basic Boundary by Address. Gets Basic Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <returns>ApiResponse of BasicBoundary</returns>
        public ApiResponse<BasicBoundary> GetBasicBoundaryByAddressWithHttpInfo (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling ZonesServiceApi->GetBasicBoundaryByAddress");

            var localVarPath = "/zones/v1/basicboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (responseSrs != null) localVarQueryParams.Add("responseSrs", Configuration.ApiClient.ParameterToString(responseSrs)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<BasicBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (BasicBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicBoundary)));
            
            
        }

        /// <summary>
        /// Gets Basic Boundary by Address. Gets Basic Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BasicBoundary</returns>
        public async System.Threading.Tasks.Task<BasicBoundary> GetBasicBoundaryByAddressAsync (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BasicBoundary> localVarResponse = await GetBasicBoundaryByAddressWithHttpInfoAsync(address, country, distance, distanceUnit, resolution, responseSrs, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Basic Boundary by Address. Gets Basic Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which Basic Boundary is requested</param>
        /// <param name="country">Three digit ISO country code (optional)</param>
        /// <param name="distance"> (optional)</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BasicBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BasicBoundary>> GetBasicBoundaryByAddressWithHttpInfoAsync (string address, string country = default(string), string distance = default(string), string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling ZonesServiceApi->GetBasicBoundaryByAddress");

            var localVarPath = "/zones/v1/basicboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
           if (responseSrs != null) localVarQueryParams.Add("responseSrs", Configuration.ApiClient.ParameterToString(responseSrs)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<BasicBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (BasicBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicBoundary)));
            
        }

        /// <summary>
        /// Gets Basic Boundary by Location. Gets Basic Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <returns>BasicBoundary</returns>
        public BasicBoundary GetBasicBoundaryByLocation (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string))
        {
             ApiResponse<BasicBoundary> localVarResponse = GetBasicBoundaryByLocationWithHttpInfo(latitude, longitude, distance, distanceUnit, resolution, responseSrs, srsName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Basic Boundary by Location. Gets Basic Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <returns>ApiResponse of BasicBoundary</returns>
        public ApiResponse<BasicBoundary> GetBasicBoundaryByLocationWithHttpInfo (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling ZonesServiceApi->GetBasicBoundaryByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling ZonesServiceApi->GetBasicBoundaryByLocation");
            // verify the required parameter 'distance' is set
            if (distance == null)
                throw new ApiException(400, "Missing required parameter 'distance' when calling ZonesServiceApi->GetBasicBoundaryByLocation");

            var localVarPath = "/zones/v1/basicboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (responseSrs != null) localVarQueryParams.Add("responseSrs", Configuration.ApiClient.ParameterToString(responseSrs)); // query parameter
            if (srsName != null) localVarQueryParams.Add("srsName", Configuration.ApiClient.ParameterToString(srsName)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<BasicBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (BasicBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicBoundary)));
            
            
        }

        /// <summary>
        /// Gets Basic Boundary by Location. Gets Basic Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BasicBoundary</returns>
        public async System.Threading.Tasks.Task<BasicBoundary> GetBasicBoundaryByLocationAsync (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BasicBoundary> localVarResponse = await GetBasicBoundaryByLocationWithHttpInfoAsync(latitude, longitude, distance, distanceUnit, resolution, responseSrs, srsName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Basic Boundary by Location. Gets Basic Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which Basic Boundary is requested</param>
        /// <param name="longitude">Longitude around which Basic Boundary is requested</param>
        /// <param name="distance">This is width of the buffer (in a complete circular buffer, it would be radius of the buffer). This has to be a positive number.</param>
        /// <param name="distanceUnit"> (optional)</param>
        /// <param name="resolution">This is resolution of the buffer. Curves generated in buffer are approximated by line segments and it is measured in segments per circle. The higher the resolution, the smoother the curves of the buffer but more points would be required in the boundary geometry. Number greater than 0 and in multiple of 4. If not in 4, then it is approximated to nearest multiple of 4. (optional)</param>
        /// <param name="responseSrs"> (optional)</param>
        /// <param name="srsName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BasicBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BasicBoundary>> GetBasicBoundaryByLocationWithHttpInfoAsync (string latitude, string longitude, string distance, string distanceUnit = default(string), string resolution = default(string), string responseSrs = default(string), string srsName = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling ZonesServiceApi->GetBasicBoundaryByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling ZonesServiceApi->GetBasicBoundaryByLocation");
            // verify the required parameter 'distance' is set
            if (distance == null)
                throw new ApiException(400, "Missing required parameter 'distance' when calling ZonesServiceApi->GetBasicBoundaryByLocation");

            var localVarPath = "/zones/v1/basicboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
           if (responseSrs != null) localVarQueryParams.Add("responseSrs", Configuration.ApiClient.ParameterToString(responseSrs)); // query parameter
           if (srsName != null) localVarQueryParams.Add("srsName", Configuration.ApiClient.ParameterToString(srsName)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<BasicBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (BasicBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicBoundary)));
            
        }

        /// <summary>
        /// Gets Point of Interests Boundary by Address. Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>PoiBoundary</returns>
        public PoiBoundary GetPOIBoundaryByAddress (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string))
        {
             ApiResponse<PoiBoundary> localVarResponse = GetPOIBoundaryByAddressWithHttpInfo(address, categoryCode, sicCode, naicsCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Point of Interests Boundary by Address. Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>ApiResponse of PoiBoundary</returns>
        public ApiResponse<PoiBoundary> GetPOIBoundaryByAddressWithHttpInfo (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling ZonesServiceApi->GetPOIBoundaryByAddress");

            var localVarPath = "/zones/v1/poiboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (naicsCode != null) localVarQueryParams.Add("naicsCode", Configuration.ApiClient.ParameterToString(naicsCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiBoundary)));
            
            
        }

        /// <summary>
        /// Gets Point of Interests Boundary by Address. Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiBoundary</returns>
        public async System.Threading.Tasks.Task<PoiBoundary> GetPOIBoundaryByAddressAsync (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PoiBoundary> localVarResponse = await GetPOIBoundaryByAddressWithHttpInfoAsync(address, categoryCode, sicCode, naicsCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Point of Interests Boundary by Address. Gets Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoiBoundary>> GetPOIBoundaryByAddressWithHttpInfoAsync (string address, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling ZonesServiceApi->GetPOIBoundaryByAddress");

            var localVarPath = "/zones/v1/poiboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (naicsCode != null) localVarQueryParams.Add("naicsCode", Configuration.ApiClient.ParameterToString(naicsCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiBoundary)));
            
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address. Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <returns>POIBoundaryResponse</returns>
        public POIBoundaryResponse GetPOIBoundaryByAddressBatch (POIBoundaryAddressRequest pOIBoundaryAddressRequest)
        {
             ApiResponse<POIBoundaryResponse> localVarResponse = GetPOIBoundaryByAddressBatchWithHttpInfo(pOIBoundaryAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address. Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <returns>ApiResponse of POIBoundaryResponse</returns>
        public ApiResponse<POIBoundaryResponse> GetPOIBoundaryByAddressBatchWithHttpInfo (POIBoundaryAddressRequest pOIBoundaryAddressRequest)
        {
            // verify the required parameter 'pOIBoundaryAddressRequest' is set
            if (pOIBoundaryAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIBoundaryAddressRequest' when calling ZonesServiceApi->GetPOIBoundaryByAddressBatch");

            var localVarPath = "/zones/v1/poiboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIBoundaryAddressRequest != null && pOIBoundaryAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIBoundaryAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIBoundaryAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<POIBoundaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIBoundaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIBoundaryResponse)));
            
            
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address. Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of POIBoundaryResponse</returns>
        public async System.Threading.Tasks.Task<POIBoundaryResponse> GetPOIBoundaryByAddressBatchAsync (POIBoundaryAddressRequest pOIBoundaryAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<POIBoundaryResponse> localVarResponse = await GetPOIBoundaryByAddressBatchWithHttpInfoAsync(pOIBoundaryAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Address. Batch method for getting Point of Interests Boundary by Address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (POIBoundaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<POIBoundaryResponse>> GetPOIBoundaryByAddressBatchWithHttpInfoAsync (POIBoundaryAddressRequest pOIBoundaryAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pOIBoundaryAddressRequest' is set
            if (pOIBoundaryAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIBoundaryAddressRequest' when calling ZonesServiceApi->GetPOIBoundaryByAddressBatch");

            var localVarPath = "/zones/v1/poiboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIBoundaryAddressRequest != null && pOIBoundaryAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIBoundaryAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIBoundaryAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<POIBoundaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIBoundaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIBoundaryResponse)));
            
        }

        /// <summary>
        /// Get Point of Interests Boundary by Location. Get Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>PoiBoundary</returns>
        public PoiBoundary GetPOIBoundaryByLocation (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string))
        {
             ApiResponse<PoiBoundary> localVarResponse = GetPOIBoundaryByLocationWithHttpInfo(latitude, longitude, categoryCode, sicCode, naicsCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Point of Interests Boundary by Location. Get Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <returns>ApiResponse of PoiBoundary</returns>
        public ApiResponse<PoiBoundary> GetPOIBoundaryByLocationWithHttpInfo (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling ZonesServiceApi->GetPOIBoundaryByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling ZonesServiceApi->GetPOIBoundaryByLocation");

            var localVarPath = "/zones/v1/poiboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (naicsCode != null) localVarQueryParams.Add("naicsCode", Configuration.ApiClient.ParameterToString(naicsCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiBoundary)));
            
            
        }

        /// <summary>
        /// Get Point of Interests Boundary by Location. Get Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiBoundary</returns>
        public async System.Threading.Tasks.Task<PoiBoundary> GetPOIBoundaryByLocationAsync (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PoiBoundary> localVarResponse = await GetPOIBoundaryByLocationWithHttpInfoAsync(latitude, longitude, categoryCode, sicCode, naicsCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Point of Interests Boundary by Location. Get Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude around which POI Boundary is requested</param>
        /// <param name="longitude">Longitude around which POI Boundary is requested</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes (optional)</param>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="naicsCode">Will accept naicsCode to filter POIs in results. Max 10 allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoiBoundary>> GetPOIBoundaryByLocationWithHttpInfoAsync (string latitude, string longitude, string categoryCode = default(string), string sicCode = default(string), string naicsCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling ZonesServiceApi->GetPOIBoundaryByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling ZonesServiceApi->GetPOIBoundaryByLocation");

            var localVarPath = "/zones/v1/poiboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (naicsCode != null) localVarQueryParams.Add("naicsCode", Configuration.ApiClient.ParameterToString(naicsCode)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiBoundary)));
            
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location. Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <returns>POIBoundaryResponse</returns>
        public POIBoundaryResponse GetPOIBoundaryByLocationBatch (POIBoundaryLocationRequest pOIBoundaryLocationRequest)
        {
             ApiResponse<POIBoundaryResponse> localVarResponse = GetPOIBoundaryByLocationBatchWithHttpInfo(pOIBoundaryLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location. Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <returns>ApiResponse of POIBoundaryResponse</returns>
        public ApiResponse<POIBoundaryResponse> GetPOIBoundaryByLocationBatchWithHttpInfo (POIBoundaryLocationRequest pOIBoundaryLocationRequest)
        {
            // verify the required parameter 'pOIBoundaryLocationRequest' is set
            if (pOIBoundaryLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIBoundaryLocationRequest' when calling ZonesServiceApi->GetPOIBoundaryByLocationBatch");

            var localVarPath = "/zones/v1/poiboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIBoundaryLocationRequest != null && pOIBoundaryLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIBoundaryLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIBoundaryLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<POIBoundaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIBoundaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIBoundaryResponse)));
            
            
        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location. Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of POIBoundaryResponse</returns>
        public async System.Threading.Tasks.Task<POIBoundaryResponse> GetPOIBoundaryByLocationBatchAsync (POIBoundaryLocationRequest pOIBoundaryLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<POIBoundaryResponse> localVarResponse = await GetPOIBoundaryByLocationBatchWithHttpInfoAsync(pOIBoundaryLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch method for getting Point of Interests Boundary by Location. Batch method for getting Point of Interests Boundary by Location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIBoundaryLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (POIBoundaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<POIBoundaryResponse>> GetPOIBoundaryByLocationBatchWithHttpInfoAsync (POIBoundaryLocationRequest pOIBoundaryLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pOIBoundaryLocationRequest' is set
            if (pOIBoundaryLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIBoundaryLocationRequest' when calling ZonesServiceApi->GetPOIBoundaryByLocationBatch");

            var localVarPath = "/zones/v1/poiboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIBoundaryLocationRequest != null && pOIBoundaryLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIBoundaryLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIBoundaryLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIBoundaryByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<POIBoundaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIBoundaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIBoundaryResponse)));
            
        }

        /// <summary>
        /// Get TravelBoundary By Distance. Returns the travel boundary based on travel distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>TravelBoundaries</returns>
        public TravelBoundaries GetTravelBoundaryByDistance (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string))
        {
             ApiResponse<TravelBoundaries> localVarResponse = GetTravelBoundaryByDistanceWithHttpInfo(point, address, costs, costUnit, db, country, maxOffroadDistance, maxOffroadDistanceUnit, destinationSrs, majorRoads, returnHoles, returnIslands, simplificationFactor, bandingStyle, historicTrafficTimeBucket, defaultAmbientSpeed, ambientSpeedUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get TravelBoundary By Distance. Returns the travel boundary based on travel distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>ApiResponse of TravelBoundaries</returns>
        public ApiResponse<TravelBoundaries> GetTravelBoundaryByDistanceWithHttpInfo (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string))
        {

            var localVarPath = "/zones/v1/travelboundary/bydistance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (costs != null) localVarQueryParams.Add("costs", Configuration.ApiClient.ParameterToString(costs)); // query parameter
            if (costUnit != null) localVarQueryParams.Add("costUnit", Configuration.ApiClient.ParameterToString(costUnit)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (maxOffroadDistance != null) localVarQueryParams.Add("maxOffroadDistance", Configuration.ApiClient.ParameterToString(maxOffroadDistance)); // query parameter
            if (maxOffroadDistanceUnit != null) localVarQueryParams.Add("maxOffroadDistanceUnit", Configuration.ApiClient.ParameterToString(maxOffroadDistanceUnit)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnHoles != null) localVarQueryParams.Add("returnHoles", Configuration.ApiClient.ParameterToString(returnHoles)); // query parameter
            if (returnIslands != null) localVarQueryParams.Add("returnIslands", Configuration.ApiClient.ParameterToString(returnIslands)); // query parameter
            if (simplificationFactor != null) localVarQueryParams.Add("simplificationFactor", Configuration.ApiClient.ParameterToString(simplificationFactor)); // query parameter
            if (bandingStyle != null) localVarQueryParams.Add("bandingStyle", Configuration.ApiClient.ParameterToString(bandingStyle)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (defaultAmbientSpeed != null) localVarQueryParams.Add("defaultAmbientSpeed", Configuration.ApiClient.ParameterToString(defaultAmbientSpeed)); // query parameter
            if (ambientSpeedUnit != null) localVarQueryParams.Add("ambientSpeedUnit", Configuration.ApiClient.ParameterToString(ambientSpeedUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelBoundaryByDistance", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelBoundaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelBoundaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelBoundaries)));
            
            
        }

        /// <summary>
        /// Get TravelBoundary By Distance. Returns the travel boundary based on travel distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelBoundaries</returns>
        public async System.Threading.Tasks.Task<TravelBoundaries> GetTravelBoundaryByDistanceAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TravelBoundaries> localVarResponse = await GetTravelBoundaryByDistanceWithHttpInfoAsync(point, address, costs, costUnit, db, country, maxOffroadDistance, maxOffroadDistanceUnit, destinationSrs, majorRoads, returnHoles, returnIslands, simplificationFactor, bandingStyle, historicTrafficTimeBucket, defaultAmbientSpeed, ambientSpeedUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get TravelBoundary By Distance. Returns the travel boundary based on travel distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Address around which Basic Boundary is requested. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelBoundaries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelBoundaries>> GetTravelBoundaryByDistanceWithHttpInfoAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/zones/v1/travelboundary/bydistance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (costs != null) localVarQueryParams.Add("costs", Configuration.ApiClient.ParameterToString(costs)); // query parameter
           if (costUnit != null) localVarQueryParams.Add("costUnit", Configuration.ApiClient.ParameterToString(costUnit)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (maxOffroadDistance != null) localVarQueryParams.Add("maxOffroadDistance", Configuration.ApiClient.ParameterToString(maxOffroadDistance)); // query parameter
           if (maxOffroadDistanceUnit != null) localVarQueryParams.Add("maxOffroadDistanceUnit", Configuration.ApiClient.ParameterToString(maxOffroadDistanceUnit)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (returnHoles != null) localVarQueryParams.Add("returnHoles", Configuration.ApiClient.ParameterToString(returnHoles)); // query parameter
           if (returnIslands != null) localVarQueryParams.Add("returnIslands", Configuration.ApiClient.ParameterToString(returnIslands)); // query parameter
           if (simplificationFactor != null) localVarQueryParams.Add("simplificationFactor", Configuration.ApiClient.ParameterToString(simplificationFactor)); // query parameter
           if (bandingStyle != null) localVarQueryParams.Add("bandingStyle", Configuration.ApiClient.ParameterToString(bandingStyle)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (defaultAmbientSpeed != null) localVarQueryParams.Add("defaultAmbientSpeed", Configuration.ApiClient.ParameterToString(defaultAmbientSpeed)); // query parameter
           if (ambientSpeedUnit != null) localVarQueryParams.Add("ambientSpeedUnit", Configuration.ApiClient.ParameterToString(ambientSpeedUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelBoundaryByDistance", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelBoundaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelBoundaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelBoundaries)));
            
        }

        /// <summary>
        /// Get TravelBoundary By Time. Travel boundary based on travel time.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>TravelBoundaries</returns>
        public TravelBoundaries GetTravelBoundaryByTime (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string))
        {
             ApiResponse<TravelBoundaries> localVarResponse = GetTravelBoundaryByTimeWithHttpInfo(point, address, costs, costUnit, db, country, maxOffroadDistance, maxOffroadDistanceUnit, destinationSrs, majorRoads, returnHoles, returnIslands, simplificationFactor, bandingStyle, historicTrafficTimeBucket, defaultAmbientSpeed, ambientSpeedUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get TravelBoundary By Time. Travel boundary based on travel time.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <returns>ApiResponse of TravelBoundaries</returns>
        public ApiResponse<TravelBoundaries> GetTravelBoundaryByTimeWithHttpInfo (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string))
        {

            var localVarPath = "/zones/v1/travelboundary/bytime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (costs != null) localVarQueryParams.Add("costs", Configuration.ApiClient.ParameterToString(costs)); // query parameter
            if (costUnit != null) localVarQueryParams.Add("costUnit", Configuration.ApiClient.ParameterToString(costUnit)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (maxOffroadDistance != null) localVarQueryParams.Add("maxOffroadDistance", Configuration.ApiClient.ParameterToString(maxOffroadDistance)); // query parameter
            if (maxOffroadDistanceUnit != null) localVarQueryParams.Add("maxOffroadDistanceUnit", Configuration.ApiClient.ParameterToString(maxOffroadDistanceUnit)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnHoles != null) localVarQueryParams.Add("returnHoles", Configuration.ApiClient.ParameterToString(returnHoles)); // query parameter
            if (returnIslands != null) localVarQueryParams.Add("returnIslands", Configuration.ApiClient.ParameterToString(returnIslands)); // query parameter
            if (simplificationFactor != null) localVarQueryParams.Add("simplificationFactor", Configuration.ApiClient.ParameterToString(simplificationFactor)); // query parameter
            if (bandingStyle != null) localVarQueryParams.Add("bandingStyle", Configuration.ApiClient.ParameterToString(bandingStyle)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (defaultAmbientSpeed != null) localVarQueryParams.Add("defaultAmbientSpeed", Configuration.ApiClient.ParameterToString(defaultAmbientSpeed)); // query parameter
            if (ambientSpeedUnit != null) localVarQueryParams.Add("ambientSpeedUnit", Configuration.ApiClient.ParameterToString(ambientSpeedUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelBoundaryByTime", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelBoundaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelBoundaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelBoundaries)));
            
            
        }

        /// <summary>
        /// Get TravelBoundary By Time. Travel boundary based on travel time.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelBoundaries</returns>
        public async System.Threading.Tasks.Task<TravelBoundaries> GetTravelBoundaryByTimeAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TravelBoundaries> localVarResponse = await GetTravelBoundaryByTimeWithHttpInfoAsync(point, address, costs, costUnit, db, country, maxOffroadDistance, maxOffroadDistanceUnit, destinationSrs, majorRoads, returnHoles, returnIslands, simplificationFactor, bandingStyle, historicTrafficTimeBucket, defaultAmbientSpeed, ambientSpeedUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get TravelBoundary By Time. Travel boundary based on travel time.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Starting point from where the travel boundary is calculated. Point in Lat,Long,coordsys format (optional)</param>
        /// <param name="address">Starting address from where the travel boundary is calculated. (optional)</param>
        /// <param name="costs">Travel time used to calculate the travel boundary. (optional)</param>
        /// <param name="costUnit">Travel time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional)</param>
        /// <param name="db">Mode of commute. (optional)</param>
        /// <param name="country">3 character ISO code or country name. (optional)</param>
        /// <param name="maxOffroadDistance">Maximum distance to allow travel off the road network. (optional)</param>
        /// <param name="maxOffroadDistanceUnit">MaxOffroad Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional)</param>
        /// <param name="destinationSrs">Desired coordinate system of the travel boundary. (optional)</param>
        /// <param name="majorRoads">Whether to include all roads in the calculation or just major roads. (optional, default to &quot;true&quot;)</param>
        /// <param name="returnHoles">Whether to return holes, which are areas within the larger boundary that cannot be reached within the desired time (optional)</param>
        /// <param name="returnIslands">Whether to return islands, which are small areas outside the main boundary that can be reached within the desired time (optional)</param>
        /// <param name="simplificationFactor">Number between 0.0 and 1.0 where 0.0 is very simple and 1.0 means the most complex (optional)</param>
        /// <param name="bandingStyle">Style of banding to be used in the result (optional)</param>
        /// <param name="historicTrafficTimeBucket">Whether routing calculation uses the historic traffic speeds (optional)</param>
        /// <param name="defaultAmbientSpeed">The speed to travel when going off a network road to find the travel boundary (for all road types). (optional)</param>
        /// <param name="ambientSpeedUnit">The unit of measure to use to calculate the ambient speed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelBoundaries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelBoundaries>> GetTravelBoundaryByTimeWithHttpInfoAsync (string point = default(string), string address = default(string), string costs = default(string), string costUnit = default(string), string db = default(string), string country = default(string), string maxOffroadDistance = default(string), string maxOffroadDistanceUnit = default(string), string destinationSrs = default(string), string majorRoads = default(string), string returnHoles = default(string), string returnIslands = default(string), string simplificationFactor = default(string), string bandingStyle = default(string), string historicTrafficTimeBucket = default(string), string defaultAmbientSpeed = default(string), string ambientSpeedUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/zones/v1/travelboundary/bytime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (costs != null) localVarQueryParams.Add("costs", Configuration.ApiClient.ParameterToString(costs)); // query parameter
           if (costUnit != null) localVarQueryParams.Add("costUnit", Configuration.ApiClient.ParameterToString(costUnit)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (maxOffroadDistance != null) localVarQueryParams.Add("maxOffroadDistance", Configuration.ApiClient.ParameterToString(maxOffroadDistance)); // query parameter
           if (maxOffroadDistanceUnit != null) localVarQueryParams.Add("maxOffroadDistanceUnit", Configuration.ApiClient.ParameterToString(maxOffroadDistanceUnit)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (returnHoles != null) localVarQueryParams.Add("returnHoles", Configuration.ApiClient.ParameterToString(returnHoles)); // query parameter
           if (returnIslands != null) localVarQueryParams.Add("returnIslands", Configuration.ApiClient.ParameterToString(returnIslands)); // query parameter
           if (simplificationFactor != null) localVarQueryParams.Add("simplificationFactor", Configuration.ApiClient.ParameterToString(simplificationFactor)); // query parameter
           if (bandingStyle != null) localVarQueryParams.Add("bandingStyle", Configuration.ApiClient.ParameterToString(bandingStyle)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (defaultAmbientSpeed != null) localVarQueryParams.Add("defaultAmbientSpeed", Configuration.ApiClient.ParameterToString(defaultAmbientSpeed)); // query parameter
           if (ambientSpeedUnit != null) localVarQueryParams.Add("ambientSpeedUnit", Configuration.ApiClient.ParameterToString(ambientSpeedUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelBoundaryByTime", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelBoundaries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelBoundaries) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelBoundaries)));
            
        }

    }
}