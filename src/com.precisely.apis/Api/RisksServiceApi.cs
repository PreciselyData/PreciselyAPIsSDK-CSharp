/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRisksServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        ApiResponse<CrimeRiskResponse> GetCrimeRiskByAddressWithHttpInfo (string address, string type = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <returns>CrimeRiskResponseList</returns>
        CrimeRiskResponseList GetCrimeRiskByAddressBatch (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest);

        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        ApiResponse<CrimeRiskResponseList> GetCrimeRiskByAddressBatchWithHttpInfo (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest);
        /// <summary>
        /// Get Crime Risk By  Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        CrimeRiskResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Crime Risk By  Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        ApiResponse<CrimeRiskResponse> GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <returns>CrimeRiskResponseList</returns>
        CrimeRiskResponseList GetCrimeRiskByLocationBatch (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest);

        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        ApiResponse<CrimeRiskResponseList> GetCrimeRiskByLocationBatchWithHttpInfo (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest);
        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        WaterBodyResponse GetDistanceToCoastByAddress (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string));

        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        ApiResponse<WaterBodyResponse> GetDistanceToCoastByAddressWithHttpInfo (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string));
        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        DistanceToFloodHazardResponse GetDistanceToCoastByAddressBatch (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest);

        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        ApiResponse<DistanceToFloodHazardResponse> GetDistanceToCoastByAddressBatchWithHttpInfo (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest);
        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        WaterBodyResponse GetDistanceToCoastByLocation (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string));

        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        ApiResponse<WaterBodyResponse> GetDistanceToCoastByLocationWithHttpInfo (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string));
        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        DistanceToFloodHazardResponse GetDistanceToCoastByLocationBatch (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest);

        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        ApiResponse<DistanceToFloodHazardResponse> GetDistanceToCoastByLocationBatchWithHttpInfo (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest);
        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>EarthquakeHistory</returns>
        EarthquakeHistory GetEarthquakeHistory (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string));

        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of EarthquakeHistory</returns>
        ApiResponse<EarthquakeHistory> GetEarthquakeHistoryWithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string));
        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <returns>EarthquakeRiskResponseList</returns>
        EarthquakeRiskResponseList GetEarthquakeRiskByAddressBatch (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest);

        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        ApiResponse<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchWithHttpInfo (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest);
        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        EarthquakeRiskResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <returns>EarthquakeRiskResponseList</returns>
        EarthquakeRiskResponseList GetEarthquakeRiskByLocationBatch (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest);

        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        ApiResponse<EarthquakeRiskResponseList> GetEarthquakeRiskByLocationBatchWithHttpInfo (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest);
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>FireHistory</returns>
        FireHistory GetFireHistory (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string));

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of FireHistory</returns>
        ApiResponse<FireHistory> GetFireHistoryWithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string));
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>FireHistoryV2</returns>
        FireHistoryV2 GetFireHistoryV2 (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string));

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of FireHistoryV2</returns>
        ApiResponse<FireHistoryV2> GetFireHistoryV2WithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string));
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskResponse</returns>
        FireRiskResponse GetFireRiskByAddress (string address, string includeGeometry = default(string));

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        ApiResponse<FireRiskResponse> GetFireRiskByAddressWithHttpInfo (string address, string includeGeometry = default(string));
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>FireRiskResponseList</returns>
        FireRiskResponseList GetFireRiskByAddressBatch (FireRiskByAddressRequest fireRiskByAddressRequest);

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        ApiResponse<FireRiskResponseList> GetFireRiskByAddressBatchWithHttpInfo (FireRiskByAddressRequest fireRiskByAddressRequest);
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskResponse</returns>
        FireRiskResponse GetFireRiskByLocation (string longitude, string latitude, string includeGeometry = default(string));

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        ApiResponse<FireRiskResponse> GetFireRiskByLocationWithHttpInfo (string longitude, string latitude, string includeGeometry = default(string));
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>FireRiskResponseList</returns>
        FireRiskResponseList GetFireRiskByLocationBatch (FireRiskByLocationRequest fireRiskByLocationRequest);

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        ApiResponse<FireRiskResponseList> GetFireRiskByLocationBatchWithHttpInfo (FireRiskByLocationRequest fireRiskByLocationRequest);
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskV2Response</returns>
        FireRiskV2Response GetFireRiskV2ByAddress (string address, string includeGeometry = default(string));

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskV2Response</returns>
        ApiResponse<FireRiskV2Response> GetFireRiskV2ByAddressWithHttpInfo (string address, string includeGeometry = default(string));
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>FireRiskV2ResponseList</returns>
        FireRiskV2ResponseList GetFireRiskV2ByAddressBatch (FireRiskByAddressRequest fireRiskByAddressRequest);

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FireRiskV2ResponseList</returns>
        ApiResponse<FireRiskV2ResponseList> GetFireRiskV2ByAddressBatchWithHttpInfo (FireRiskByAddressRequest fireRiskByAddressRequest);
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskV2Response</returns>
        FireRiskV2Response GetFireRiskV2ByLocation (string longitude, string latitude, string includeGeometry = default(string));

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskV2Response</returns>
        ApiResponse<FireRiskV2Response> GetFireRiskV2ByLocationWithHttpInfo (string longitude, string latitude, string includeGeometry = default(string));
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>FireRiskV2ResponseList</returns>
        FireRiskV2ResponseList GetFireRiskV2ByLocationBatch (FireRiskByLocationRequest fireRiskByLocationRequest);

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FireRiskV2ResponseList</returns>
        ApiResponse<FireRiskV2ResponseList> GetFireRiskV2ByLocationBatchWithHttpInfo (FireRiskByLocationRequest fireRiskByLocationRequest);
        /// <summary>
        /// Get Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        FireStations GetFireStationByAddress (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string));

        /// <summary>
        /// Get Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        ApiResponse<FireStations> GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string));
        /// <summary>
        /// Get Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        FireStations GetFireStationByLocation (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string));

        /// <summary>
        /// Get Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        ApiResponse<FireStations> GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string));
        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        ApiResponse<FloodRiskResponse> GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <returns>FloodRiskResponseList</returns>
        FloodRiskResponseList GetFloodRiskByAddressBatch (FloodRiskByAddressRequest floodRiskByAddressRequest);

        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        ApiResponse<FloodRiskResponseList> GetFloodRiskByAddressBatchWithHttpInfo (FloodRiskByAddressRequest floodRiskByAddressRequest);
        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        FloodRiskResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string));

        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        ApiResponse<FloodRiskResponse> GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string));
        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <returns>FloodRiskResponseList</returns>
        FloodRiskResponseList GetFloodRiskByLocationBatch (FloodRiskByLocationRequest floodRiskByLocationRequest);

        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        ApiResponse<FloodRiskResponseList> GetFloodRiskByLocationBatchWithHttpInfo (FloodRiskByLocationRequest floodRiskByLocationRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressWithHttpInfoAsync (string address, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByAddressBatchAsync (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByAddressBatchWithHttpInfoAsync (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Crime Risk By  Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Crime Risk By  Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByLocationBatchAsync (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByLocationBatchWithHttpInfoAsync (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WaterBodyResponse</returns>
        System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToCoastByAddressAsync (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToCoastByAddressWithHttpInfoAsync (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToCoastByAddressBatchAsync (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToCoastByAddressBatchWithHttpInfoAsync (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WaterBodyResponse</returns>
        System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToCoastByLocationAsync (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToCoastByLocationWithHttpInfoAsync (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToCoastByLocationBatchAsync (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToCoastByLocationBatchWithHttpInfoAsync (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeHistory</returns>
        System.Threading.Tasks.Task<EarthquakeHistory> GetEarthquakeHistoryAsync (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeHistory>> GetEarthquakeHistoryWithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressWithHttpInfoAsync (string address, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchAsync (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByAddressBatchWithHttpInfoAsync (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByLocationBatchAsync (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByLocationBatchWithHttpInfoAsync (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireHistory</returns>
        System.Threading.Tasks.Task<FireHistory> GetFireHistoryAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireHistory>> GetFireHistoryWithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireHistoryV2</returns>
        System.Threading.Tasks.Task<FireHistoryV2> GetFireHistoryV2Async (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireHistoryV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireHistoryV2>> GetFireHistoryV2WithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponse</returns>
        System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressWithHttpInfoAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponseList</returns>
        System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByAddressBatchAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByAddressBatchWithHttpInfoAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponse</returns>
        System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByLocationAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponseList</returns>
        System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByLocationBatchAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByLocationBatchWithHttpInfoAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2Response</returns>
        System.Threading.Tasks.Task<FireRiskV2Response> GetFireRiskV2ByAddressAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskV2Response>> GetFireRiskV2ByAddressWithHttpInfoAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2ResponseList</returns>
        System.Threading.Tasks.Task<FireRiskV2ResponseList> GetFireRiskV2ByAddressBatchAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2ResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskV2ResponseList>> GetFireRiskV2ByAddressBatchWithHttpInfoAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2Response</returns>
        System.Threading.Tasks.Task<FireRiskV2Response> GetFireRiskV2ByLocationAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskV2Response>> GetFireRiskV2ByLocationWithHttpInfoAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2ResponseList</returns>
        System.Threading.Tasks.Task<FireRiskV2ResponseList> GetFireRiskV2ByLocationBatchAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2ResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskV2ResponseList>> GetFireRiskV2ByLocationBatchWithHttpInfoAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireStations</returns>
        System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressWithHttpInfoAsync (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireStations</returns>
        System.Threading.Tasks.Task<FireStations> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByLocationWithHttpInfoAsync (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponse</returns>
        System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressWithHttpInfoAsync (string address, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponseList</returns>
        System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByAddressBatchAsync (FloodRiskByAddressRequest floodRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByAddressBatchWithHttpInfoAsync (FloodRiskByAddressRequest floodRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponse</returns>
        System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponseList</returns>
        System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByLocationBatchAsync (FloodRiskByLocationRequest floodRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByLocationBatchWithHttpInfoAsync (FloodRiskByLocationRequest floodRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RisksServiceApi : IRisksServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RisksServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public RisksServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RisksServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        public CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = default(string), string includeGeometry = default(string))
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = GetCrimeRiskByAddressWithHttpInfo(address, type, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        public ApiResponse<CrimeRiskResponse> GetCrimeRiskByAddressWithHttpInfo (string address, string type = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = await GetCrimeRiskByAddressWithHttpInfoAsync(address, type, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressWithHttpInfoAsync (string address, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <returns>CrimeRiskResponseList</returns>
        public CrimeRiskResponseList GetCrimeRiskByAddressBatch (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest)
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = GetCrimeRiskByAddressBatchWithHttpInfo(crimeRiskByAddressBatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        public ApiResponse<CrimeRiskResponseList> GetCrimeRiskByAddressBatchWithHttpInfo (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest)
        {
            // verify the required parameter 'crimeRiskByAddressBatchRequest' is set
            if (crimeRiskByAddressBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'crimeRiskByAddressBatchRequest' when calling RisksServiceApi->GetCrimeRiskByAddressBatch");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crimeRiskByAddressBatchRequest != null && crimeRiskByAddressBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(crimeRiskByAddressBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = crimeRiskByAddressBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByAddressBatchAsync (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = await GetCrimeRiskByAddressBatchWithHttpInfoAsync(crimeRiskByAddressBatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByAddressBatchWithHttpInfoAsync (CrimeRiskByAddressBatchRequest crimeRiskByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'crimeRiskByAddressBatchRequest' is set
            if (crimeRiskByAddressBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'crimeRiskByAddressBatchRequest' when calling RisksServiceApi->GetCrimeRiskByAddressBatch");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crimeRiskByAddressBatchRequest != null && crimeRiskByAddressBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(crimeRiskByAddressBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = crimeRiskByAddressBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Crime Risk By  Location Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        public CrimeRiskResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = default(string), string includeGeometry = default(string))
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = GetCrimeRiskByLocationWithHttpInfo(longitude, latitude, type, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Crime Risk By  Location Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        public ApiResponse<CrimeRiskResponse> GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Crime Risk By  Location Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = await GetCrimeRiskByLocationWithHttpInfoAsync(longitude, latitude, type, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Crime Risk By  Location Accepts latitude/longitude as input and returns and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">this is crime type; valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string type = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <returns>CrimeRiskResponseList</returns>
        public CrimeRiskResponseList GetCrimeRiskByLocationBatch (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest)
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = GetCrimeRiskByLocationBatchWithHttpInfo(crimeRiskByLocationBatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        public ApiResponse<CrimeRiskResponseList> GetCrimeRiskByLocationBatchWithHttpInfo (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest)
        {
            // verify the required parameter 'crimeRiskByLocationBatchRequest' is set
            if (crimeRiskByLocationBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'crimeRiskByLocationBatchRequest' when calling RisksServiceApi->GetCrimeRiskByLocationBatch");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crimeRiskByLocationBatchRequest != null && crimeRiskByLocationBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(crimeRiskByLocationBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = crimeRiskByLocationBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByLocationBatchAsync (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = await GetCrimeRiskByLocationBatchWithHttpInfoAsync(crimeRiskByLocationBatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crimeRiskByLocationBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByLocationBatchWithHttpInfoAsync (CrimeRiskByLocationBatchRequest crimeRiskByLocationBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'crimeRiskByLocationBatchRequest' is set
            if (crimeRiskByLocationBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'crimeRiskByLocationBatchRequest' when calling RisksServiceApi->GetCrimeRiskByLocationBatch");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (crimeRiskByLocationBatchRequest != null && crimeRiskByLocationBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(crimeRiskByLocationBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = crimeRiskByLocationBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        public WaterBodyResponse GetDistanceToCoastByAddress (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string))
        {
             ApiResponse<WaterBodyResponse> localVarResponse = GetDistanceToCoastByAddressWithHttpInfo(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        public ApiResponse<WaterBodyResponse> GetDistanceToCoastByAddressWithHttpInfo (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string))
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WaterBodyResponse</returns>
        public async System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToCoastByAddressAsync (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WaterBodyResponse> localVarResponse = await GetDistanceToCoastByAddressWithHttpInfoAsync(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToCoastByAddressWithHttpInfoAsync (string address = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
           if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
           if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        public DistanceToFloodHazardResponse GetDistanceToCoastByAddressBatch (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest)
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = GetDistanceToCoastByAddressBatchWithHttpInfo(distanceToFloodHazardAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        public ApiResponse<DistanceToFloodHazardResponse> GetDistanceToCoastByAddressBatchWithHttpInfo (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest)
        {
            // verify the required parameter 'distanceToFloodHazardAddressRequest' is set
            if (distanceToFloodHazardAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'distanceToFloodHazardAddressRequest' when calling RisksServiceApi->GetDistanceToCoastByAddressBatch");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distanceToFloodHazardAddressRequest != null && distanceToFloodHazardAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(distanceToFloodHazardAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = distanceToFloodHazardAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        public async System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToCoastByAddressBatchAsync (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = await GetDistanceToCoastByAddressBatchWithHttpInfoAsync(distanceToFloodHazardAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToCoastByAddressBatchWithHttpInfoAsync (DistanceToFloodHazardAddressRequest distanceToFloodHazardAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'distanceToFloodHazardAddressRequest' is set
            if (distanceToFloodHazardAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'distanceToFloodHazardAddressRequest' when calling RisksServiceApi->GetDistanceToCoastByAddressBatch");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distanceToFloodHazardAddressRequest != null && distanceToFloodHazardAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(distanceToFloodHazardAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = distanceToFloodHazardAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        public WaterBodyResponse GetDistanceToCoastByLocation (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string))
        {
             ApiResponse<WaterBodyResponse> localVarResponse = GetDistanceToCoastByLocationWithHttpInfo(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        public ApiResponse<WaterBodyResponse> GetDistanceToCoastByLocationWithHttpInfo (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string))
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WaterBodyResponse</returns>
        public async System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToCoastByLocationAsync (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WaterBodyResponse> localVarResponse = await GetDistanceToCoastByLocationWithHttpInfoAsync(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location (optional)</param>
        /// <param name="latitude">The latitude of the location (optional)</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">This specifies the value of waterBodyType (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToCoastByLocationWithHttpInfoAsync (string longitude = default(string), string latitude = default(string), string maxCandidates = default(string), string waterBodyType = default(string), string searchDistance = default(string), string searchDistanceUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
           if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
           if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        public DistanceToFloodHazardResponse GetDistanceToCoastByLocationBatch (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest)
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = GetDistanceToCoastByLocationBatchWithHttpInfo(distanceToFloodHazardLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        public ApiResponse<DistanceToFloodHazardResponse> GetDistanceToCoastByLocationBatchWithHttpInfo (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest)
        {
            // verify the required parameter 'distanceToFloodHazardLocationRequest' is set
            if (distanceToFloodHazardLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'distanceToFloodHazardLocationRequest' when calling RisksServiceApi->GetDistanceToCoastByLocationBatch");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distanceToFloodHazardLocationRequest != null && distanceToFloodHazardLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(distanceToFloodHazardLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = distanceToFloodHazardLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        public async System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToCoastByLocationBatchAsync (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = await GetDistanceToCoastByLocationBatchWithHttpInfoAsync(distanceToFloodHazardLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distanceToFloodHazardLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToCoastByLocationBatchWithHttpInfoAsync (DistanceToFloodHazardLocationRequest distanceToFloodHazardLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'distanceToFloodHazardLocationRequest' is set
            if (distanceToFloodHazardLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'distanceToFloodHazardLocationRequest' when calling RisksServiceApi->GetDistanceToCoastByLocationBatch");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (distanceToFloodHazardLocationRequest != null && distanceToFloodHazardLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(distanceToFloodHazardLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = distanceToFloodHazardLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToCoastByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>EarthquakeHistory</returns>
        public EarthquakeHistory GetEarthquakeHistory (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string))
        {
             ApiResponse<EarthquakeHistory> localVarResponse = GetEarthquakeHistoryWithHttpInfo(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of EarthquakeHistory</returns>
        public ApiResponse<EarthquakeHistory> GetEarthquakeHistoryWithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetEarthquakeHistory");

            var localVarPath = "/risks/v1/earthquakehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (minMagnitude != null) localVarQueryParams.Add("minMagnitude", Configuration.ApiClient.ParameterToString(minMagnitude)); // query parameter
            if (maxMagnitude != null) localVarQueryParams.Add("maxMagnitude", Configuration.ApiClient.ParameterToString(maxMagnitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeHistory)));
            
            
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeHistory</returns>
        public async System.Threading.Tasks.Task<EarthquakeHistory> GetEarthquakeHistoryAsync (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EarthquakeHistory> localVarResponse = await GetEarthquakeHistoryWithHttpInfoAsync(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeHistory>> GetEarthquakeHistoryWithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string minMagnitude = default(string), string maxMagnitude = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetEarthquakeHistory");

            var localVarPath = "/risks/v1/earthquakehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
           if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
           if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
           if (minMagnitude != null) localVarQueryParams.Add("minMagnitude", Configuration.ApiClient.ParameterToString(minMagnitude)); // query parameter
           if (maxMagnitude != null) localVarQueryParams.Add("maxMagnitude", Configuration.ApiClient.ParameterToString(maxMagnitude)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeHistory)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        public EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = default(string), string includeGeometry = default(string))
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = GetEarthquakeRiskByAddressWithHttpInfo(address, richterValue, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        public ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = await GetEarthquakeRiskByAddressWithHttpInfoAsync(address, richterValue, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressWithHttpInfoAsync (string address, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <returns>EarthquakeRiskResponseList</returns>
        public EarthquakeRiskResponseList GetEarthquakeRiskByAddressBatch (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest)
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = GetEarthquakeRiskByAddressBatchWithHttpInfo(earthquakeRiskByAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        public ApiResponse<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchWithHttpInfo (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest)
        {
            // verify the required parameter 'earthquakeRiskByAddressRequest' is set
            if (earthquakeRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'earthquakeRiskByAddressRequest' when calling RisksServiceApi->GetEarthquakeRiskByAddressBatch");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earthquakeRiskByAddressRequest != null && earthquakeRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earthquakeRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earthquakeRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchAsync (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = await GetEarthquakeRiskByAddressBatchWithHttpInfoAsync(earthquakeRiskByAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByAddressBatchWithHttpInfoAsync (EarthquakeRiskByAddressRequest earthquakeRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'earthquakeRiskByAddressRequest' is set
            if (earthquakeRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'earthquakeRiskByAddressRequest' when calling RisksServiceApi->GetEarthquakeRiskByAddressBatch");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earthquakeRiskByAddressRequest != null && earthquakeRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earthquakeRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earthquakeRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        public EarthquakeRiskResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string))
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = GetEarthquakeRiskByLocationWithHttpInfo(longitude, latitude, richterValue, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        public ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = await GetEarthquakeRiskByLocationWithHttpInfoAsync(longitude, latitude, richterValue, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">all (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string richterValue = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <returns>EarthquakeRiskResponseList</returns>
        public EarthquakeRiskResponseList GetEarthquakeRiskByLocationBatch (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest)
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = GetEarthquakeRiskByLocationBatchWithHttpInfo(earthquakeRiskByLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        public ApiResponse<EarthquakeRiskResponseList> GetEarthquakeRiskByLocationBatchWithHttpInfo (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest)
        {
            // verify the required parameter 'earthquakeRiskByLocationRequest' is set
            if (earthquakeRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'earthquakeRiskByLocationRequest' when calling RisksServiceApi->GetEarthquakeRiskByLocationBatch");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earthquakeRiskByLocationRequest != null && earthquakeRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earthquakeRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earthquakeRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByLocationBatchAsync (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = await GetEarthquakeRiskByLocationBatchWithHttpInfoAsync(earthquakeRiskByLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="earthquakeRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByLocationBatchWithHttpInfoAsync (EarthquakeRiskByLocationRequest earthquakeRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'earthquakeRiskByLocationRequest' is set
            if (earthquakeRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'earthquakeRiskByLocationRequest' when calling RisksServiceApi->GetEarthquakeRiskByLocationBatch");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (earthquakeRiskByLocationRequest != null && earthquakeRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(earthquakeRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = earthquakeRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>FireHistory</returns>
        public FireHistory GetFireHistory (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string))
        {
             ApiResponse<FireHistory> localVarResponse = GetFireHistoryWithHttpInfo(postCode, startDate, endDate, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of FireHistory</returns>
        public ApiResponse<FireHistory> GetFireHistoryWithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistory");

            var localVarPath = "/risks/v1/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistory", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistory)));
            
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireHistory</returns>
        public async System.Threading.Tasks.Task<FireHistory> GetFireHistoryAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireHistory> localVarResponse = await GetFireHistoryWithHttpInfoAsync(postCode, startDate, endDate, maxCandidates, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireHistory>> GetFireHistoryWithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistory");

            var localVarPath = "/risks/v1/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
           if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
           if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistory", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistory)));
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>FireHistoryV2</returns>
        public FireHistoryV2 GetFireHistoryV2 (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string))
        {
             ApiResponse<FireHistoryV2> localVarResponse = GetFireHistoryV2WithHttpInfo(postCode, startDate, endDate, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <returns>ApiResponse of FireHistoryV2</returns>
        public ApiResponse<FireHistoryV2> GetFireHistoryV2WithHttpInfo (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistoryV2");

            var localVarPath = "/risks/v2/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistoryV2", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireHistoryV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistoryV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistoryV2)));
            
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireHistoryV2</returns>
        public async System.Threading.Tasks.Task<FireHistoryV2> GetFireHistoryV2Async (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireHistoryV2> localVarResponse = await GetFireHistoryV2WithHttpInfoAsync(postCode, startDate, endDate, maxCandidates, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireHistoryV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireHistoryV2>> GetFireHistoryV2WithHttpInfoAsync (string postCode, string startDate = default(string), string endDate = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistoryV2");

            var localVarPath = "/risks/v2/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
           if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
           if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistoryV2", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireHistoryV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistoryV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistoryV2)));
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskResponse</returns>
        public FireRiskResponse GetFireRiskByAddress (string address, string includeGeometry = default(string))
        {
             ApiResponse<FireRiskResponse> localVarResponse = GetFireRiskByAddressWithHttpInfo(address, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        public ApiResponse<FireRiskResponse> GetFireRiskByAddressWithHttpInfo (string address, string includeGeometry = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskByAddress");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskResponse> localVarResponse = await GetFireRiskByAddressWithHttpInfoAsync(address, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressWithHttpInfoAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskByAddress");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>FireRiskResponseList</returns>
        public FireRiskResponseList GetFireRiskByAddressBatch (FireRiskByAddressRequest fireRiskByAddressRequest)
        {
             ApiResponse<FireRiskResponseList> localVarResponse = GetFireRiskByAddressBatchWithHttpInfo(fireRiskByAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        public ApiResponse<FireRiskResponseList> GetFireRiskByAddressBatchWithHttpInfo (FireRiskByAddressRequest fireRiskByAddressRequest)
        {
            // verify the required parameter 'fireRiskByAddressRequest' is set
            if (fireRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByAddressRequest' when calling RisksServiceApi->GetFireRiskByAddressBatch");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByAddressRequest != null && fireRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByAddressBatchAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskResponseList> localVarResponse = await GetFireRiskByAddressBatchWithHttpInfoAsync(fireRiskByAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByAddressBatchWithHttpInfoAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fireRiskByAddressRequest' is set
            if (fireRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByAddressRequest' when calling RisksServiceApi->GetFireRiskByAddressBatch");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByAddressRequest != null && fireRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskResponse</returns>
        public FireRiskResponse GetFireRiskByLocation (string longitude, string latitude, string includeGeometry = default(string))
        {
             ApiResponse<FireRiskResponse> localVarResponse = GetFireRiskByLocationWithHttpInfo(longitude, latitude, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        public ApiResponse<FireRiskResponse> GetFireRiskByLocationWithHttpInfo (string longitude, string latitude, string includeGeometry = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskByLocation");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByLocationAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskResponse> localVarResponse = await GetFireRiskByLocationWithHttpInfoAsync(longitude, latitude, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskByLocation");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>FireRiskResponseList</returns>
        public FireRiskResponseList GetFireRiskByLocationBatch (FireRiskByLocationRequest fireRiskByLocationRequest)
        {
             ApiResponse<FireRiskResponseList> localVarResponse = GetFireRiskByLocationBatchWithHttpInfo(fireRiskByLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        public ApiResponse<FireRiskResponseList> GetFireRiskByLocationBatchWithHttpInfo (FireRiskByLocationRequest fireRiskByLocationRequest)
        {
            // verify the required parameter 'fireRiskByLocationRequest' is set
            if (fireRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByLocationRequest' when calling RisksServiceApi->GetFireRiskByLocationBatch");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByLocationRequest != null && fireRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByLocationBatchAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskResponseList> localVarResponse = await GetFireRiskByLocationBatchWithHttpInfoAsync(fireRiskByLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByLocationBatchWithHttpInfoAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fireRiskByLocationRequest' is set
            if (fireRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByLocationRequest' when calling RisksServiceApi->GetFireRiskByLocationBatch");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByLocationRequest != null && fireRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskV2Response</returns>
        public FireRiskV2Response GetFireRiskV2ByAddress (string address, string includeGeometry = default(string))
        {
             ApiResponse<FireRiskV2Response> localVarResponse = GetFireRiskV2ByAddressWithHttpInfo(address, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskV2Response</returns>
        public ApiResponse<FireRiskV2Response> GetFireRiskV2ByAddressWithHttpInfo (string address, string includeGeometry = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskV2ByAddress");

            var localVarPath = "/risks/v2/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2Response)));
            
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2Response</returns>
        public async System.Threading.Tasks.Task<FireRiskV2Response> GetFireRiskV2ByAddressAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskV2Response> localVarResponse = await GetFireRiskV2ByAddressWithHttpInfoAsync(address, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free form address text</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskV2Response>> GetFireRiskV2ByAddressWithHttpInfoAsync (string address, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskV2ByAddress");

            var localVarPath = "/risks/v2/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2Response)));
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>FireRiskV2ResponseList</returns>
        public FireRiskV2ResponseList GetFireRiskV2ByAddressBatch (FireRiskByAddressRequest fireRiskByAddressRequest)
        {
             ApiResponse<FireRiskV2ResponseList> localVarResponse = GetFireRiskV2ByAddressBatchWithHttpInfo(fireRiskByAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FireRiskV2ResponseList</returns>
        public ApiResponse<FireRiskV2ResponseList> GetFireRiskV2ByAddressBatchWithHttpInfo (FireRiskByAddressRequest fireRiskByAddressRequest)
        {
            // verify the required parameter 'fireRiskByAddressRequest' is set
            if (fireRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByAddressRequest' when calling RisksServiceApi->GetFireRiskV2ByAddressBatch");

            var localVarPath = "/risks/v2/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByAddressRequest != null && fireRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2ResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2ResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2ResponseList)));
            
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2ResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskV2ResponseList> GetFireRiskV2ByAddressBatchAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskV2ResponseList> localVarResponse = await GetFireRiskV2ByAddressBatchWithHttpInfoAsync(fireRiskByAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2ResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskV2ResponseList>> GetFireRiskV2ByAddressBatchWithHttpInfoAsync (FireRiskByAddressRequest fireRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fireRiskByAddressRequest' is set
            if (fireRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByAddressRequest' when calling RisksServiceApi->GetFireRiskV2ByAddressBatch");

            var localVarPath = "/risks/v2/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByAddressRequest != null && fireRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2ResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2ResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2ResponseList)));
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>FireRiskV2Response</returns>
        public FireRiskV2Response GetFireRiskV2ByLocation (string longitude, string latitude, string includeGeometry = default(string))
        {
             ApiResponse<FireRiskV2Response> localVarResponse = GetFireRiskV2ByLocationWithHttpInfo(longitude, latitude, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <returns>ApiResponse of FireRiskV2Response</returns>
        public ApiResponse<FireRiskV2Response> GetFireRiskV2ByLocationWithHttpInfo (string longitude, string latitude, string includeGeometry = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskV2ByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskV2ByLocation");

            var localVarPath = "/risks/v2/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2Response)));
            
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2Response</returns>
        public async System.Threading.Tasks.Task<FireRiskV2Response> GetFireRiskV2ByLocationAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskV2Response> localVarResponse = await GetFireRiskV2ByLocationWithHttpInfoAsync(longitude, latitude, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeGeometry">Flag to return Geometry default is N (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskV2Response>> GetFireRiskV2ByLocationWithHttpInfoAsync (string longitude, string latitude, string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskV2ByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskV2ByLocation");

            var localVarPath = "/risks/v2/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2Response)));
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>FireRiskV2ResponseList</returns>
        public FireRiskV2ResponseList GetFireRiskV2ByLocationBatch (FireRiskByLocationRequest fireRiskByLocationRequest)
        {
             ApiResponse<FireRiskV2ResponseList> localVarResponse = GetFireRiskV2ByLocationBatchWithHttpInfo(fireRiskByLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FireRiskV2ResponseList</returns>
        public ApiResponse<FireRiskV2ResponseList> GetFireRiskV2ByLocationBatchWithHttpInfo (FireRiskByLocationRequest fireRiskByLocationRequest)
        {
            // verify the required parameter 'fireRiskByLocationRequest' is set
            if (fireRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByLocationRequest' when calling RisksServiceApi->GetFireRiskV2ByLocationBatch");

            var localVarPath = "/risks/v2/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByLocationRequest != null && fireRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2ResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2ResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2ResponseList)));
            
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireRiskV2ResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskV2ResponseList> GetFireRiskV2ByLocationBatchAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireRiskV2ResponseList> localVarResponse = await GetFireRiskV2ByLocationBatchWithHttpInfoAsync(fireRiskByLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireRiskV2ResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskV2ResponseList>> GetFireRiskV2ByLocationBatchWithHttpInfoAsync (FireRiskByLocationRequest fireRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fireRiskByLocationRequest' is set
            if (fireRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'fireRiskByLocationRequest' when calling RisksServiceApi->GetFireRiskV2ByLocationBatch");

            var localVarPath = "/risks/v2/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fireRiskByLocationRequest != null && fireRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fireRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fireRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskV2ByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireRiskV2ResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskV2ResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskV2ResponseList)));
            
        }

        /// <summary>
        /// Get Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        public FireStations GetFireStationByAddress (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string))
        {
             ApiResponse<FireStations> localVarResponse = GetFireStationByAddressWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        public ApiResponse<FireStations> GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireStationByAddress");

            var localVarPath = "/risks/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
            
        }

        /// <summary>
        /// Get Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireStations</returns>
        public async System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireStations> localVarResponse = await GetFireStationByAddressWithHttpInfoAsync(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free Address</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressWithHttpInfoAsync (string address, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireStationByAddress");

            var localVarPath = "/risks/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Get Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        public FireStations GetFireStationByLocation (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string))
        {
             ApiResponse<FireStations> localVarResponse = GetFireStationByLocationWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        public ApiResponse<FireStations> GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireStationByLocation");

            var localVarPath = "/risks/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
            
        }

        /// <summary>
        /// Get Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FireStations</returns>
        public async System.Threading.Tasks.Task<FireStations> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FireStations> localVarResponse = await GetFireStationByLocationWithHttpInfoAsync(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">minutes (default), hours, seconds, milliseconds (optional)</param>
        /// <param name="travelDistance">Max travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Feet (default), Kilometers, Miles, Meters (optional)</param>
        /// <param name="sortBy">time (default), distance (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByLocationWithHttpInfoAsync (string longitude, string latitude, string maxCandidates = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string sortBy = default(string), string historicTrafficTimeBucket = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireStationByLocation");

            var localVarPath = "/risks/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        public FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = default(string), string includeGeometry = default(string))
        {
             ApiResponse<FloodRiskResponse> localVarResponse = GetFloodRiskByAddressWithHttpInfo(address, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        public ApiResponse<FloodRiskResponse> GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FloodRiskResponse> localVarResponse = await GetFloodRiskByAddressWithHttpInfoAsync(address, includeZoneDesc, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free text Address</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressWithHttpInfoAsync (string address, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <returns>FloodRiskResponseList</returns>
        public FloodRiskResponseList GetFloodRiskByAddressBatch (FloodRiskByAddressRequest floodRiskByAddressRequest)
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = GetFloodRiskByAddressBatchWithHttpInfo(floodRiskByAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        public ApiResponse<FloodRiskResponseList> GetFloodRiskByAddressBatchWithHttpInfo (FloodRiskByAddressRequest floodRiskByAddressRequest)
        {
            // verify the required parameter 'floodRiskByAddressRequest' is set
            if (floodRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'floodRiskByAddressRequest' when calling RisksServiceApi->GetFloodRiskByAddressBatch");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (floodRiskByAddressRequest != null && floodRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(floodRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = floodRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByAddressBatchAsync (FloodRiskByAddressRequest floodRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = await GetFloodRiskByAddressBatchWithHttpInfoAsync(floodRiskByAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByAddressBatchWithHttpInfoAsync (FloodRiskByAddressRequest floodRiskByAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'floodRiskByAddressRequest' is set
            if (floodRiskByAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'floodRiskByAddressRequest' when calling RisksServiceApi->GetFloodRiskByAddressBatch");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (floodRiskByAddressRequest != null && floodRiskByAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(floodRiskByAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = floodRiskByAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        public FloodRiskResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string))
        {
             ApiResponse<FloodRiskResponse> localVarResponse = GetFloodRiskByLocationWithHttpInfo(longitude, latitude, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        public ApiResponse<FloodRiskResponse> GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
            
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FloodRiskResponse> localVarResponse = await GetFloodRiskByLocationWithHttpInfoAsync(longitude, latitude, includeZoneDesc, includeGeometry, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Flag to return zone description (optional)</param>
        /// <param name="includeGeometry">Flag to return Geometry (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByLocationWithHttpInfoAsync (string longitude, string latitude, string includeZoneDesc = default(string), string includeGeometry = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
           if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <returns>FloodRiskResponseList</returns>
        public FloodRiskResponseList GetFloodRiskByLocationBatch (FloodRiskByLocationRequest floodRiskByLocationRequest)
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = GetFloodRiskByLocationBatchWithHttpInfo(floodRiskByLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        public ApiResponse<FloodRiskResponseList> GetFloodRiskByLocationBatchWithHttpInfo (FloodRiskByLocationRequest floodRiskByLocationRequest)
        {
            // verify the required parameter 'floodRiskByLocationRequest' is set
            if (floodRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'floodRiskByLocationRequest' when calling RisksServiceApi->GetFloodRiskByLocationBatch");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (floodRiskByLocationRequest != null && floodRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(floodRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = floodRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
            
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FloodRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByLocationBatchAsync (FloodRiskByLocationRequest floodRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = await GetFloodRiskByLocationBatchWithHttpInfoAsync(floodRiskByLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="floodRiskByLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByLocationBatchWithHttpInfoAsync (FloodRiskByLocationRequest floodRiskByLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'floodRiskByLocationRequest' is set
            if (floodRiskByLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'floodRiskByLocationRequest' when calling RisksServiceApi->GetFloodRiskByLocationBatch");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (floodRiskByLocationRequest != null && floodRiskByLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(floodRiskByLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = floodRiskByLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
        }

    }
}