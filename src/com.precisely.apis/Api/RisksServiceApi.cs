/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRisksServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = null, string includeGeometry = null);

        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        ApiResponse<CrimeRiskResponse> GetCrimeRiskByAddressWithHttpInfo (string address, string type = null, string includeGeometry = null);
        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CrimeRiskResponseList</returns>
        CrimeRiskResponseList GetCrimeRiskByAddressBatch (CrimeRiskByAddressRequest body = null);

        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        ApiResponse<CrimeRiskResponseList> GetCrimeRiskByAddressBatchWithHttpInfo (CrimeRiskByAddressRequest body = null);
        /// <summary>
        /// Get Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskLocationResponse</returns>
        CrimeRiskLocationResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = null, string includeGeometry = null);

        /// <summary>
        /// Get Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskLocationResponse</returns>
        ApiResponse<CrimeRiskLocationResponse> GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = null, string includeGeometry = null);
        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CrimeRiskLocationResponseList</returns>
        CrimeRiskLocationResponseList GetCrimeRiskByLocationBatch (CrimeRiskByLocationRequest body = null);

        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CrimeRiskLocationResponseList</returns>
        ApiResponse<CrimeRiskLocationResponseList> GetCrimeRiskByLocationBatchWithHttpInfo (CrimeRiskByLocationRequest body = null);
        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        WaterBodyResponse GetDistanceToFloodHazardByAddress (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);

        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        ApiResponse<WaterBodyResponse> GetDistanceToFloodHazardByAddressWithHttpInfo (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);
        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        DistanceToFloodHazardResponse GetDistanceToFloodHazardByAddressBatch (DistanceToFloodHazardAddressRequest body = null);

        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        ApiResponse<DistanceToFloodHazardResponse> GetDistanceToFloodHazardByAddressBatchWithHttpInfo (DistanceToFloodHazardAddressRequest body = null);
        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyLocationResponse</returns>
        WaterBodyLocationResponse GetDistanceToFloodHazardByLocation (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);

        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyLocationResponse</returns>
        ApiResponse<WaterBodyLocationResponse> GetDistanceToFloodHazardByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);
        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DistanceToFloodHazardLocationResponse</returns>
        DistanceToFloodHazardLocationResponse GetDistanceToFloodHazardByLocationBatch (DistanceToFloodHazardLocationRequest body = null);

        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DistanceToFloodHazardLocationResponse</returns>
        ApiResponse<DistanceToFloodHazardLocationResponse> GetDistanceToFloodHazardByLocationBatchWithHttpInfo (DistanceToFloodHazardLocationRequest body = null);
        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>EarthquakeHistory</returns>
        EarthquakeHistory GetEarthquakeHistory (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null);

        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>ApiResponse of EarthquakeHistory</returns>
        ApiResponse<EarthquakeHistory> GetEarthquakeHistoryWithHttpInfo (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null);
        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = null, string includeGeometry = null);

        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        ApiResponse<EarthquakeRiskResponse> GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = null, string includeGeometry = null);
        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>EarthquakeRiskResponseList</returns>
        EarthquakeRiskResponseList GetEarthquakeRiskByAddressBatch (EarthquakeRiskByAddressRequest body = null);

        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        ApiResponse<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchWithHttpInfo (EarthquakeRiskByAddressRequest body = null);
        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskLocationResponse</returns>
        EarthquakeRiskLocationResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = null, string includeGeometry = null);

        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskLocationResponse</returns>
        ApiResponse<EarthquakeRiskLocationResponse> GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = null, string includeGeometry = null);
        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>EarthquakeRiskLocationResponseList</returns>
        EarthquakeRiskLocationResponseList GetEarthquakeRiskByLocationBatch (EarthquakeRiskByLocationRequest body = null);

        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskLocationResponseList</returns>
        ApiResponse<EarthquakeRiskLocationResponseList> GetEarthquakeRiskByLocationBatchWithHttpInfo (EarthquakeRiskByLocationRequest body = null);
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>FireHistory</returns>
        FireHistory GetFireHistory (string postCode, string startDate = null, string endDate = null, string maxCandidates = null);

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>ApiResponse of FireHistory</returns>
        ApiResponse<FireHistory> GetFireHistoryWithHttpInfo (string postCode, string startDate = null, string endDate = null, string maxCandidates = null);
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>FireRiskResponse</returns>
        FireRiskResponse GetFireRiskByAddress (string address);

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        ApiResponse<FireRiskResponse> GetFireRiskByAddressWithHttpInfo (string address);
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FireRiskResponseList</returns>
        FireRiskResponseList GetFireRiskByAddressBatch (FireRiskByAddressRequest body = null);

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        ApiResponse<FireRiskResponseList> GetFireRiskByAddressBatchWithHttpInfo (FireRiskByAddressRequest body = null);
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>FireRiskLocationResponse</returns>
        FireRiskLocationResponse GetFireRiskByLocation (string longitude, string latitude);

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>ApiResponse of FireRiskLocationResponse</returns>
        ApiResponse<FireRiskLocationResponse> GetFireRiskByLocationWithHttpInfo (string longitude, string latitude);
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FireRiskLocationResponseList</returns>
        FireRiskLocationResponseList GetFireRiskByLocationBatch (FireRiskByLocationRequest body = null);

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FireRiskLocationResponseList</returns>
        ApiResponse<FireRiskLocationResponseList> GetFireRiskByLocationBatchWithHttpInfo (FireRiskByLocationRequest body = null);
        /// <summary>
        /// Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        FireStations GetFireStationByAddress (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        ApiResponse<FireStations> GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStationsLocation</returns>
        FireStationsLocation GetFireStationByLocation (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStationsLocation</returns>
        ApiResponse<FireStationsLocation> GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = null, string includeGeometry = null);

        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        ApiResponse<FloodRiskResponse> GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = null, string includeGeometry = null);
        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FloodRiskResponseList</returns>
        FloodRiskResponseList GetFloodRiskByAddressBatch (FloodRiskByAddressRequest body = null);

        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        ApiResponse<FloodRiskResponseList> GetFloodRiskByAddressBatchWithHttpInfo (FloodRiskByAddressRequest body = null);
        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>FloodRiskLocationResponse</returns>
        FloodRiskLocationResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null);

        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of FloodRiskLocationResponse</returns>
        ApiResponse<FloodRiskLocationResponse> GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null);
        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FloodRiskLocationResponseList</returns>
        FloodRiskLocationResponseList GetFloodRiskByLocationBatch (FloodRiskByLocationRequest body = null);

        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FloodRiskLocationResponseList</returns>
        ApiResponse<FloodRiskLocationResponseList> GetFloodRiskByLocationBatchWithHttpInfo (FloodRiskByLocationRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = null, string includeGeometry = null);

        /// <summary>
        /// Get Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressAsyncWithHttpInfo (string address, string type = null, string includeGeometry = null);
        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByAddressBatchAsync (CrimeRiskByAddressRequest body = null);

        /// <summary>
        /// Post Crime Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByAddressBatchAsyncWithHttpInfo (CrimeRiskByAddressRequest body = null);
        /// <summary>
        /// Get Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of CrimeRiskLocationResponse</returns>
        System.Threading.Tasks.Task<CrimeRiskLocationResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = null, string includeGeometry = null);

        /// <summary>
        /// Get Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// Returns the crime data or crime indexes for a given location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskLocationResponse>> GetCrimeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string type = null, string includeGeometry = null);
        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CrimeRiskLocationResponseList</returns>
        System.Threading.Tasks.Task<CrimeRiskLocationResponseList> GetCrimeRiskByLocationBatchAsync (CrimeRiskByLocationRequest body = null);

        /// <summary>
        /// Post Crime Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskLocationResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrimeRiskLocationResponseList>> GetCrimeRiskByLocationBatchAsyncWithHttpInfo (CrimeRiskByLocationRequest body = null);
        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of WaterBodyResponse</returns>
        System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToFloodHazardByAddressAsync (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);

        /// <summary>
        /// Get Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToFloodHazardByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);
        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToFloodHazardByAddressBatchAsync (DistanceToFloodHazardAddressRequest body = null);

        /// <summary>
        /// Post Distance To Flood Hazard By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToFloodHazardByAddressBatchAsyncWithHttpInfo (DistanceToFloodHazardAddressRequest body = null);
        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of WaterBodyLocationResponse</returns>
        System.Threading.Tasks.Task<WaterBodyLocationResponse> GetDistanceToFloodHazardByLocationAsync (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);

        /// <summary>
        /// Get Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of ApiResponse (WaterBodyLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WaterBodyLocationResponse>> GetDistanceToFloodHazardByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null);
        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DistanceToFloodHazardLocationResponse</returns>
        System.Threading.Tasks.Task<DistanceToFloodHazardLocationResponse> GetDistanceToFloodHazardByLocationBatchAsync (DistanceToFloodHazardLocationRequest body = null);

        /// <summary>
        /// Post Distance To Flood Hazard By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardLocationResponse>> GetDistanceToFloodHazardByLocationBatchAsyncWithHttpInfo (DistanceToFloodHazardLocationRequest body = null);
        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of EarthquakeHistory</returns>
        System.Threading.Tasks.Task<EarthquakeHistory> GetEarthquakeHistoryAsync (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null);

        /// <summary>
        /// Earthquake History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (EarthquakeHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeHistory>> GetEarthquakeHistoryAsyncWithHttpInfo (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null);
        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = null, string includeGeometry = null);

        /// <summary>
        /// Get Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressAsyncWithHttpInfo (string address, string richterValue = null, string includeGeometry = null);
        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchAsync (EarthquakeRiskByAddressRequest body = null);

        /// <summary>
        /// Post Earthquake Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByAddressBatchAsyncWithHttpInfo (EarthquakeRiskByAddressRequest body = null);
        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of EarthquakeRiskLocationResponse</returns>
        System.Threading.Tasks.Task<EarthquakeRiskLocationResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = null, string includeGeometry = null);

        /// <summary>
        /// Get Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskLocationResponse>> GetEarthquakeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string richterValue = null, string includeGeometry = null);
        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EarthquakeRiskLocationResponseList</returns>
        System.Threading.Tasks.Task<EarthquakeRiskLocationResponseList> GetEarthquakeRiskByLocationBatchAsync (EarthquakeRiskByLocationRequest body = null);

        /// <summary>
        /// Post Earthquake Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskLocationResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskLocationResponseList>> GetEarthquakeRiskByLocationBatchAsyncWithHttpInfo (EarthquakeRiskByLocationRequest body = null);
        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of FireHistory</returns>
        System.Threading.Tasks.Task<FireHistory> GetFireHistoryAsync (string postCode, string startDate = null, string endDate = null, string maxCandidates = null);

        /// <summary>
        /// Get Fire History
        /// </summary>
        /// <remarks>
        /// Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (FireHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireHistory>> GetFireHistoryAsyncWithHttpInfo (string postCode, string startDate = null, string endDate = null, string maxCandidates = null);
        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of FireRiskResponse</returns>
        System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address);

        /// <summary>
        /// Get Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FireRiskResponseList</returns>
        System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByAddressBatchAsync (FireRiskByAddressRequest body = null);

        /// <summary>
        /// Post Fire Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByAddressBatchAsyncWithHttpInfo (FireRiskByAddressRequest body = null);
        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of FireRiskLocationResponse</returns>
        System.Threading.Tasks.Task<FireRiskLocationResponse> GetFireRiskByLocationAsync (string longitude, string latitude);

        /// <summary>
        /// Get Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of ApiResponse (FireRiskLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskLocationResponse>> GetFireRiskByLocationAsyncWithHttpInfo (string longitude, string latitude);
        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FireRiskLocationResponseList</returns>
        System.Threading.Tasks.Task<FireRiskLocationResponseList> GetFireRiskByLocationBatchAsync (FireRiskByLocationRequest body = null);

        /// <summary>
        /// Post Fire Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FireRiskLocationResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireRiskLocationResponseList>> GetFireRiskByLocationBatchAsyncWithHttpInfo (FireRiskByLocationRequest body = null);
        /// <summary>
        /// Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of FireStations</returns>
        System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Fire Station By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of FireStationsLocation</returns>
        System.Threading.Tasks.Task<FireStationsLocation> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);

        /// <summary>
        /// Fire Station By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of ApiResponse (FireStationsLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireStationsLocation>> GetFireStationByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null);
        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = null, string includeGeometry = null);

        /// <summary>
        /// Get Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressAsyncWithHttpInfo (string address, string includeZoneDesc = null, string includeGeometry = null);
        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FloodRiskResponseList</returns>
        System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByAddressBatchAsync (FloodRiskByAddressRequest body = null);

        /// <summary>
        /// Post Flood Risk By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByAddressBatchAsyncWithHttpInfo (FloodRiskByAddressRequest body = null);
        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of FloodRiskLocationResponse</returns>
        System.Threading.Tasks.Task<FloodRiskLocationResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null);

        /// <summary>
        /// Get Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskLocationResponse>> GetFloodRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null);
        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FloodRiskLocationResponseList</returns>
        System.Threading.Tasks.Task<FloodRiskLocationResponseList> GetFloodRiskByLocationBatchAsync (FloodRiskByLocationRequest body = null);

        /// <summary>
        /// Post Flood Risk By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskLocationResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FloodRiskLocationResponseList>> GetFloodRiskByLocationBatchAsyncWithHttpInfo (FloodRiskByLocationRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RisksServiceApi : IRisksServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RisksServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RisksServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RisksServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskResponse</returns>
        public CrimeRiskResponse GetCrimeRiskByAddress (string address, string type = null, string includeGeometry = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = GetCrimeRiskByAddressWithHttpInfo(address, type, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponse</returns>
        public ApiResponse< CrimeRiskResponse > GetCrimeRiskByAddressWithHttpInfo (string address, string type = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of CrimeRiskResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponse> GetCrimeRiskByAddressAsync (string address, string type = null, string includeGeometry = null)
        {
             ApiResponse<CrimeRiskResponse> localVarResponse = await GetCrimeRiskByAddressAsyncWithHttpInfo(address, type, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Crime Risk By Address Accepts addresses as input and Returns local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text.</param>
        /// <param name="type">Type of crime like violent crime, property crime, etc., multiple crime type indexes could be requested as comma separated values with &#39;all&#39; as default.) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponse>> GetCrimeRiskByAddressAsyncWithHttpInfo (string address, string type = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetCrimeRiskByAddress");

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponse)));
            
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CrimeRiskResponseList</returns>
        public CrimeRiskResponseList GetCrimeRiskByAddressBatch (CrimeRiskByAddressRequest body = null)
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = GetCrimeRiskByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CrimeRiskResponseList</returns>
        public ApiResponse< CrimeRiskResponseList > GetCrimeRiskByAddressBatchWithHttpInfo (CrimeRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CrimeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<CrimeRiskResponseList> GetCrimeRiskByAddressBatchAsync (CrimeRiskByAddressRequest body = null)
        {
             ApiResponse<CrimeRiskResponseList> localVarResponse = await GetCrimeRiskByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Crime Risk By Address This is a Batch offering for &#39;Crime Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskResponseList>> GetCrimeRiskByAddressBatchAsyncWithHttpInfo (CrimeRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/crime/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Crime Risk By Location Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>CrimeRiskLocationResponse</returns>
        public CrimeRiskLocationResponse GetCrimeRiskByLocation (string longitude, string latitude, string type = null, string includeGeometry = null)
        {
             ApiResponse<CrimeRiskLocationResponse> localVarResponse = GetCrimeRiskByLocationWithHttpInfo(longitude, latitude, type, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Crime Risk By Location Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of CrimeRiskLocationResponse</returns>
        public ApiResponse< CrimeRiskLocationResponse > GetCrimeRiskByLocationWithHttpInfo (string longitude, string latitude, string type = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskLocationResponse)));
            
        }

        /// <summary>
        /// Get Crime Risk By Location Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of CrimeRiskLocationResponse</returns>
        public async System.Threading.Tasks.Task<CrimeRiskLocationResponse> GetCrimeRiskByLocationAsync (string longitude, string latitude, string type = null, string includeGeometry = null)
        {
             ApiResponse<CrimeRiskLocationResponse> localVarResponse = await GetCrimeRiskByLocationAsyncWithHttpInfo(longitude, latitude, type, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Crime Risk By Location Returns the crime data or crime indexes for a given location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="type">Refers to crime type. Valid values are following 11 crime types with &#39;all&#39; as default (more than one can also be given as comma separated types) (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskLocationResponse>> GetCrimeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string type = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetCrimeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetCrimeRiskByLocation");

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskLocationResponse)));
            
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CrimeRiskLocationResponseList</returns>
        public CrimeRiskLocationResponseList GetCrimeRiskByLocationBatch (CrimeRiskByLocationRequest body = null)
        {
             ApiResponse<CrimeRiskLocationResponseList> localVarResponse = GetCrimeRiskByLocationBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CrimeRiskLocationResponseList</returns>
        public ApiResponse< CrimeRiskLocationResponseList > GetCrimeRiskByLocationBatchWithHttpInfo (CrimeRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CrimeRiskLocationResponseList</returns>
        public async System.Threading.Tasks.Task<CrimeRiskLocationResponseList> GetCrimeRiskByLocationBatchAsync (CrimeRiskByLocationRequest body = null)
        {
             ApiResponse<CrimeRiskLocationResponseList> localVarResponse = await GetCrimeRiskByLocationBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Crime Risk By Location This is a Batch offering for &#39;Crime Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve local crime indexes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CrimeRiskLocationResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrimeRiskLocationResponseList>> GetCrimeRiskByLocationBatchAsyncWithHttpInfo (CrimeRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/crime/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrimeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrimeRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (CrimeRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrimeRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyResponse</returns>
        public WaterBodyResponse GetDistanceToFloodHazardByAddress (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
             ApiResponse<WaterBodyResponse> localVarResponse = GetDistanceToFloodHazardByAddressWithHttpInfo(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyResponse</returns>
        public ApiResponse< WaterBodyResponse > GetDistanceToFloodHazardByAddressWithHttpInfo (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetDistanceToFloodHazardByAddress");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of WaterBodyResponse</returns>
        public async System.Threading.Tasks.Task<WaterBodyResponse> GetDistanceToFloodHazardByAddressAsync (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
             ApiResponse<WaterBodyResponse> localVarResponse = await GetDistanceToFloodHazardByAddressAsyncWithHttpInfo(address, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Distance To Flood Hazard By Address Accepts addresses as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of ApiResponse (WaterBodyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WaterBodyResponse>> GetDistanceToFloodHazardByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetDistanceToFloodHazardByAddress");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WaterBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DistanceToFloodHazardResponse</returns>
        public DistanceToFloodHazardResponse GetDistanceToFloodHazardByAddressBatch (DistanceToFloodHazardAddressRequest body = null)
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = GetDistanceToFloodHazardByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DistanceToFloodHazardResponse</returns>
        public ApiResponse< DistanceToFloodHazardResponse > GetDistanceToFloodHazardByAddressBatchWithHttpInfo (DistanceToFloodHazardAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DistanceToFloodHazardResponse</returns>
        public async System.Threading.Tasks.Task<DistanceToFloodHazardResponse> GetDistanceToFloodHazardByAddressBatchAsync (DistanceToFloodHazardAddressRequest body = null)
        {
             ApiResponse<DistanceToFloodHazardResponse> localVarResponse = await GetDistanceToFloodHazardByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Distance To Flood Hazard By Address This is a Batch offering for &#39;Distance To Flood Hazard By Address&#39; service. It accepts a single address or a list of addresses and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardResponse>> GetDistanceToFloodHazardByAddressBatchAsyncWithHttpInfo (DistanceToFloodHazardAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistanceToFloodHazardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardResponse)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>WaterBodyLocationResponse</returns>
        public WaterBodyLocationResponse GetDistanceToFloodHazardByLocation (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
             ApiResponse<WaterBodyLocationResponse> localVarResponse = GetDistanceToFloodHazardByLocationWithHttpInfo(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>ApiResponse of WaterBodyLocationResponse</returns>
        public ApiResponse< WaterBodyLocationResponse > GetDistanceToFloodHazardByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetDistanceToFloodHazardByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetDistanceToFloodHazardByLocation");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WaterBodyLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyLocationResponse)));
            
        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of WaterBodyLocationResponse</returns>
        public async System.Threading.Tasks.Task<WaterBodyLocationResponse> GetDistanceToFloodHazardByLocationAsync (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
             ApiResponse<WaterBodyLocationResponse> localVarResponse = await GetDistanceToFloodHazardByLocationAsyncWithHttpInfo(longitude, latitude, maxCandidates, waterBodyType, searchDistance, searchDistanceUnit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Distance To Flood Hazard By Location Accepts latitude &amp; longitude as input and Returns the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="maxCandidates">This specifies the value of maxCandidates (optional)</param>
        /// <param name="waterBodyType">all (default value), oceanandsea,lake,others,unknown,intermittent (optional)</param>
        /// <param name="searchDistance">This specifies the search distance (optional)</param>
        /// <param name="searchDistanceUnit">miles (default value),feet, kilometers, meters (optional)</param>
        /// <returns>Task of ApiResponse (WaterBodyLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WaterBodyLocationResponse>> GetDistanceToFloodHazardByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string waterBodyType = null, string searchDistance = null, string searchDistanceUnit = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetDistanceToFloodHazardByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetDistanceToFloodHazardByLocation");

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (waterBodyType != null) localVarQueryParams.Add("waterBodyType", Configuration.ApiClient.ParameterToString(waterBodyType)); // query parameter
            if (searchDistance != null) localVarQueryParams.Add("searchDistance", Configuration.ApiClient.ParameterToString(searchDistance)); // query parameter
            if (searchDistanceUnit != null) localVarQueryParams.Add("searchDistanceUnit", Configuration.ApiClient.ParameterToString(searchDistanceUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WaterBodyLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (WaterBodyLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WaterBodyLocationResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DistanceToFloodHazardLocationResponse</returns>
        public DistanceToFloodHazardLocationResponse GetDistanceToFloodHazardByLocationBatch (DistanceToFloodHazardLocationRequest body = null)
        {
             ApiResponse<DistanceToFloodHazardLocationResponse> localVarResponse = GetDistanceToFloodHazardByLocationBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DistanceToFloodHazardLocationResponse</returns>
        public ApiResponse< DistanceToFloodHazardLocationResponse > GetDistanceToFloodHazardByLocationBatchWithHttpInfo (DistanceToFloodHazardLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistanceToFloodHazardLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardLocationResponse)));
            
        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DistanceToFloodHazardLocationResponse</returns>
        public async System.Threading.Tasks.Task<DistanceToFloodHazardLocationResponse> GetDistanceToFloodHazardByLocationBatchAsync (DistanceToFloodHazardLocationRequest body = null)
        {
             ApiResponse<DistanceToFloodHazardLocationResponse> localVarResponse = await GetDistanceToFloodHazardByLocationBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Distance To Flood Hazard By Location This is a Batch offering for &#39;Distance To Flood Hazard By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve the distance from nearest water bodies along with body name and location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DistanceToFloodHazardLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistanceToFloodHazardLocationResponse>> GetDistanceToFloodHazardByLocationBatchAsyncWithHttpInfo (DistanceToFloodHazardLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/shoreline/distancetofloodhazard/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistanceToFloodHazardByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistanceToFloodHazardLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DistanceToFloodHazardLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistanceToFloodHazardLocationResponse)));
            
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>EarthquakeHistory</returns>
        public EarthquakeHistory GetEarthquakeHistory (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null)
        {
             ApiResponse<EarthquakeHistory> localVarResponse = GetEarthquakeHistoryWithHttpInfo(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>ApiResponse of EarthquakeHistory</returns>
        public ApiResponse< EarthquakeHistory > GetEarthquakeHistoryWithHttpInfo (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null)
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetEarthquakeHistory");

            var localVarPath = "/risks/v1/earthquakehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (minMagnitude != null) localVarQueryParams.Add("minMagnitude", Configuration.ApiClient.ParameterToString(minMagnitude)); // query parameter
            if (maxMagnitude != null) localVarQueryParams.Add("maxMagnitude", Configuration.ApiClient.ParameterToString(maxMagnitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeHistory)));
            
        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of EarthquakeHistory</returns>
        public async System.Threading.Tasks.Task<EarthquakeHistory> GetEarthquakeHistoryAsync (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null)
        {
             ApiResponse<EarthquakeHistory> localVarResponse = await GetEarthquakeHistoryAsyncWithHttpInfo(postCode, startDate, endDate, minMagnitude, maxMagnitude, maxCandidates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Earthquake History Accepts postcode as input and Returns historical earthquake details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="minMagnitude">Minimum richter scale magnitude (optional)</param>
        /// <param name="maxMagnitude">Maximum Richter scale magnitude (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (EarthquakeHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeHistory>> GetEarthquakeHistoryAsyncWithHttpInfo (string postCode, string startDate = null, string endDate = null, string minMagnitude = null, string maxMagnitude = null, string maxCandidates = null)
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetEarthquakeHistory");

            var localVarPath = "/risks/v1/earthquakehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (minMagnitude != null) localVarQueryParams.Add("minMagnitude", Configuration.ApiClient.ParameterToString(minMagnitude)); // query parameter
            if (maxMagnitude != null) localVarQueryParams.Add("maxMagnitude", Configuration.ApiClient.ParameterToString(maxMagnitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeHistory)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskResponse</returns>
        public EarthquakeRiskResponse GetEarthquakeRiskByAddress (string address, string richterValue = null, string includeGeometry = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = GetEarthquakeRiskByAddressWithHttpInfo(address, richterValue, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponse</returns>
        public ApiResponse< EarthquakeRiskResponse > GetEarthquakeRiskByAddressWithHttpInfo (string address, string richterValue = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of EarthquakeRiskResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponse> GetEarthquakeRiskByAddressAsync (string address, string richterValue = null, string includeGeometry = null)
        {
             ApiResponse<EarthquakeRiskResponse> localVarResponse = await GetEarthquakeRiskByAddressAsyncWithHttpInfo(address, richterValue, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Earthquake Risk By Address Accepts addresses as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponse>> GetEarthquakeRiskByAddressAsyncWithHttpInfo (string address, string richterValue = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetEarthquakeRiskByAddress");

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponse)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>EarthquakeRiskResponseList</returns>
        public EarthquakeRiskResponseList GetEarthquakeRiskByAddressBatch (EarthquakeRiskByAddressRequest body = null)
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = GetEarthquakeRiskByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskResponseList</returns>
        public ApiResponse< EarthquakeRiskResponseList > GetEarthquakeRiskByAddressBatchWithHttpInfo (EarthquakeRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EarthquakeRiskResponseList</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskResponseList> GetEarthquakeRiskByAddressBatchAsync (EarthquakeRiskByAddressRequest body = null)
        {
             ApiResponse<EarthquakeRiskResponseList> localVarResponse = await GetEarthquakeRiskByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Earthquake Risk By Address This is a Batch offering for &#39;Earthquake Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskResponseList>> GetEarthquakeRiskByAddressBatchAsyncWithHttpInfo (EarthquakeRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/earthquake/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskResponseList)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>EarthquakeRiskLocationResponse</returns>
        public EarthquakeRiskLocationResponse GetEarthquakeRiskByLocation (string longitude, string latitude, string richterValue = null, string includeGeometry = null)
        {
             ApiResponse<EarthquakeRiskLocationResponse> localVarResponse = GetEarthquakeRiskByLocationWithHttpInfo(longitude, latitude, richterValue, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskLocationResponse</returns>
        public ApiResponse< EarthquakeRiskLocationResponse > GetEarthquakeRiskByLocationWithHttpInfo (string longitude, string latitude, string richterValue = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskLocationResponse)));
            
        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of EarthquakeRiskLocationResponse</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskLocationResponse> GetEarthquakeRiskByLocationAsync (string longitude, string latitude, string richterValue = null, string includeGeometry = null)
        {
             ApiResponse<EarthquakeRiskLocationResponse> localVarResponse = await GetEarthquakeRiskByLocationAsyncWithHttpInfo(longitude, latitude, richterValue, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Earthquake Risk By Location Accepts latitude &amp; longitude as input and Returns counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="richterValue">Richter values like R5 (count of richter scale 5 events), R7 (count of richter scale 7 events), R6_GE (count of events &gt;&#x3D; richter scale 6), etc., multiple richter scales could be requested as comma separated values with &#39;all&#39; as default. Valid values: All (default value), R0, R1, R2, R3, R4, R5, R6, R7, R0_GE, R1_GE, R2_GE, R3_GE, R4_GE, R5_GE, R6_GE, R7_GE (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskLocationResponse>> GetEarthquakeRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string richterValue = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetEarthquakeRiskByLocation");

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (richterValue != null) localVarQueryParams.Add("richterValue", Configuration.ApiClient.ParameterToString(richterValue)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskLocationResponse)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>EarthquakeRiskLocationResponseList</returns>
        public EarthquakeRiskLocationResponseList GetEarthquakeRiskByLocationBatch (EarthquakeRiskByLocationRequest body = null)
        {
             ApiResponse<EarthquakeRiskLocationResponseList> localVarResponse = GetEarthquakeRiskByLocationBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EarthquakeRiskLocationResponseList</returns>
        public ApiResponse< EarthquakeRiskLocationResponseList > GetEarthquakeRiskByLocationBatchWithHttpInfo (EarthquakeRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EarthquakeRiskLocationResponseList</returns>
        public async System.Threading.Tasks.Task<EarthquakeRiskLocationResponseList> GetEarthquakeRiskByLocationBatchAsync (EarthquakeRiskByLocationRequest body = null)
        {
             ApiResponse<EarthquakeRiskLocationResponseList> localVarResponse = await GetEarthquakeRiskByLocationBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Earthquake Risk By Location This is a Batch offering for &#39;Earthquake Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve counts of earthquakes for various richter measurements and values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EarthquakeRiskLocationResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EarthquakeRiskLocationResponseList>> GetEarthquakeRiskByLocationBatchAsyncWithHttpInfo (EarthquakeRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/earthquake/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEarthquakeRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EarthquakeRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (EarthquakeRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EarthquakeRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>FireHistory</returns>
        public FireHistory GetFireHistory (string postCode, string startDate = null, string endDate = null, string maxCandidates = null)
        {
             ApiResponse<FireHistory> localVarResponse = GetFireHistoryWithHttpInfo(postCode, startDate, endDate, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>ApiResponse of FireHistory</returns>
        public ApiResponse< FireHistory > GetFireHistoryWithHttpInfo (string postCode, string startDate = null, string endDate = null, string maxCandidates = null)
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistory");

            var localVarPath = "/risks/v1/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistory)));
            
        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of FireHistory</returns>
        public async System.Threading.Tasks.Task<FireHistory> GetFireHistoryAsync (string postCode, string startDate = null, string endDate = null, string maxCandidates = null)
        {
             ApiResponse<FireHistory> localVarResponse = await GetFireHistoryAsyncWithHttpInfo(postCode, startDate, endDate, maxCandidates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire History Accepts postcode as input and Returns fire event details for a particular postcode.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCode">5 digit Postal code to search</param>
        /// <param name="startDate">Start time in milliseconds(UTC) (optional)</param>
        /// <param name="endDate">End time in milliseconds(UTC) (optional)</param>
        /// <param name="maxCandidates">Maximum response events (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (FireHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireHistory>> GetFireHistoryAsyncWithHttpInfo (string postCode, string startDate = null, string endDate = null, string maxCandidates = null)
        {
            // verify the required parameter 'postCode' is set
            if (postCode == null)
                throw new ApiException(400, "Missing required parameter 'postCode' when calling RisksServiceApi->GetFireHistory");

            var localVarPath = "/risks/v1/firehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (startDate != null) localVarQueryParams.Add("startDate", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("endDate", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireHistory)));
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>FireRiskResponse</returns>
        public FireRiskResponse GetFireRiskByAddress (string address)
        {
             ApiResponse<FireRiskResponse> localVarResponse = GetFireRiskByAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>ApiResponse of FireRiskResponse</returns>
        public ApiResponse< FireRiskResponse > GetFireRiskByAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskByAddress");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of FireRiskResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskResponse> GetFireRiskByAddressAsync (string address)
        {
             ApiResponse<FireRiskResponse> localVarResponse = await GetFireRiskByAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Address Accepts addresses as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form address text</param>
        /// <returns>Task of ApiResponse (FireRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponse>> GetFireRiskByAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireRiskByAddress");

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponse)));
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FireRiskResponseList</returns>
        public FireRiskResponseList GetFireRiskByAddressBatch (FireRiskByAddressRequest body = null)
        {
             ApiResponse<FireRiskResponseList> localVarResponse = GetFireRiskByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FireRiskResponseList</returns>
        public ApiResponse< FireRiskResponseList > GetFireRiskByAddressBatchWithHttpInfo (FireRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FireRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskResponseList> GetFireRiskByAddressBatchAsync (FireRiskByAddressRequest body = null)
        {
             ApiResponse<FireRiskResponseList> localVarResponse = await GetFireRiskByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Address This is a Batch offering for &#39;Fire Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FireRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskResponseList>> GetFireRiskByAddressBatchAsyncWithHttpInfo (FireRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/fire/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskResponseList)));
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>FireRiskLocationResponse</returns>
        public FireRiskLocationResponse GetFireRiskByLocation (string longitude, string latitude)
        {
             ApiResponse<FireRiskLocationResponse> localVarResponse = GetFireRiskByLocationWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>ApiResponse of FireRiskLocationResponse</returns>
        public ApiResponse< FireRiskLocationResponse > GetFireRiskByLocationWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskByLocation");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskLocationResponse)));
            
        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of FireRiskLocationResponse</returns>
        public async System.Threading.Tasks.Task<FireRiskLocationResponse> GetFireRiskByLocationAsync (string longitude, string latitude)
        {
             ApiResponse<FireRiskLocationResponse> localVarResponse = await GetFireRiskByLocationAsyncWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Fire Risk By Location Accepts latitude &amp; longitude as input and Returns fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <returns>Task of ApiResponse (FireRiskLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskLocationResponse>> GetFireRiskByLocationAsyncWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireRiskByLocation");

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskLocationResponse)));
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FireRiskLocationResponseList</returns>
        public FireRiskLocationResponseList GetFireRiskByLocationBatch (FireRiskByLocationRequest body = null)
        {
             ApiResponse<FireRiskLocationResponseList> localVarResponse = GetFireRiskByLocationBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FireRiskLocationResponseList</returns>
        public ApiResponse< FireRiskLocationResponseList > GetFireRiskByLocationBatchWithHttpInfo (FireRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FireRiskLocationResponseList</returns>
        public async System.Threading.Tasks.Task<FireRiskLocationResponseList> GetFireRiskByLocationBatchAsync (FireRiskByLocationRequest body = null)
        {
             ApiResponse<FireRiskLocationResponseList> localVarResponse = await GetFireRiskByLocationBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Fire Risk By Location This is a Batch offering for &#39;Fire Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve fire risk data by risk types.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FireRiskLocationResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireRiskLocationResponseList>> GetFireRiskByLocationBatchAsyncWithHttpInfo (FireRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/fire/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStations</returns>
        public FireStations GetFireStationByAddress (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<FireStations> localVarResponse = GetFireStationByAddressWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStations</returns>
        public ApiResponse< FireStations > GetFireStationByAddressWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireStationByAddress");

            var localVarPath = "/risks/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of FireStations</returns>
        public async System.Threading.Tasks.Task<FireStations> GetFireStationByAddressAsync (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<FireStations> localVarResponse = await GetFireStationByAddressAsyncWithHttpInfo(address, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fire Station By Address Accepts addresses as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3 and maximum value is 5. The retrieved results are traveldistance sorted from the input location. (optional)</param>
        /// <param name="travelTime">Max travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sort the fire stations results by either travel time or travel distance (nearest first). Default sorting is by travel time. (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of ApiResponse (FireStations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStations>> GetFireStationByAddressAsyncWithHttpInfo (string address, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFireStationByAddress");

            var localVarPath = "/risks/v1/firestation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStations)));
            
        }

        /// <summary>
        /// Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>FireStationsLocation</returns>
        public FireStationsLocation GetFireStationByLocation (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<FireStationsLocation> localVarResponse = GetFireStationByLocationWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>ApiResponse of FireStationsLocation</returns>
        public ApiResponse< FireStationsLocation > GetFireStationByLocationWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireStationByLocation");

            var localVarPath = "/risks/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStationsLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStationsLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStationsLocation)));
            
        }

        /// <summary>
        /// Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of FireStationsLocation</returns>
        public async System.Threading.Tasks.Task<FireStationsLocation> GetFireStationByLocationAsync (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
             ApiResponse<FireStationsLocation> localVarResponse = await GetFireStationByLocationAsyncWithHttpInfo(longitude, latitude, maxCandidates, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, sortBy, historicTrafficTimeBucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fire Station By Location Accepts latitude &amp; longitude as input and Returns nearest fire stations.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="maxCandidates">Specifies the maximum number of fire stations that this service retrieves. The default value is 3. The retrieved fire stations are distance ordered from the specified location. Maximum of 5 fire stations can be retrieved. (optional)</param>
        /// <param name="travelTime">Maximum travel time from input location to fire station. Maximum allowed is 2 hours (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Maximum travel distance from input location to fire station. Maximum allowed is 50 miles (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="sortBy">Sorting of fire stations in result by travel time/distance (nearest first from input location). (optional)</param>
        /// <param name="historicTrafficTimeBucket">Historic traffic time slab (optional)</param>
        /// <returns>Task of ApiResponse (FireStationsLocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FireStationsLocation>> GetFireStationByLocationAsyncWithHttpInfo (string longitude, string latitude, string maxCandidates = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string sortBy = null, string historicTrafficTimeBucket = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFireStationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFireStationByLocation");

            var localVarPath = "/risks/v1/firestation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFireStationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FireStationsLocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FireStationsLocation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FireStationsLocation)));
            
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>FloodRiskResponse</returns>
        public FloodRiskResponse GetFloodRiskByAddress (string address, string includeZoneDesc = null, string includeGeometry = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = GetFloodRiskByAddressWithHttpInfo(address, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponse</returns>
        public ApiResponse< FloodRiskResponse > GetFloodRiskByAddressWithHttpInfo (string address, string includeZoneDesc = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of FloodRiskResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponse> GetFloodRiskByAddressAsync (string address, string includeZoneDesc = null, string includeGeometry = null)
        {
             ApiResponse<FloodRiskResponse> localVarResponse = await GetFloodRiskByAddressAsyncWithHttpInfo(address, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Flood Risk By Address Accepts addresses as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-text Address</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponse>> GetFloodRiskByAddressAsyncWithHttpInfo (string address, string includeZoneDesc = null, string includeGeometry = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RisksServiceApi->GetFloodRiskByAddress");

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponse)));
            
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FloodRiskResponseList</returns>
        public FloodRiskResponseList GetFloodRiskByAddressBatch (FloodRiskByAddressRequest body = null)
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = GetFloodRiskByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FloodRiskResponseList</returns>
        public ApiResponse< FloodRiskResponseList > GetFloodRiskByAddressBatchWithHttpInfo (FloodRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FloodRiskResponseList</returns>
        public async System.Threading.Tasks.Task<FloodRiskResponseList> GetFloodRiskByAddressBatchAsync (FloodRiskByAddressRequest body = null)
        {
             ApiResponse<FloodRiskResponseList> localVarResponse = await GetFloodRiskByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Flood Risk By Address This is a Batch offering for &#39;Flood Risk By Address&#39; service. It accepts a single address or a list of addresses and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskResponseList>> GetFloodRiskByAddressBatchAsyncWithHttpInfo (FloodRiskByAddressRequest body = null)
        {

            var localVarPath = "/risks/v1/flood/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskResponseList)));
            
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>FloodRiskLocationResponse</returns>
        public FloodRiskLocationResponse GetFloodRiskByLocation (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null)
        {
             ApiResponse<FloodRiskLocationResponse> localVarResponse = GetFloodRiskByLocationWithHttpInfo(longitude, latitude, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>ApiResponse of FloodRiskLocationResponse</returns>
        public ApiResponse< FloodRiskLocationResponse > GetFloodRiskByLocationWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskLocationResponse)));
            
        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of FloodRiskLocationResponse</returns>
        public async System.Threading.Tasks.Task<FloodRiskLocationResponse> GetFloodRiskByLocationAsync (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null)
        {
             ApiResponse<FloodRiskLocationResponse> localVarResponse = await GetFloodRiskByLocationAsyncWithHttpInfo(longitude, latitude, includeZoneDesc, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Flood Risk By Location Accepts latitude &amp; longitude as input and Returns flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="includeZoneDesc">Specifies primary zone description. Valid Values: &#39;Y&#39; or &#39;N&#39;. Default: &#39;Y&#39; (optional)</param>
        /// <param name="includeGeometry">Y or N (default is N) - if it is Y, then geometry will be part of response (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskLocationResponse>> GetFloodRiskByLocationAsyncWithHttpInfo (string longitude, string latitude, string includeZoneDesc = null, string includeGeometry = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling RisksServiceApi->GetFloodRiskByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling RisksServiceApi->GetFloodRiskByLocation");

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (includeZoneDesc != null) localVarQueryParams.Add("includeZoneDesc", Configuration.ApiClient.ParameterToString(includeZoneDesc)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskLocationResponse)));
            
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>FloodRiskLocationResponseList</returns>
        public FloodRiskLocationResponseList GetFloodRiskByLocationBatch (FloodRiskByLocationRequest body = null)
        {
             ApiResponse<FloodRiskLocationResponseList> localVarResponse = GetFloodRiskByLocationBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FloodRiskLocationResponseList</returns>
        public ApiResponse< FloodRiskLocationResponseList > GetFloodRiskByLocationBatchWithHttpInfo (FloodRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskLocationResponseList)));
            
        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FloodRiskLocationResponseList</returns>
        public async System.Threading.Tasks.Task<FloodRiskLocationResponseList> GetFloodRiskByLocationBatchAsync (FloodRiskByLocationRequest body = null)
        {
             ApiResponse<FloodRiskLocationResponseList> localVarResponse = await GetFloodRiskByLocationBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Flood Risk By Location This is a Batch offering for &#39;Flood Risk By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve flood risk data for flood zones and base flood elevation values.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FloodRiskLocationResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FloodRiskLocationResponseList>> GetFloodRiskByLocationBatchAsyncWithHttpInfo (FloodRiskByLocationRequest body = null)
        {

            var localVarPath = "/risks/v1/flood/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFloodRiskByLocationBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FloodRiskLocationResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (FloodRiskLocationResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FloodRiskLocationResponseList)));
            
        }

    }
}
