/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>DemographicsV2</returns>
        DemographicsV2 GetDemographicsByAddressV2 (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of DemographicsV2</returns>
        ApiResponse<DemographicsV2> GetDemographicsByAddressV2WithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>DemographicsV2</returns>
        DemographicsV2 GetDemographicsByLocationV2 (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of DemographicsV2</returns>
        ApiResponse<DemographicsV2> GetDemographicsByLocationV2WithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Segmentation</returns>
        Segmentation GetSegmentationByAddress (string address, string country = null);

        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>ApiResponse of Segmentation</returns>
        ApiResponse<Segmentation> GetSegmentationByAddressWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Segmentation</returns>
        Segmentation GetSegmentationByLocation (string longitude, string latitude);

        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>ApiResponse of Segmentation</returns>
        ApiResponse<Segmentation> GetSegmentationByLocationWithHttpInfo (string longitude, string latitude);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of DemographicsV2</returns>
        System.Threading.Tasks.Task<DemographicsV2> GetDemographicsByAddressV2Async (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (DemographicsV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsV2>> GetDemographicsByAddressV2AsyncWithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of DemographicsV2</returns>
        System.Threading.Tasks.Task<DemographicsV2> GetDemographicsByLocationV2Async (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (DemographicsV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsV2>> GetDemographicsByLocationV2AsyncWithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of Segmentation</returns>
        System.Threading.Tasks.Task<Segmentation> GetSegmentationByAddressAsync (string address, string country = null);

        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByAddressAsyncWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of Segmentation</returns>
        System.Threading.Tasks.Task<Segmentation> GetSegmentationByLocationAsync (string longitude, string latitude);

        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByLocationAsyncWithHttpInfo (string longitude, string latitude);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DemographicsServiceApi : IDemographicsServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DemographicsServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>DemographicsV2</returns>
        public DemographicsV2 GetDemographicsByAddressV2 (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<DemographicsV2> localVarResponse = GetDemographicsByAddressV2WithHttpInfo(address, country, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of DemographicsV2</returns>
        public ApiResponse< DemographicsV2 > GetDemographicsByAddressV2WithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetDemographicsByAddressV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByAddressV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DemographicsV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsV2)));
            
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of DemographicsV2</returns>
        public async System.Threading.Tasks.Task<DemographicsV2> GetDemographicsByAddressV2Async (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<DemographicsV2> localVarResponse = await GetDemographicsByAddressV2AsyncWithHttpInfo(address, country, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (DemographicsV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DemographicsV2>> GetDemographicsByAddressV2AsyncWithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetDemographicsByAddressV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByAddressV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DemographicsV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsV2)));
            
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>DemographicsV2</returns>
        public DemographicsV2 GetDemographicsByLocationV2 (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<DemographicsV2> localVarResponse = GetDemographicsByLocationV2WithHttpInfo(longitude, latitude, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of DemographicsV2</returns>
        public ApiResponse< DemographicsV2 > GetDemographicsByLocationV2WithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByLocationV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DemographicsV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsV2)));
            
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of DemographicsV2</returns>
        public async System.Threading.Tasks.Task<DemographicsV2> GetDemographicsByLocationV2Async (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<DemographicsV2> localVarResponse = await GetDemographicsByLocationV2AsyncWithHttpInfo(longitude, latitude, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (DemographicsV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DemographicsV2>> GetDemographicsByLocationV2AsyncWithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByLocationV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (DemographicsV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsV2)));
            
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Segmentation</returns>
        public Segmentation GetSegmentationByAddress (string address, string country = null)
        {
             ApiResponse<Segmentation> localVarResponse = GetSegmentationByAddressWithHttpInfo(address, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>ApiResponse of Segmentation</returns>
        public ApiResponse< Segmentation > GetSegmentationByAddressWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetSegmentationByAddress");

            var localVarPath = "/demographics-segmentation/v1/segmentation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of Segmentation</returns>
        public async System.Threading.Tasks.Task<Segmentation> GetSegmentationByAddressAsync (string address, string country = null)
        {
             ApiResponse<Segmentation> localVarResponse = await GetSegmentationByAddressAsyncWithHttpInfo(address, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByAddressAsyncWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetSegmentationByAddress");

            var localVarPath = "/demographics-segmentation/v1/segmentation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Segmentation</returns>
        public Segmentation GetSegmentationByLocation (string longitude, string latitude)
        {
             ApiResponse<Segmentation> localVarResponse = GetSegmentationByLocationWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>ApiResponse of Segmentation</returns>
        public ApiResponse< Segmentation > GetSegmentationByLocationWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetSegmentationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetSegmentationByLocation");

            var localVarPath = "/demographics-segmentation/v1/segmentation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of Segmentation</returns>
        public async System.Threading.Tasks.Task<Segmentation> GetSegmentationByLocationAsync (string longitude, string latitude)
        {
             ApiResponse<Segmentation> localVarResponse = await GetSegmentationByLocationAsyncWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByLocationAsyncWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetSegmentationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetSegmentationByLocation");

            var localVarPath = "/demographics-segmentation/v1/segmentation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

    }
}
