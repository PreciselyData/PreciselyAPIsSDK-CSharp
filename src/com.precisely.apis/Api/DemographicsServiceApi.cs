/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDemographicsServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Demographics Advanced Endpoint
        /// </summary>
        /// <remarks>
        /// Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Demographics</returns>
        Demographics GetDemographicsAdvanced (DemographicsAdvancedRequest body = null);

        /// <summary>
        /// Demographics Advanced Endpoint
        /// </summary>
        /// <remarks>
        /// Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        ApiResponse<Demographics> GetDemographicsAdvancedWithHttpInfo (DemographicsAdvancedRequest body = null);
        /// <summary>
        /// Demographics Basic
        /// </summary>
        /// <remarks>
        /// Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Demographics</returns>
        Demographics GetDemographicsBasic (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null);

        /// <summary>
        /// Demographics Basic
        /// </summary>
        /// <remarks>
        /// Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        ApiResponse<Demographics> GetDemographicsBasicWithHttpInfo (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null);
        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Demographics</returns>
        Demographics GetDemographicsByAddressV2 (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of Demographics</returns>
        ApiResponse<Demographics> GetDemographicsByAddressV2WithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Boundaryids.
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Demographics</returns>
        Demographics GetDemographicsByBoundaryIds (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Boundaryids.
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        ApiResponse<Demographics> GetDemographicsByBoundaryIdsWithHttpInfo (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Demographics</returns>
        Demographics GetDemographicsByLocationV2 (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of Demographics</returns>
        ApiResponse<Demographics> GetDemographicsByLocationV2WithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Segmentation</returns>
        Segmentation GetSegmentationByAddress (string address, string country = null);

        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>ApiResponse of Segmentation</returns>
        ApiResponse<Segmentation> GetSegmentationByAddressWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Segmentation</returns>
        Segmentation GetSegmentationByLocation (string longitude, string latitude);

        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>ApiResponse of Segmentation</returns>
        ApiResponse<Segmentation> GetSegmentationByLocationWithHttpInfo (string longitude, string latitude);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Demographics Advanced Endpoint
        /// </summary>
        /// <remarks>
        /// Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Demographics</returns>
        System.Threading.Tasks.Task<Demographics> GetDemographicsAdvancedAsync (DemographicsAdvancedRequest body = null);

        /// <summary>
        /// Demographics Advanced Endpoint
        /// </summary>
        /// <remarks>
        /// Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsAdvancedAsyncWithHttpInfo (DemographicsAdvancedRequest body = null);
        /// <summary>
        /// Demographics Basic
        /// </summary>
        /// <remarks>
        /// Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Task of Demographics</returns>
        System.Threading.Tasks.Task<Demographics> GetDemographicsBasicAsync (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null);

        /// <summary>
        /// Demographics Basic
        /// </summary>
        /// <remarks>
        /// Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsBasicAsyncWithHttpInfo (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null);
        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of Demographics</returns>
        System.Threading.Tasks.Task<Demographics> GetDemographicsByAddressV2Async (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Address.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByAddressV2AsyncWithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Boundaryids.
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Task of Demographics</returns>
        System.Threading.Tasks.Task<Demographics> GetDemographicsByBoundaryIdsAsync (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Boundaryids.
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByBoundaryIdsAsyncWithHttpInfo (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of Demographics</returns>
        System.Threading.Tasks.Task<Demographics> GetDemographicsByLocationV2Async (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);

        /// <summary>
        /// Demographics By Location.
        /// </summary>
        /// <remarks>
        /// Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByLocationV2AsyncWithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null);
        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of Segmentation</returns>
        System.Threading.Tasks.Task<Segmentation> GetSegmentationByAddressAsync (string address, string country = null);

        /// <summary>
        /// Segmentation By Address.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByAddressAsyncWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of Segmentation</returns>
        System.Threading.Tasks.Task<Segmentation> GetSegmentationByLocationAsync (string longitude, string latitude);

        /// <summary>
        /// Segmentation By Location.
        /// </summary>
        /// <remarks>
        /// Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByLocationAsyncWithHttpInfo (string longitude, string latitude);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DemographicsServiceApi : IDemographicsServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DemographicsServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Demographics Advanced Endpoint Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Demographics</returns>
        public Demographics GetDemographicsAdvanced (DemographicsAdvancedRequest body = null)
        {
             ApiResponse<Demographics> localVarResponse = GetDemographicsAdvancedWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics Advanced Endpoint Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        public ApiResponse< Demographics > GetDemographicsAdvancedWithHttpInfo (DemographicsAdvancedRequest body = null)
        {

            var localVarPath = "/demographics-segmentation/v1/advanced/demographics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics Advanced Endpoint Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Demographics</returns>
        public async System.Threading.Tasks.Task<Demographics> GetDemographicsAdvancedAsync (DemographicsAdvancedRequest body = null)
        {
             ApiResponse<Demographics> localVarResponse = await GetDemographicsAdvancedAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics Advanced Endpoint Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsAdvancedAsyncWithHttpInfo (DemographicsAdvancedRequest body = null)
        {

            var localVarPath = "/demographics-segmentation/v1/advanced/demographics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics Basic Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Demographics</returns>
        public Demographics GetDemographicsBasic (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null)
        {
             ApiResponse<Demographics> localVarResponse = GetDemographicsBasicWithHttpInfo(address, longitude, latitude, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, profile, filter, includeGeometry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics Basic Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        public ApiResponse< Demographics > GetDemographicsBasicWithHttpInfo (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null)
        {

            var localVarPath = "/demographics-segmentation/v1/basic/demographics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsBasic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics Basic Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Task of Demographics</returns>
        public async System.Threading.Tasks.Task<Demographics> GetDemographicsBasicAsync (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null)
        {
             ApiResponse<Demographics> localVarResponse = await GetDemographicsBasicAsyncWithHttpInfo(address, longitude, latitude, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, profile, filter, includeGeometry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics Basic Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address to be searched (optional)</param>
        /// <param name="longitude">Longitude of the location (optional)</param>
        /// <param name="latitude">Latitude of the location (optional)</param>
        /// <param name="searchRadius">Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters  (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)</param>
        /// <param name="travelTimeUnit">minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)</param>
        /// <param name="travelDistanceUnit">feet,kilometers,miles,meters.  Default is feet. (optional)</param>
        /// <param name="travelMode">Default is driving. (optional)</param>
        /// <param name="country">3 digit ISO country code (Used in case address is mentioned). (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">If Y, demographic boundaries are returned in response. (optional)</param>
        /// <param name="includeGeometry"> (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsBasicAsyncWithHttpInfo (string address = null, string longitude = null, string latitude = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string profile = null, string filter = null, string includeGeometry = null)
        {

            var localVarPath = "/demographics-segmentation/v1/basic/demographics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (includeGeometry != null) localVarQueryParams.Add("includeGeometry", Configuration.ApiClient.ParameterToString(includeGeometry)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsBasic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Demographics</returns>
        public Demographics GetDemographicsByAddressV2 (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = GetDemographicsByAddressV2WithHttpInfo(address, country, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of Demographics</returns>
        public ApiResponse< Demographics > GetDemographicsByAddressV2WithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetDemographicsByAddressV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByAddressV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of Demographics</returns>
        public async System.Threading.Tasks.Task<Demographics> GetDemographicsByAddressV2Async (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = await GetDemographicsByAddressV2AsyncWithHttpInfo(address, country, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics By Address. Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByAddressV2AsyncWithHttpInfo (string address, string country = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetDemographicsByAddressV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByAddressV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Boundaryids. This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Demographics</returns>
        public Demographics GetDemographicsByBoundaryIds (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = GetDemographicsByBoundaryIdsWithHttpInfo(boundaryIds, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics By Boundaryids. This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>ApiResponse of Demographics</returns>
        public ApiResponse< Demographics > GetDemographicsByBoundaryIdsWithHttpInfo (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {

            var localVarPath = "/demographics-segmentation/v1/demographics/byboundaryids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (boundaryIds != null) localVarQueryParams.Add("boundaryIds", Configuration.ApiClient.ParameterToString(boundaryIds)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByBoundaryIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Boundaryids. This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Task of Demographics</returns>
        public async System.Threading.Tasks.Task<Demographics> GetDemographicsByBoundaryIdsAsync (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = await GetDemographicsByBoundaryIdsAsyncWithHttpInfo(boundaryIds, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics By Boundaryids. This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundaryIds">Accepts comma separated multiple boundary ids. (optional)</param>
        /// <param name="profile">Applicable on ranged variables. Returns top sorted result based on the input value. (optional)</param>
        /// <param name="filter">Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)</param>
        /// <param name="valueFormat">Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)</param>
        /// <param name="variableLevel">Retrieves demographic facts in response based on the input value. (optional)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByBoundaryIdsAsyncWithHttpInfo (string boundaryIds = null, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {

            var localVarPath = "/demographics-segmentation/v1/demographics/byboundaryids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (boundaryIds != null) localVarQueryParams.Add("boundaryIds", Configuration.ApiClient.ParameterToString(boundaryIds)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByBoundaryIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Demographics</returns>
        public Demographics GetDemographicsByLocationV2 (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = GetDemographicsByLocationV2WithHttpInfo(longitude, latitude, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>ApiResponse of Demographics</returns>
        public ApiResponse< Demographics > GetDemographicsByLocationV2WithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByLocationV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of Demographics</returns>
        public async System.Threading.Tasks.Task<Demographics> GetDemographicsByLocationV2Async (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
             ApiResponse<Demographics> localVarResponse = await GetDemographicsByLocationV2AsyncWithHttpInfo(longitude, latitude, profile, filter, valueFormat, variableLevel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demographics By Location. Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="profile">Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)</param>
        /// <param name="filter">The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)</param>
        /// <param name="valueFormat">The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)</param>
        /// <param name="variableLevel">The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)</param>
        /// <returns>Task of ApiResponse (Demographics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Demographics>> GetDemographicsByLocationV2AsyncWithHttpInfo (string longitude, string latitude, string profile = null, string filter = null, string valueFormat = null, string variableLevel = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetDemographicsByLocationV2");

            var localVarPath = "/demographics-segmentation/v1/demographics/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (profile != null) localVarQueryParams.Add("profile", Configuration.ApiClient.ParameterToString(profile)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (valueFormat != null) localVarQueryParams.Add("valueFormat", Configuration.ApiClient.ParameterToString(valueFormat)); // query parameter
            if (variableLevel != null) localVarQueryParams.Add("variableLevel", Configuration.ApiClient.ParameterToString(variableLevel)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDemographicsByLocationV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Demographics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Demographics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Demographics)));
            
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Segmentation</returns>
        public Segmentation GetSegmentationByAddress (string address, string country = null)
        {
             ApiResponse<Segmentation> localVarResponse = GetSegmentationByAddressWithHttpInfo(address, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>ApiResponse of Segmentation</returns>
        public ApiResponse< Segmentation > GetSegmentationByAddressWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetSegmentationByAddress");

            var localVarPath = "/demographics-segmentation/v1/segmentation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of Segmentation</returns>
        public async System.Threading.Tasks.Task<Segmentation> GetSegmentationByAddressAsync (string address, string country = null)
        {
             ApiResponse<Segmentation> localVarResponse = await GetSegmentationByAddressAsyncWithHttpInfo(address, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Segmentation By Address. Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="country">3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByAddressAsyncWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DemographicsServiceApi->GetSegmentationByAddress");

            var localVarPath = "/demographics-segmentation/v1/segmentation/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Segmentation</returns>
        public Segmentation GetSegmentationByLocation (string longitude, string latitude)
        {
             ApiResponse<Segmentation> localVarResponse = GetSegmentationByLocationWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>ApiResponse of Segmentation</returns>
        public ApiResponse< Segmentation > GetSegmentationByLocationWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetSegmentationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetSegmentationByLocation");

            var localVarPath = "/demographics-segmentation/v1/segmentation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of Segmentation</returns>
        public async System.Threading.Tasks.Task<Segmentation> GetSegmentationByLocationAsync (string longitude, string latitude)
        {
             ApiResponse<Segmentation> localVarResponse = await GetSegmentationByLocationAsyncWithHttpInfo(longitude, latitude);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Segmentation By Location. Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <returns>Task of ApiResponse (Segmentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Segmentation>> GetSegmentationByLocationAsyncWithHttpInfo (string longitude, string latitude)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DemographicsServiceApi->GetSegmentationByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DemographicsServiceApi->GetSegmentationByLocation");

            var localVarPath = "/demographics-segmentation/v1/segmentation/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegmentationByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Segmentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Segmentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Segmentation)));
            
        }

    }
}
