/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeocodeServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Forward Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>GeocodeServiceResponse</returns>
        GeocodeServiceResponse Geocode (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null);

        /// <summary>
        /// Get Forward Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        ApiResponse<GeocodeServiceResponse> GeocodeWithHttpInfo (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null);
        /// <summary>
        /// Post Forward Geocode
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>GeocodeServiceResponseList</returns>
        GeocodeServiceResponseList GeocodeBatch (GeocodeRequest body, string datapackBundle);

        /// <summary>
        /// Post Forward Geocode
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        ApiResponse<GeocodeServiceResponseList> GeocodeBatchWithHttpInfo (GeocodeRequest body, string datapackBundle);
        /// <summary>
        /// Get Capabilities
        /// </summary>
        /// <remarks>
        /// Get Capabilities  of Geocode API
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>GeocodeCapabilitiesResponse</returns>
        GeocodeCapabilitiesResponse GetCapabilities (string datapackBundle, string operation = null, string country = null);

        /// <summary>
        /// Get Capabilities
        /// </summary>
        /// <remarks>
        /// Get Capabilities  of Geocode API
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>ApiResponse of GeocodeCapabilitiesResponse</returns>
        ApiResponse<GeocodeCapabilitiesResponse> GetCapabilitiesWithHttpInfo (string datapackBundle, string operation = null, string country = null);
        /// <summary>
        /// Get installed Dictionaries
        /// </summary>
        /// <remarks>
        /// Get installed Dictionaries
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>ConfiguredDictionaryResponse</returns>
        ConfiguredDictionaryResponse GetDictionaries (string datapackBundle, string country = null);

        /// <summary>
        /// Get installed Dictionaries
        /// </summary>
        /// <remarks>
        /// Get installed Dictionaries
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>ApiResponse of ConfiguredDictionaryResponse</returns>
        ApiResponse<ConfiguredDictionaryResponse> GetDictionariesWithHttpInfo (string datapackBundle, string country = null);
        /// <summary>
        /// Get PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>PBKeyResponse</returns>
        PBKeyResponse GetPreciselyID (string address, string country = null);

        /// <summary>
        /// Get PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>ApiResponse of PBKeyResponse</returns>
        ApiResponse<PBKeyResponse> GetPreciselyIDWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Post PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PBKeyResponseList</returns>
        PBKeyResponseList GetPreciselyIDs (PBKeyAddressRequest body);

        /// <summary>
        /// Post PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PBKeyResponseList</returns>
        ApiResponse<PBKeyResponseList> GetPreciselyIDsWithHttpInfo (PBKeyAddressRequest body);
        /// <summary>
        /// Get Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>GeocodeServiceResponse</returns>
        GeocodeServiceResponse KeyLookup (string key, string type = null, string country = null);

        /// <summary>
        /// Get Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        ApiResponse<GeocodeServiceResponse> KeyLookupWithHttpInfo (string key, string type = null, string country = null);
        /// <summary>
        /// Post Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeocodeServiceResponseList</returns>
        GeocodeServiceResponseList KeyLookupBatch (KeyLookupRequest body = null);

        /// <summary>
        /// Post Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        ApiResponse<GeocodeServiceResponseList> KeyLookupBatchWithHttpInfo (KeyLookupRequest body = null);
        /// <summary>
        /// Post Reverse Geocode
        /// </summary>
        /// <remarks>
        /// It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>GeocodeServiceResponseList</returns>
        GeocodeServiceResponseList ReverseGeocodBatch (string datapackBundle, ReverseGeocodeRequest body = null);

        /// <summary>
        /// Post Reverse Geocode
        /// </summary>
        /// <remarks>
        /// It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        ApiResponse<GeocodeServiceResponseList> ReverseGeocodBatchWithHttpInfo (string datapackBundle, ReverseGeocodeRequest body = null);
        /// <summary>
        /// Get Reverse Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts location coordinate and returns an address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>GeocodeServiceResponse</returns>
        GeocodeServiceResponse ReverseGeocode (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null);

        /// <summary>
        /// Get Reverse Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts location coordinate and returns an address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        ApiResponse<GeocodeServiceResponse> ReverseGeocodeWithHttpInfo (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Forward Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponse> GeocodeAsync (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null);

        /// <summary>
        /// Get Forward Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> GeocodeAsyncWithHttpInfo (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null);
        /// <summary>
        /// Post Forward Geocode
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponseList> GeocodeBatchAsync (GeocodeRequest body, string datapackBundle);

        /// <summary>
        /// Post Forward Geocode
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> GeocodeBatchAsyncWithHttpInfo (GeocodeRequest body, string datapackBundle);
        /// <summary>
        /// Get Capabilities
        /// </summary>
        /// <remarks>
        /// Get Capabilities  of Geocode API
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>Task of GeocodeCapabilitiesResponse</returns>
        System.Threading.Tasks.Task<GeocodeCapabilitiesResponse> GetCapabilitiesAsync (string datapackBundle, string operation = null, string country = null);

        /// <summary>
        /// Get Capabilities
        /// </summary>
        /// <remarks>
        /// Get Capabilities  of Geocode API
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>Task of ApiResponse (GeocodeCapabilitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeCapabilitiesResponse>> GetCapabilitiesAsyncWithHttpInfo (string datapackBundle, string operation = null, string country = null);
        /// <summary>
        /// Get installed Dictionaries
        /// </summary>
        /// <remarks>
        /// Get installed Dictionaries
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>Task of ConfiguredDictionaryResponse</returns>
        System.Threading.Tasks.Task<ConfiguredDictionaryResponse> GetDictionariesAsync (string datapackBundle, string country = null);

        /// <summary>
        /// Get installed Dictionaries
        /// </summary>
        /// <remarks>
        /// Get installed Dictionaries
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>Task of ApiResponse (ConfiguredDictionaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfiguredDictionaryResponse>> GetDictionariesAsyncWithHttpInfo (string datapackBundle, string country = null);
        /// <summary>
        /// Get PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>Task of PBKeyResponse</returns>
        System.Threading.Tasks.Task<PBKeyResponse> GetPreciselyIDAsync (string address, string country = null);

        /// <summary>
        /// Get PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This service accepts an address and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>Task of ApiResponse (PBKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PBKeyResponse>> GetPreciselyIDAsyncWithHttpInfo (string address, string country = null);
        /// <summary>
        /// Post PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PBKeyResponseList</returns>
        System.Threading.Tasks.Task<PBKeyResponseList> GetPreciselyIDsAsync (PBKeyAddressRequest body);

        /// <summary>
        /// Post PreciselyID By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PBKeyResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PBKeyResponseList>> GetPreciselyIDsAsyncWithHttpInfo (PBKeyAddressRequest body);
        /// <summary>
        /// Get Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponse> KeyLookupAsync (string key, string type = null, string country = null);

        /// <summary>
        /// Get Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> KeyLookupAsyncWithHttpInfo (string key, string type = null, string country = null);
        /// <summary>
        /// Post Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponseList> KeyLookupBatchAsync (KeyLookupRequest body = null);

        /// <summary>
        /// Post Key Lookup
        /// </summary>
        /// <remarks>
        /// This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> KeyLookupBatchAsyncWithHttpInfo (KeyLookupRequest body = null);
        /// <summary>
        /// Post Reverse Geocode
        /// </summary>
        /// <remarks>
        /// It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponseList> ReverseGeocodBatchAsync (string datapackBundle, ReverseGeocodeRequest body = null);

        /// <summary>
        /// Post Reverse Geocode
        /// </summary>
        /// <remarks>
        /// It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> ReverseGeocodBatchAsyncWithHttpInfo (string datapackBundle, ReverseGeocodeRequest body = null);
        /// <summary>
        /// Get Reverse Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts location coordinate and returns an address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        System.Threading.Tasks.Task<GeocodeServiceResponse> ReverseGeocodeAsync (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null);

        /// <summary>
        /// Get Reverse Geocode
        /// </summary>
        /// <remarks>
        /// This service accepts location coordinate and returns an address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> ReverseGeocodeAsyncWithHttpInfo (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeocodeServiceApi : IGeocodeServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodeServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeocodeServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodeServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeocodeServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Forward Geocode This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>GeocodeServiceResponse</returns>
        public GeocodeServiceResponse Geocode (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = GeocodeWithHttpInfo(datapackBundle, country, placeName, mainAddress, lastLine, areaName1, areaName2, areaName3, areaName4, postalCode, matchMode, fallbackGeo, fallbackPostal, maxCands, streetOffset, streetOffsetUnits, cornerOffset, cornerOffsetUnits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Forward Geocode This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        public ApiResponse< GeocodeServiceResponse > GeocodeWithHttpInfo (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->Geocode");

            var localVarPath = "/geocode/v1/{datapackBundle}/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (placeName != null) localVarQueryParams.Add("placeName", Configuration.ApiClient.ParameterToString(placeName)); // query parameter
            if (mainAddress != null) localVarQueryParams.Add("mainAddress", Configuration.ApiClient.ParameterToString(mainAddress)); // query parameter
            if (lastLine != null) localVarQueryParams.Add("lastLine", Configuration.ApiClient.ParameterToString(lastLine)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName2 != null) localVarQueryParams.Add("areaName2", Configuration.ApiClient.ParameterToString(areaName2)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (areaName4 != null) localVarQueryParams.Add("areaName4", Configuration.ApiClient.ParameterToString(areaName4)); // query parameter
            if (postalCode != null) localVarQueryParams.Add("postalCode", Configuration.ApiClient.ParameterToString(postalCode)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (fallbackGeo != null) localVarQueryParams.Add("fallbackGeo", Configuration.ApiClient.ParameterToString(fallbackGeo)); // query parameter
            if (fallbackPostal != null) localVarQueryParams.Add("fallbackPostal", Configuration.ApiClient.ParameterToString(fallbackPostal)); // query parameter
            if (maxCands != null) localVarQueryParams.Add("maxCands", Configuration.ApiClient.ParameterToString(maxCands)); // query parameter
            if (streetOffset != null) localVarQueryParams.Add("streetOffset", Configuration.ApiClient.ParameterToString(streetOffset)); // query parameter
            if (streetOffsetUnits != null) localVarQueryParams.Add("streetOffsetUnits", Configuration.ApiClient.ParameterToString(streetOffsetUnits)); // query parameter
            if (cornerOffset != null) localVarQueryParams.Add("cornerOffset", Configuration.ApiClient.ParameterToString(cornerOffset)); // query parameter
            if (cornerOffsetUnits != null) localVarQueryParams.Add("cornerOffsetUnits", Configuration.ApiClient.ParameterToString(cornerOffsetUnits)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Geocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

        /// <summary>
        /// Get Forward Geocode This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponse> GeocodeAsync (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = await GeocodeAsyncWithHttpInfo(datapackBundle, country, placeName, mainAddress, lastLine, areaName1, areaName2, areaName3, areaName4, postalCode, matchMode, fallbackGeo, fallbackPostal, maxCands, streetOffset, streetOffsetUnits, cornerOffset, cornerOffsetUnits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Forward Geocode This service accepts an address and returns the location coordinates corresponding to that address. Premium offers the best accuracy and is a high precision geocoder leveraging Master Location Data - geocodes to Street or building level.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <param name="placeName">Building name, place name, Point of Interest (POI), company or firm name associated with the input address. (optional)</param>
        /// <param name="mainAddress">Single line input, treated as collection of field elements. (optional, default to 4750 Walnut St., Boulder CO, 80301)</param>
        /// <param name="lastLine">The last line of the address. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName2">Specifies the secondary geographic area, typically a county or district. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="areaName4">Specifies a city subdivision or locality. (optional)</param>
        /// <param name="postalCode">The postal code in the appropriate format for the country. (optional)</param>
        /// <param name="matchMode">Match modes determine the leniency used to make a match between the input address and the reference data. (optional, default to Standard)</param>
        /// <param name="fallbackGeo">Specifies whether to attempt to determine a geographic region centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="fallbackPostal">Specifies whether to attempt to determine a post code centroid when an address-level geocode cannot be determined. (optional, default to true)</param>
        /// <param name="maxCands">The maximum number of candidates to return. (optional, default to 1)</param>
        /// <param name="streetOffset">Indicates the offset distance from the street segments to use in street-level geocoding. (optional, default to 7)</param>
        /// <param name="streetOffsetUnits">Specifies the unit of measurement for the street offset. (optional, default to METERS)</param>
        /// <param name="cornerOffset">Specifies the distance to offset the street end points in street-level matching. (optional, default to 7)</param>
        /// <param name="cornerOffsetUnits">Specifies the unit of measurement for the corner offset. (optional, default to METERS)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> GeocodeAsyncWithHttpInfo (string datapackBundle, string country = null, string placeName = null, string mainAddress = null, string lastLine = null, string areaName1 = null, string areaName2 = null, string areaName3 = null, string areaName4 = null, int? postalCode = null, string matchMode = null, bool? fallbackGeo = null, bool? fallbackPostal = null, int? maxCands = null, int? streetOffset = null, string streetOffsetUnits = null, int? cornerOffset = null, string cornerOffsetUnits = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->Geocode");

            var localVarPath = "/geocode/v1/{datapackBundle}/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (placeName != null) localVarQueryParams.Add("placeName", Configuration.ApiClient.ParameterToString(placeName)); // query parameter
            if (mainAddress != null) localVarQueryParams.Add("mainAddress", Configuration.ApiClient.ParameterToString(mainAddress)); // query parameter
            if (lastLine != null) localVarQueryParams.Add("lastLine", Configuration.ApiClient.ParameterToString(lastLine)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName2 != null) localVarQueryParams.Add("areaName2", Configuration.ApiClient.ParameterToString(areaName2)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (areaName4 != null) localVarQueryParams.Add("areaName4", Configuration.ApiClient.ParameterToString(areaName4)); // query parameter
            if (postalCode != null) localVarQueryParams.Add("postalCode", Configuration.ApiClient.ParameterToString(postalCode)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (fallbackGeo != null) localVarQueryParams.Add("fallbackGeo", Configuration.ApiClient.ParameterToString(fallbackGeo)); // query parameter
            if (fallbackPostal != null) localVarQueryParams.Add("fallbackPostal", Configuration.ApiClient.ParameterToString(fallbackPostal)); // query parameter
            if (maxCands != null) localVarQueryParams.Add("maxCands", Configuration.ApiClient.ParameterToString(maxCands)); // query parameter
            if (streetOffset != null) localVarQueryParams.Add("streetOffset", Configuration.ApiClient.ParameterToString(streetOffset)); // query parameter
            if (streetOffsetUnits != null) localVarQueryParams.Add("streetOffsetUnits", Configuration.ApiClient.ParameterToString(streetOffsetUnits)); // query parameter
            if (cornerOffset != null) localVarQueryParams.Add("cornerOffset", Configuration.ApiClient.ParameterToString(cornerOffset)); // query parameter
            if (cornerOffsetUnits != null) localVarQueryParams.Add("cornerOffsetUnits", Configuration.ApiClient.ParameterToString(cornerOffsetUnits)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Geocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

        /// <summary>
        /// Post Forward Geocode This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>GeocodeServiceResponseList</returns>
        public GeocodeServiceResponseList GeocodeBatch (GeocodeRequest body, string datapackBundle)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = GeocodeBatchWithHttpInfo(body, datapackBundle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Forward Geocode This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        public ApiResponse< GeocodeServiceResponseList > GeocodeBatchWithHttpInfo (GeocodeRequest body, string datapackBundle)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GeocodeServiceApi->GeocodeBatch");
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GeocodeBatch");

            var localVarPath = "/geocode/v1/{datapackBundle}/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Post Forward Geocode This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponseList> GeocodeBatchAsync (GeocodeRequest body, string datapackBundle)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = await GeocodeBatchAsyncWithHttpInfo(body, datapackBundle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Forward Geocode This is a Batch offering for geocode service. It accepts a single address or a list of addresses and returns location coordinates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Geocode Request Object</param>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> GeocodeBatchAsyncWithHttpInfo (GeocodeRequest body, string datapackBundle)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GeocodeServiceApi->GeocodeBatch");
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GeocodeBatch");

            var localVarPath = "/geocode/v1/{datapackBundle}/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeocodeBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Get Capabilities Get Capabilities  of Geocode API
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>GeocodeCapabilitiesResponse</returns>
        public GeocodeCapabilitiesResponse GetCapabilities (string datapackBundle, string operation = null, string country = null)
        {
             ApiResponse<GeocodeCapabilitiesResponse> localVarResponse = GetCapabilitiesWithHttpInfo(datapackBundle, operation, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Capabilities Get Capabilities  of Geocode API
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>ApiResponse of GeocodeCapabilitiesResponse</returns>
        public ApiResponse< GeocodeCapabilitiesResponse > GetCapabilitiesWithHttpInfo (string datapackBundle, string operation = null, string country = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GetCapabilities");

            var localVarPath = "/geocode/v1/{datapackBundle}/capabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (operation != null) localVarQueryParams.Add("operation", Configuration.ApiClient.ParameterToString(operation)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeCapabilitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeCapabilitiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeCapabilitiesResponse)));
            
        }

        /// <summary>
        /// Get Capabilities Get Capabilities  of Geocode API
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>Task of GeocodeCapabilitiesResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeCapabilitiesResponse> GetCapabilitiesAsync (string datapackBundle, string operation = null, string country = null)
        {
             ApiResponse<GeocodeCapabilitiesResponse> localVarResponse = await GetCapabilitiesAsyncWithHttpInfo(datapackBundle, operation, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Capabilities Get Capabilities  of Geocode API
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="operation">Geocode or ReverseGeocode Operation. (optional, default to geocode)</param>
        /// <param name="country">Country name or ISO code. (optional, default to USA)</param>
        /// <returns>Task of ApiResponse (GeocodeCapabilitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeCapabilitiesResponse>> GetCapabilitiesAsyncWithHttpInfo (string datapackBundle, string operation = null, string country = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GetCapabilities");

            var localVarPath = "/geocode/v1/{datapackBundle}/capabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (operation != null) localVarQueryParams.Add("operation", Configuration.ApiClient.ParameterToString(operation)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCapabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeCapabilitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeCapabilitiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeCapabilitiesResponse)));
            
        }

        /// <summary>
        /// Get installed Dictionaries Get installed Dictionaries
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>ConfiguredDictionaryResponse</returns>
        public ConfiguredDictionaryResponse GetDictionaries (string datapackBundle, string country = null)
        {
             ApiResponse<ConfiguredDictionaryResponse> localVarResponse = GetDictionariesWithHttpInfo(datapackBundle, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get installed Dictionaries Get installed Dictionaries
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>ApiResponse of ConfiguredDictionaryResponse</returns>
        public ApiResponse< ConfiguredDictionaryResponse > GetDictionariesWithHttpInfo (string datapackBundle, string country = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GetDictionaries");

            var localVarPath = "/geocode/v1/{datapackBundle}/dictionaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDictionaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfiguredDictionaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ConfiguredDictionaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfiguredDictionaryResponse)));
            
        }

        /// <summary>
        /// Get installed Dictionaries Get installed Dictionaries
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>Task of ConfiguredDictionaryResponse</returns>
        public async System.Threading.Tasks.Task<ConfiguredDictionaryResponse> GetDictionariesAsync (string datapackBundle, string country = null)
        {
             ApiResponse<ConfiguredDictionaryResponse> localVarResponse = await GetDictionariesAsyncWithHttpInfo(datapackBundle, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get installed Dictionaries Get installed Dictionaries
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="country">Three Letter ISO Country code (optional, default to USA)</param>
        /// <returns>Task of ApiResponse (ConfiguredDictionaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfiguredDictionaryResponse>> GetDictionariesAsyncWithHttpInfo (string datapackBundle, string country = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->GetDictionaries");

            var localVarPath = "/geocode/v1/{datapackBundle}/dictionaries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDictionaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfiguredDictionaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ConfiguredDictionaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfiguredDictionaryResponse)));
            
        }

        /// <summary>
        /// Get PreciselyID By Address This service accepts an address and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>PBKeyResponse</returns>
        public PBKeyResponse GetPreciselyID (string address, string country = null)
        {
             ApiResponse<PBKeyResponse> localVarResponse = GetPreciselyIDWithHttpInfo(address, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PreciselyID By Address This service accepts an address and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>ApiResponse of PBKeyResponse</returns>
        public ApiResponse< PBKeyResponse > GetPreciselyIDWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling GeocodeServiceApi->GetPreciselyID");

            var localVarPath = "/geocode/v1/key/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreciselyID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PBKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PBKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PBKeyResponse)));
            
        }

        /// <summary>
        /// Get PreciselyID By Address This service accepts an address and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>Task of PBKeyResponse</returns>
        public async System.Threading.Tasks.Task<PBKeyResponse> GetPreciselyIDAsync (string address, string country = null)
        {
             ApiResponse<PBKeyResponse> localVarResponse = await GetPreciselyIDAsyncWithHttpInfo(address, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PreciselyID By Address This service accepts an address and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <returns>Task of ApiResponse (PBKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PBKeyResponse>> GetPreciselyIDAsyncWithHttpInfo (string address, string country = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling GeocodeServiceApi->GetPreciselyID");

            var localVarPath = "/geocode/v1/key/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreciselyID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PBKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PBKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PBKeyResponse)));
            
        }

        /// <summary>
        /// Post PreciselyID By Address This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PBKeyResponseList</returns>
        public PBKeyResponseList GetPreciselyIDs (PBKeyAddressRequest body)
        {
             ApiResponse<PBKeyResponseList> localVarResponse = GetPreciselyIDsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post PreciselyID By Address This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PBKeyResponseList</returns>
        public ApiResponse< PBKeyResponseList > GetPreciselyIDsWithHttpInfo (PBKeyAddressRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GeocodeServiceApi->GetPreciselyIDs");

            var localVarPath = "/geocode/v1/key/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreciselyIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PBKeyResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PBKeyResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PBKeyResponseList)));
            
        }

        /// <summary>
        /// Post PreciselyID By Address This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PBKeyResponseList</returns>
        public async System.Threading.Tasks.Task<PBKeyResponseList> GetPreciselyIDsAsync (PBKeyAddressRequest body)
        {
             ApiResponse<PBKeyResponseList> localVarResponse = await GetPreciselyIDsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post PreciselyID By Address This is a Batch offering for &#39;PreciselyID By Address&#39; service. It accepts a single address or a list of addresses and returns the corresponding PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PBKeyResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PBKeyResponseList>> GetPreciselyIDsAsyncWithHttpInfo (PBKeyAddressRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GeocodeServiceApi->GetPreciselyIDs");

            var localVarPath = "/geocode/v1/key/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreciselyIDs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PBKeyResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PBKeyResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PBKeyResponseList)));
            
        }

        /// <summary>
        /// Get Key Lookup This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>GeocodeServiceResponse</returns>
        public GeocodeServiceResponse KeyLookup (string key, string type = null, string country = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = KeyLookupWithHttpInfo(key, type, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key Lookup This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        public ApiResponse< GeocodeServiceResponse > KeyLookupWithHttpInfo (string key, string type = null, string country = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling GeocodeServiceApi->KeyLookup");

            var localVarPath = "/geocode/v1/keylookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeyLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

        /// <summary>
        /// Get Key Lookup This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponse> KeyLookupAsync (string key, string type = null, string country = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = await KeyLookupAsyncWithHttpInfo(key, type, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Key Lookup This service accepts a PreciselyID and returns the corresponding address associated with that PreciselyID.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">free form text</param>
        /// <param name="type"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> KeyLookupAsyncWithHttpInfo (string key, string type = null, string country = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling GeocodeServiceApi->KeyLookup");

            var localVarPath = "/geocode/v1/keylookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeyLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

        /// <summary>
        /// Post Key Lookup This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GeocodeServiceResponseList</returns>
        public GeocodeServiceResponseList KeyLookupBatch (KeyLookupRequest body = null)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = KeyLookupBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Key Lookup This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        public ApiResponse< GeocodeServiceResponseList > KeyLookupBatchWithHttpInfo (KeyLookupRequest body = null)
        {

            var localVarPath = "/geocode/v1/keylookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeyLookupBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Post Key Lookup This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponseList> KeyLookupBatchAsync (KeyLookupRequest body = null)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = await KeyLookupBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Key Lookup This service accepts batches of PreciselyID&#39;s and returns the corresponding address associated with those PreciselyID&#39;s.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> KeyLookupBatchAsyncWithHttpInfo (KeyLookupRequest body = null)
        {

            var localVarPath = "/geocode/v1/keylookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeyLookupBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Post Reverse Geocode It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>GeocodeServiceResponseList</returns>
        public GeocodeServiceResponseList ReverseGeocodBatch (string datapackBundle, ReverseGeocodeRequest body = null)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = ReverseGeocodBatchWithHttpInfo(datapackBundle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Reverse Geocode It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>ApiResponse of GeocodeServiceResponseList</returns>
        public ApiResponse< GeocodeServiceResponseList > ReverseGeocodBatchWithHttpInfo (string datapackBundle, ReverseGeocodeRequest body = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->ReverseGeocodBatch");

            var localVarPath = "/geocode/v1/{datapackBundle}/reverseGeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReverseGeocodBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Post Reverse Geocode It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>Task of GeocodeServiceResponseList</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponseList> ReverseGeocodBatchAsync (string datapackBundle, ReverseGeocodeRequest body = null)
        {
             ApiResponse<GeocodeServiceResponseList> localVarResponse = await ReverseGeocodBatchAsyncWithHttpInfo(datapackBundle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Reverse Geocode It accepts a single location coordinate or a list of location coordinates and returns addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="body">Request for Reverse Geocode (optional)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponseList>> ReverseGeocodBatchAsyncWithHttpInfo (string datapackBundle, ReverseGeocodeRequest body = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->ReverseGeocodBatch");

            var localVarPath = "/geocode/v1/{datapackBundle}/reverseGeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReverseGeocodBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponseList)));
            
        }

        /// <summary>
        /// Get Reverse Geocode This service accepts location coordinate and returns an address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>GeocodeServiceResponse</returns>
        public GeocodeServiceResponse ReverseGeocode (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = ReverseGeocodeWithHttpInfo(datapackBundle, x, y, country, coordSysName, distance, distanceUnits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reverse Geocode This service accepts location coordinate and returns an address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>ApiResponse of GeocodeServiceResponse</returns>
        public ApiResponse< GeocodeServiceResponse > ReverseGeocodeWithHttpInfo (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->ReverseGeocode");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling GeocodeServiceApi->ReverseGeocode");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling GeocodeServiceApi->ReverseGeocode");

            var localVarPath = "/geocode/v1/{datapackBundle}/reverseGeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (x != null) localVarQueryParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // query parameter
            if (y != null) localVarQueryParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (coordSysName != null) localVarQueryParams.Add("coordSysName", Configuration.ApiClient.ParameterToString(coordSysName)); // query parameter
            if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
            if (distanceUnits != null) localVarQueryParams.Add("distanceUnits", Configuration.ApiClient.ParameterToString(distanceUnits)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReverseGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

        /// <summary>
        /// Get Reverse Geocode This service accepts location coordinate and returns an address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>Task of GeocodeServiceResponse</returns>
        public async System.Threading.Tasks.Task<GeocodeServiceResponse> ReverseGeocodeAsync (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null)
        {
             ApiResponse<GeocodeServiceResponse> localVarResponse = await ReverseGeocodeAsyncWithHttpInfo(datapackBundle, x, y, country, coordSysName, distance, distanceUnits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Reverse Geocode This service accepts location coordinate and returns an address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datapackBundle">value of datapackBundle</param>
        /// <param name="x">Longitude of the location.</param>
        /// <param name="y">Latitude of the location.</param>
        /// <param name="country">Country name or ISO code. (optional)</param>
        /// <param name="coordSysName">Coordinate system to convert geometry to in format codespace:code. (optional, default to EPSG:4326)</param>
        /// <param name="distance">Radius in which search is performed. (optional, default to 150)</param>
        /// <param name="distanceUnits">Unit of measurement. (optional, default to METERS)</param>
        /// <returns>Task of ApiResponse (GeocodeServiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeocodeServiceResponse>> ReverseGeocodeAsyncWithHttpInfo (string datapackBundle, decimal? x, decimal? y, string country = null, string coordSysName = null, int? distance = null, string distanceUnits = null)
        {
            // verify the required parameter 'datapackBundle' is set
            if (datapackBundle == null)
                throw new ApiException(400, "Missing required parameter 'datapackBundle' when calling GeocodeServiceApi->ReverseGeocode");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling GeocodeServiceApi->ReverseGeocode");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling GeocodeServiceApi->ReverseGeocode");

            var localVarPath = "/geocode/v1/{datapackBundle}/reverseGeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datapackBundle != null) localVarPathParams.Add("datapackBundle", Configuration.ApiClient.ParameterToString(datapackBundle)); // path parameter
            if (x != null) localVarQueryParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // query parameter
            if (y != null) localVarQueryParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (coordSysName != null) localVarQueryParams.Add("coordSysName", Configuration.ApiClient.ParameterToString(coordSysName)); // query parameter
            if (distance != null) localVarQueryParams.Add("distance", Configuration.ApiClient.ParameterToString(distance)); // query parameter
            if (distanceUnits != null) localVarQueryParams.Add("distanceUnits", Configuration.ApiClient.ParameterToString(distanceUnits)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReverseGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeocodeServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeocodeServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeocodeServiceResponse)));
            
        }

    }
}
