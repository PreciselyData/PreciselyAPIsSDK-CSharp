/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalTaxServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxByAddress (string taxRateTypeId, TaxAddressRequest taxAddressRequest);

        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxByAddressWithHttpInfo (string taxRateTypeId, TaxAddressRequest taxAddressRequest);
        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxByLocation (string taxRateTypeId, TaxLocationRequest taxLocationRequest);

        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxByLocationWithHttpInfo (string taxRateTypeId, TaxLocationRequest taxLocationRequest);
        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxRateByAddress (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest);

        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxRateByAddressWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest);
        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <returns>TaxResponses</returns>
        TaxResponses GetBatchTaxRateByLocation (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest);

        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        ApiResponse<TaxResponses> GetBatchTaxRateByLocationWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest);
        /// <summary>
        /// Get IPD Tax by Address
        /// </summary>
        /// <remarks>
        /// Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <returns>TaxDistrictResponse</returns>
        TaxDistrictResponse GetIPDTaxByAddress (string address, string returnLatLongFields = default(string), string latLongFormat = default(string));

        /// <summary>
        /// Get IPD Tax by Address
        /// </summary>
        /// <remarks>
        /// Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <returns>ApiResponse of TaxDistrictResponse</returns>
        ApiResponse<TaxDistrictResponse> GetIPDTaxByAddressWithHttpInfo (string address, string returnLatLongFields = default(string), string latLongFormat = default(string));
        /// <summary>
        /// Get IPD Tax for batch requests.
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <returns>TaxDistrictResponseList</returns>
        TaxDistrictResponseList GetIPDTaxByAddressBatch (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest);

        /// <summary>
        /// Get IPD Tax for batch requests.
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <returns>ApiResponse of TaxDistrictResponseList</returns>
        ApiResponse<TaxDistrictResponseList> GetIPDTaxByAddressBatchWithHttpInfo (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest);
        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>TaxRateResponse</returns>
        TaxRateResponse GetSpecificTaxByAddress (string taxRateTypeId, string address, string purchaseAmount);

        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        ApiResponse<TaxRateResponse> GetSpecificTaxByAddressWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount);
        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>TaxRateResponse</returns>
        TaxRateResponse GetSpecificTaxByLocation (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);

        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        ApiResponse<TaxRateResponse> GetSpecificTaxByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount);
        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>TaxRateResponse</returns>
        TaxRateResponse GetSpecificTaxRateByAddress (string taxRateTypeId, string address);

        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        ApiResponse<TaxRateResponse> GetSpecificTaxRateByAddressWithHttpInfo (string taxRateTypeId, string address);
        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <returns>TaxRateResponse</returns>
        TaxRateResponse GetSpecificTaxRateByLocation (string taxRateTypeId, string latitude, string longitude);

        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        ApiResponse<TaxRateResponse> GetSpecificTaxRateByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByAddressAsync (string taxRateTypeId, TaxAddressRequest taxAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Tax By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByAddressWithHttpInfoAsync (string taxRateTypeId, TaxAddressRequest taxAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByLocationAsync (string taxRateTypeId, TaxLocationRequest taxLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Tax By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByLocationWithHttpInfoAsync (string taxRateTypeId, TaxLocationRequest taxLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByAddressAsync (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Taxrate By Address
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByAddressWithHttpInfoAsync (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByLocationAsync (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post Taxrate By Location
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByLocationWithHttpInfoAsync (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IPD Tax by Address
        /// </summary>
        /// <remarks>
        /// Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxDistrictResponse</returns>
        System.Threading.Tasks.Task<TaxDistrictResponse> GetIPDTaxByAddressAsync (string address, string returnLatLongFields = default(string), string latLongFormat = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IPD Tax by Address
        /// </summary>
        /// <remarks>
        /// Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxDistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxDistrictResponse>> GetIPDTaxByAddressWithHttpInfoAsync (string address, string returnLatLongFields = default(string), string latLongFormat = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get IPD Tax for batch requests.
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxDistrictResponseList</returns>
        System.Threading.Tasks.Task<TaxDistrictResponseList> GetIPDTaxByAddressBatchAsync (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get IPD Tax for batch requests.
        /// </summary>
        /// <remarks>
        /// This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxDistrictResponseList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxDistrictResponseList>> GetIPDTaxByAddressBatchWithHttpInfoAsync (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxByAddressAsync (string taxRateTypeId, string address, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Tax By Address
        /// </summary>
        /// <remarks>
        /// This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxByAddressWithHttpInfoAsync (string taxRateTypeId, string address, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxByLocationAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Tax By Location
        /// </summary>
        /// <remarks>
        /// This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxByLocationWithHttpInfoAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxRateByAddressAsync (string taxRateTypeId, string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Taxrate By Address
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxRateByAddressWithHttpInfoAsync (string taxRateTypeId, string address, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxRateByLocationAsync (string taxRateTypeId, string latitude, string longitude, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Taxrate By Location
        /// </summary>
        /// <remarks>
        /// Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxRateByLocationWithHttpInfoAsync (string taxRateTypeId, string latitude, string longitude, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocalTaxServiceApi : ILocalTaxServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalTaxServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalTaxServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalTaxServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public LocalTaxServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalTaxServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocalTaxServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxByAddress (string taxRateTypeId, TaxAddressRequest taxAddressRequest)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxByAddressWithHttpInfo(taxRateTypeId, taxAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse<TaxResponses> GetBatchTaxByAddressWithHttpInfo (string taxRateTypeId, TaxAddressRequest taxAddressRequest)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxByAddress");
            // verify the required parameter 'taxAddressRequest' is set
            if (taxAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxAddressRequest' when calling LocalTaxServiceApi->GetBatchTaxByAddress");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxAddressRequest != null && taxAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
            
        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByAddressAsync (string taxRateTypeId, TaxAddressRequest taxAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxByAddressWithHttpInfoAsync(taxRateTypeId, taxAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Tax By Address This is a Batch offering for &#39;Tax By Address&#39; service. It accepts a single address, purchase amount or a list of addresses, purchase amounts and retrieve applicable taxes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByAddressWithHttpInfoAsync (string taxRateTypeId, TaxAddressRequest taxAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxByAddress");
            // verify the required parameter 'taxAddressRequest' is set
            if (taxAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxAddressRequest' when calling LocalTaxServiceApi->GetBatchTaxByAddress");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxAddressRequest != null && taxAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxByLocation (string taxRateTypeId, TaxLocationRequest taxLocationRequest)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxByLocationWithHttpInfo(taxRateTypeId, taxLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse<TaxResponses> GetBatchTaxByLocationWithHttpInfo (string taxRateTypeId, TaxLocationRequest taxLocationRequest)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxByLocation");
            // verify the required parameter 'taxLocationRequest' is set
            if (taxLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxLocationRequest' when calling LocalTaxServiceApi->GetBatchTaxByLocation");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxLocationRequest != null && taxLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
            
        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxByLocationAsync (string taxRateTypeId, TaxLocationRequest taxLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxByLocationWithHttpInfoAsync(taxRateTypeId, taxLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Tax By Location This is a Batch offering for &#39;Tax By Location&#39; service. It accepts a single location coordinate, purchase amount or a list of location coordinates, purchase amounts and retrieve applicable tax.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxByLocationWithHttpInfoAsync (string taxRateTypeId, TaxLocationRequest taxLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxByLocation");
            // verify the required parameter 'taxLocationRequest' is set
            if (taxLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxLocationRequest' when calling LocalTaxServiceApi->GetBatchTaxByLocation");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxLocationRequest != null && taxLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxRateByAddress (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxRateByAddressWithHttpInfo(taxRateTypeId, taxRateAddressRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse<TaxResponses> GetBatchTaxRateByAddressWithHttpInfo (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxRateByAddress");
            // verify the required parameter 'taxRateAddressRequest' is set
            if (taxRateAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxRateAddressRequest' when calling LocalTaxServiceApi->GetBatchTaxRateByAddress");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxRateAddressRequest != null && taxRateAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxRateAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxRateAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
            
        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByAddressAsync (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxRateByAddressWithHttpInfoAsync(taxRateTypeId, taxRateAddressRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Taxrate By Address This is a Batch offering for &#39;Taxrate By Address&#39; service. It accepts a single address or a list of addresses and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByAddressWithHttpInfoAsync (string taxRateTypeId, TaxRateAddressRequest taxRateAddressRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxRateByAddress");
            // verify the required parameter 'taxRateAddressRequest' is set
            if (taxRateAddressRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxRateAddressRequest' when calling LocalTaxServiceApi->GetBatchTaxRateByAddress");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxRateAddressRequest != null && taxRateAddressRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxRateAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxRateAddressRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <returns>TaxResponses</returns>
        public TaxResponses GetBatchTaxRateByLocation (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest)
        {
             ApiResponse<TaxResponses> localVarResponse = GetBatchTaxRateByLocationWithHttpInfo(taxRateTypeId, taxRateLocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <returns>ApiResponse of TaxResponses</returns>
        public ApiResponse<TaxResponses> GetBatchTaxRateByLocationWithHttpInfo (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxRateByLocation");
            // verify the required parameter 'taxRateLocationRequest' is set
            if (taxRateLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxRateLocationRequest' when calling LocalTaxServiceApi->GetBatchTaxRateByLocation");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxRateLocationRequest != null && taxRateLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxRateLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxRateLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
            
        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxResponses</returns>
        public async System.Threading.Tasks.Task<TaxResponses> GetBatchTaxRateByLocationAsync (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxResponses> localVarResponse = await GetBatchTaxRateByLocationWithHttpInfoAsync(taxRateTypeId, taxRateLocationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post Taxrate By Location This is a Batch offering for &#39;Taxrate By Location&#39; service. It accepts a single location coordinate or a list of location coordinates and retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId"></param>
        /// <param name="taxRateLocationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxResponses>> GetBatchTaxRateByLocationWithHttpInfoAsync (string taxRateTypeId, TaxRateLocationRequest taxRateLocationRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetBatchTaxRateByLocation");
            // verify the required parameter 'taxRateLocationRequest' is set
            if (taxRateLocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'taxRateLocationRequest' when calling LocalTaxServiceApi->GetBatchTaxRateByLocation");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (taxRateLocationRequest != null && taxRateLocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taxRateLocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxRateLocationRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxResponses)));
            
        }

        /// <summary>
        /// Get IPD Tax by Address Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <returns>TaxDistrictResponse</returns>
        public TaxDistrictResponse GetIPDTaxByAddress (string address, string returnLatLongFields = default(string), string latLongFormat = default(string))
        {
             ApiResponse<TaxDistrictResponse> localVarResponse = GetIPDTaxByAddressWithHttpInfo(address, returnLatLongFields, latLongFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IPD Tax by Address Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <returns>ApiResponse of TaxDistrictResponse</returns>
        public ApiResponse<TaxDistrictResponse> GetIPDTaxByAddressWithHttpInfo (string address, string returnLatLongFields = default(string), string latLongFormat = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetIPDTaxByAddress");

            var localVarPath = "/localtax/v1/taxdistrict/ipd/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (returnLatLongFields != null) localVarQueryParams.Add("returnLatLongFields", Configuration.ApiClient.ParameterToString(returnLatLongFields)); // query parameter
            if (latLongFormat != null) localVarQueryParams.Add("latLongFormat", Configuration.ApiClient.ParameterToString(latLongFormat)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPDTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxDistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxDistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxDistrictResponse)));
            
            
        }

        /// <summary>
        /// Get IPD Tax by Address Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxDistrictResponse</returns>
        public async System.Threading.Tasks.Task<TaxDistrictResponse> GetIPDTaxByAddressAsync (string address, string returnLatLongFields = default(string), string latLongFormat = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxDistrictResponse> localVarResponse = await GetIPDTaxByAddressWithHttpInfoAsync(address, returnLatLongFields, latLongFormat, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IPD Tax by Address Retrieves IPD (Insurance Premium District) tax rates applicable to a specific address. This service accepts address as input and returns one or many IPD tax rate details for that region in which address falls.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched.</param>
        /// <param name="returnLatLongFields">Y or N (default is N) - Returns Latitude Longitude Fields. (optional)</param>
        /// <param name="latLongFormat">(default is Decimal) - Returns Desired Latitude Longitude Format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxDistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxDistrictResponse>> GetIPDTaxByAddressWithHttpInfoAsync (string address, string returnLatLongFields = default(string), string latLongFormat = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetIPDTaxByAddress");

            var localVarPath = "/localtax/v1/taxdistrict/ipd/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (returnLatLongFields != null) localVarQueryParams.Add("returnLatLongFields", Configuration.ApiClient.ParameterToString(returnLatLongFields)); // query parameter
           if (latLongFormat != null) localVarQueryParams.Add("latLongFormat", Configuration.ApiClient.ParameterToString(latLongFormat)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPDTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxDistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxDistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxDistrictResponse)));
            
        }

        /// <summary>
        /// Get IPD Tax for batch requests. This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <returns>TaxDistrictResponseList</returns>
        public TaxDistrictResponseList GetIPDTaxByAddressBatch (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest)
        {
             ApiResponse<TaxDistrictResponseList> localVarResponse = GetIPDTaxByAddressBatchWithHttpInfo(iPDTaxByAddressBatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get IPD Tax for batch requests. This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <returns>ApiResponse of TaxDistrictResponseList</returns>
        public ApiResponse<TaxDistrictResponseList> GetIPDTaxByAddressBatchWithHttpInfo (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest)
        {
            // verify the required parameter 'iPDTaxByAddressBatchRequest' is set
            if (iPDTaxByAddressBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'iPDTaxByAddressBatchRequest' when calling LocalTaxServiceApi->GetIPDTaxByAddressBatch");

            var localVarPath = "/localtax/v1/taxdistrict/ipd/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iPDTaxByAddressBatchRequest != null && iPDTaxByAddressBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iPDTaxByAddressBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iPDTaxByAddressBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPDTaxByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxDistrictResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxDistrictResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxDistrictResponseList)));
            
            
        }

        /// <summary>
        /// Get IPD Tax for batch requests. This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxDistrictResponseList</returns>
        public async System.Threading.Tasks.Task<TaxDistrictResponseList> GetIPDTaxByAddressBatchAsync (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxDistrictResponseList> localVarResponse = await GetIPDTaxByAddressBatchWithHttpInfoAsync(iPDTaxByAddressBatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get IPD Tax for batch requests. This is a Batch offering for &#39;IPD Tax rates By Address&#39;. It accepts multiple addresses as parameters along with geocoding and matching preferences and returns one or many IPD tax rate details for each address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iPDTaxByAddressBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxDistrictResponseList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxDistrictResponseList>> GetIPDTaxByAddressBatchWithHttpInfoAsync (IPDTaxByAddressBatchRequest iPDTaxByAddressBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'iPDTaxByAddressBatchRequest' is set
            if (iPDTaxByAddressBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'iPDTaxByAddressBatchRequest' when calling LocalTaxServiceApi->GetIPDTaxByAddressBatch");

            var localVarPath = "/localtax/v1/taxdistrict/ipd/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (iPDTaxByAddressBatchRequest != null && iPDTaxByAddressBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(iPDTaxByAddressBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = iPDTaxByAddressBatchRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPDTaxByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxDistrictResponseList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxDistrictResponseList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxDistrictResponseList)));
            
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>TaxRateResponse</returns>
        public TaxRateResponse GetSpecificTaxByAddress (string taxRateTypeId, string address, string purchaseAmount)
        {
             ApiResponse<TaxRateResponse> localVarResponse = GetSpecificTaxByAddressWithHttpInfo(taxRateTypeId, address, purchaseAmount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        public ApiResponse<TaxRateResponse> GetSpecificTaxByAddressWithHttpInfo (string taxRateTypeId, string address, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
            
        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        public async System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxByAddressAsync (string taxRateTypeId, string address, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxRateResponse> localVarResponse = await GetSpecificTaxByAddressWithHttpInfoAsync(taxRateTypeId, address, purchaseAmount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tax By Address This service calculates and returns taxes applicable at a specific address. Address, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxByAddressWithHttpInfoAsync (string taxRateTypeId, string address, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LocalTaxServiceApi->GetSpecificTaxByAddress");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>TaxRateResponse</returns>
        public TaxRateResponse GetSpecificTaxByLocation (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
             ApiResponse<TaxRateResponse> localVarResponse = GetSpecificTaxByLocationWithHttpInfo(taxRateTypeId, latitude, longitude, purchaseAmount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        public ApiResponse<TaxRateResponse> GetSpecificTaxByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude, string purchaseAmount)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
            
        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        public async System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxByLocationAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxRateResponse> localVarResponse = await GetSpecificTaxByLocationWithHttpInfoAsync(taxRateTypeId, latitude, longitude, purchaseAmount, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tax By Location This service calculates and returns tax applicable at a specific location. Longitude, latitude, purchase amount and supported tax rate type are inputs to the service.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="purchaseAmount">The amount on which tax to be calculated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxByLocationWithHttpInfoAsync (string taxRateTypeId, string latitude, string longitude, string purchaseAmount, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");
            // verify the required parameter 'purchaseAmount' is set
            if (purchaseAmount == null)
                throw new ApiException(400, "Missing required parameter 'purchaseAmount' when calling LocalTaxServiceApi->GetSpecificTaxByLocation");

            var localVarPath = "/localtax/v1/tax/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (purchaseAmount != null) localVarQueryParams.Add("purchaseAmount", Configuration.ApiClient.ParameterToString(purchaseAmount)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>TaxRateResponse</returns>
        public TaxRateResponse GetSpecificTaxRateByAddress (string taxRateTypeId, string address)
        {
             ApiResponse<TaxRateResponse> localVarResponse = GetSpecificTaxRateByAddressWithHttpInfo(taxRateTypeId, address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        public ApiResponse<TaxRateResponse> GetSpecificTaxRateByAddressWithHttpInfo (string taxRateTypeId, string address)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxRateByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetSpecificTaxRateByAddress");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
            
        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        public async System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxRateByAddressAsync (string taxRateTypeId, string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxRateResponse> localVarResponse = await GetSpecificTaxRateByAddressWithHttpInfoAsync(taxRateTypeId, address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Taxrate By Address Retrieves tax rates applicable to a specific address. This service accepts address and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="address">The address to be searched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxRateByAddressWithHttpInfoAsync (string taxRateTypeId, string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxRateByAddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocalTaxServiceApi->GetSpecificTaxRateByAddress");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <returns>TaxRateResponse</returns>
        public TaxRateResponse GetSpecificTaxRateByLocation (string taxRateTypeId, string latitude, string longitude)
        {
             ApiResponse<TaxRateResponse> localVarResponse = GetSpecificTaxRateByLocationWithHttpInfo(taxRateTypeId, latitude, longitude);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <returns>ApiResponse of TaxRateResponse</returns>
        public ApiResponse<TaxRateResponse> GetSpecificTaxRateByLocationWithHttpInfo (string taxRateTypeId, string latitude, string longitude)
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
            
        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaxRateResponse</returns>
        public async System.Threading.Tasks.Task<TaxRateResponse> GetSpecificTaxRateByLocationAsync (string taxRateTypeId, string latitude, string longitude, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaxRateResponse> localVarResponse = await GetSpecificTaxRateByLocationWithHttpInfoAsync(taxRateTypeId, latitude, longitude, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Taxrate By Location Retrieves tax rates applicable to a specific location. This service accepts longitude, latitude and supported tax rate type as inputs to retrieve applicable tax rates.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateTypeId">The tax rate id</param>
        /// <param name="latitude">Latitude of the location</param>
        /// <param name="longitude">Longitude of the location</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaxRateResponse>> GetSpecificTaxRateByLocationWithHttpInfoAsync (string taxRateTypeId, string latitude, string longitude, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'taxRateTypeId' is set
            if (taxRateTypeId == null)
                throw new ApiException(400, "Missing required parameter 'taxRateTypeId' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling LocalTaxServiceApi->GetSpecificTaxRateByLocation");

            var localVarPath = "/localtax/v1/taxrate/{taxRateTypeId}/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxRateTypeId != null) localVarPathParams.Add("taxRateTypeId", this.Configuration.ApiClient.ParameterToString(taxRateTypeId)); // path parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificTaxRateByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TaxRateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TaxRateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaxRateResponse)));
            
        }

    }
}