/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 16.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneVerificationServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Phone verification.
        /// </summary>
        /// <remarks>
        /// This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <returns>PhoneVerification</returns>
        PhoneVerification Validatephonenumber (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest);

        /// <summary>
        /// Phone verification.
        /// </summary>
        /// <remarks>
        /// This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <returns>ApiResponse of PhoneVerification</returns>
        ApiResponse<PhoneVerification> ValidatephonenumberWithHttpInfo (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Phone verification.
        /// </summary>
        /// <remarks>
        /// This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PhoneVerification</returns>
        System.Threading.Tasks.Task<PhoneVerification> ValidatephonenumberAsync (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Phone verification.
        /// </summary>
        /// <remarks>
        /// This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PhoneVerification)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneVerification>> ValidatephonenumberWithHttpInfoAsync (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneVerificationServiceApi : IPhoneVerificationServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneVerificationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneVerificationServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneVerificationServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public PhoneVerificationServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneVerificationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneVerificationServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Phone verification. This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <returns>PhoneVerification</returns>
        public PhoneVerification Validatephonenumber (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest)
        {
             ApiResponse<PhoneVerification> localVarResponse = ValidatephonenumberWithHttpInfo(validatePhoneNumberAPIRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Phone verification. This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <returns>ApiResponse of PhoneVerification</returns>
        public ApiResponse<PhoneVerification> ValidatephonenumberWithHttpInfo (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest)
        {
            // verify the required parameter 'validatePhoneNumberAPIRequest' is set
            if (validatePhoneNumberAPIRequest == null)
                throw new ApiException(400, "Missing required parameter 'validatePhoneNumberAPIRequest' when calling PhoneVerificationServiceApi->Validatephonenumber");

            var localVarPath = "/phoneverification/v2/validatephonenumber/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validatePhoneNumberAPIRequest != null && validatePhoneNumberAPIRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validatePhoneNumberAPIRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validatePhoneNumberAPIRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Validatephonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PhoneVerification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PhoneVerification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneVerification)));
            
            
        }

        /// <summary>
        /// Phone verification. This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PhoneVerification</returns>
        public async System.Threading.Tasks.Task<PhoneVerification> ValidatephonenumberAsync (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PhoneVerification> localVarResponse = await ValidatephonenumberWithHttpInfoAsync(validatePhoneNumberAPIRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Phone verification. This service accepts a phone number as input and returns details distinguishing landline and wireless numbers.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberAPIRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PhoneVerification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneVerification>> ValidatephonenumberWithHttpInfoAsync (ValidatePhoneNumberAPIRequest validatePhoneNumberAPIRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'validatePhoneNumberAPIRequest' is set
            if (validatePhoneNumberAPIRequest == null)
                throw new ApiException(400, "Missing required parameter 'validatePhoneNumberAPIRequest' when calling PhoneVerificationServiceApi->Validatephonenumber");

            var localVarPath = "/phoneverification/v2/validatephonenumber/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validatePhoneNumberAPIRequest != null && validatePhoneNumberAPIRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validatePhoneNumberAPIRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validatePhoneNumberAPIRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Validatephonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PhoneVerification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PhoneVerification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneVerification)));
            
        }

    }
}