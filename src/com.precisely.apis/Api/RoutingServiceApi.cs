/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutingServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets Route By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>RouteResponse</returns>
        RouteResponse GetRouteByAddress (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));

        /// <summary>
        /// Gets Route By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        ApiResponse<RouteResponse> GetRouteByAddressWithHttpInfo (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));
        /// <summary>
        /// Gets Route By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>RouteResponse</returns>
        RouteResponse GetRouteByLocation (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));

        /// <summary>
        /// Gets Route By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        ApiResponse<RouteResponse> GetRouteByLocationWithHttpInfo (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));
        /// <summary>
        /// Get Cost Matrix By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        TravelCostMatrixResponse GetTravelCostMatrixByAddress (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));

        /// <summary>
        /// Get Cost Matrix By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByAddressWithHttpInfo (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));
        /// <summary>
        /// Get Cost Matrix By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        TravelCostMatrixResponse GetTravelCostMatrixByLocation (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));

        /// <summary>
        /// Get Cost Matrix By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByLocationWithHttpInfo (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets Route By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RouteResponse</returns>
        System.Threading.Tasks.Task<RouteResponse> GetRouteByAddressAsync (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Route By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteResponse>> GetRouteByAddressWithHttpInfoAsync (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Route By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RouteResponse</returns>
        System.Threading.Tasks.Task<RouteResponse> GetRouteByLocationAsync (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Route By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteResponse>> GetRouteByLocationWithHttpInfoAsync (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Cost Matrix By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByAddressAsync (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cost Matrix By Address.
        /// </summary>
        /// <remarks>
        /// Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByAddressWithHttpInfoAsync (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Cost Matrix By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByLocationAsync (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cost Matrix By Location.
        /// </summary>
        /// <remarks>
        /// Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByLocationWithHttpInfoAsync (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoutingServiceApi : IRoutingServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutingServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public RoutingServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoutingServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets Route By Address. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>RouteResponse</returns>
        public RouteResponse GetRouteByAddress (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {
             ApiResponse<RouteResponse> localVarResponse = GetRouteByAddressWithHttpInfo(startAddress, endAddress, db, country, intermediateAddresses, returnIntermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Route By Address. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        public ApiResponse<RouteResponse> GetRouteByAddressWithHttpInfo (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {

            var localVarPath = "/routing/v1/route/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startAddress != null) localVarQueryParams.Add("startAddress", Configuration.ApiClient.ParameterToString(startAddress)); // query parameter
            if (endAddress != null) localVarQueryParams.Add("endAddress", Configuration.ApiClient.ParameterToString(endAddress)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (intermediateAddresses != null) localVarQueryParams.Add("intermediateAddresses", Configuration.ApiClient.ParameterToString(intermediateAddresses)); // query parameter
            if (returnIntermediatePoints != null) localVarQueryParams.Add("returnIntermediatePoints", Configuration.ApiClient.ParameterToString(returnIntermediatePoints)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter
            if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
            if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
            if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
            if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
            if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
            
            
        }

        /// <summary>
        /// Gets Route By Address. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RouteResponse</returns>
        public async System.Threading.Tasks.Task<RouteResponse> GetRouteByAddressAsync (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RouteResponse> localVarResponse = await GetRouteByAddressWithHttpInfoAsync(startAddress, endAddress, db, country, intermediateAddresses, returnIntermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Route By Address. Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddress">Starting address of the route. (optional)</param>
        /// <param name="endAddress">Ending address of the route. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Three digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="intermediateAddresses">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">return intermediate points (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RouteResponse>> GetRouteByAddressWithHttpInfoAsync (string startAddress = default(string), string endAddress = default(string), string db = default(string), string country = default(string), string intermediateAddresses = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/routing/v1/route/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (startAddress != null) localVarQueryParams.Add("startAddress", Configuration.ApiClient.ParameterToString(startAddress)); // query parameter
           if (endAddress != null) localVarQueryParams.Add("endAddress", Configuration.ApiClient.ParameterToString(endAddress)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (intermediateAddresses != null) localVarQueryParams.Add("intermediateAddresses", Configuration.ApiClient.ParameterToString(intermediateAddresses)); // query parameter
           if (returnIntermediatePoints != null) localVarQueryParams.Add("returnIntermediatePoints", Configuration.ApiClient.ParameterToString(returnIntermediatePoints)); // query parameter
           if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
           if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
           if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
           if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
           if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
           if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
           if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter
           if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
           if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
           if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
           if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
           if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
           if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
           if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
           if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
           if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
           if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
           if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
            
        }

        /// <summary>
        /// Gets Route By Location. Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>RouteResponse</returns>
        public RouteResponse GetRouteByLocation (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {
             ApiResponse<RouteResponse> localVarResponse = GetRouteByLocationWithHttpInfo(startPoint, endPoint, db, intermediatePoints, returnIntermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Route By Location. Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        public ApiResponse<RouteResponse> GetRouteByLocationWithHttpInfo (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {

            var localVarPath = "/routing/v1/route/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startPoint != null) localVarQueryParams.Add("startPoint", Configuration.ApiClient.ParameterToString(startPoint)); // query parameter
            if (endPoint != null) localVarQueryParams.Add("endPoint", Configuration.ApiClient.ParameterToString(endPoint)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (intermediatePoints != null) localVarQueryParams.Add("intermediatePoints", Configuration.ApiClient.ParameterToString(intermediatePoints)); // query parameter
            if (returnIntermediatePoints != null) localVarQueryParams.Add("returnIntermediatePoints", Configuration.ApiClient.ParameterToString(returnIntermediatePoints)); // query parameter
            if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
            if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
            if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter
            if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
            if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
            if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
            if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
            if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
            
            
        }

        /// <summary>
        /// Gets Route By Location. Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RouteResponse</returns>
        public async System.Threading.Tasks.Task<RouteResponse> GetRouteByLocationAsync (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RouteResponse> localVarResponse = await GetRouteByLocationWithHttpInfoAsync(startPoint, endPoint, db, intermediatePoints, returnIntermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Route By Location. Accepts latitude &amp; longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoint">Start Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="endPoint">End Point in &#39;Lat,Long,coordsys&#39; format. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="intermediatePoints">List of intermediate points of the route. (optional)</param>
        /// <param name="returnIntermediatePoints">returnIntermediatePoints route. (optional, default to &quot;false&quot;)</param>
        /// <param name="oip">Specifies whether waypoints need to be optimized. (optional, default to &quot;false&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of the returned route. (optional)</param>
        /// <param name="optimizeBy">Specifies whether the route should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be part of direction information in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond) (optional, default to &quot;min&quot;)</param>
        /// <param name="language">Specifies the language of travel directions. (optional)</param>
        /// <param name="directionsStyle">Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse). (optional, default to &quot;None&quot;)</param>
        /// <param name="segmentGeometryStyle">Specifies whether the route geometry is to be returned in the response and in what detail (End or All). (optional, default to &quot;none&quot;)</param>
        /// <param name="primaryNameOnly">If true then only the primary street name is returned otherwise all the names for a street. (optional, default to &quot;false&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in route calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="returnDirectionGeometry">Whether to include geometry associated with each route instruction in response. (optional, default to &quot;false&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RouteResponse>> GetRouteByLocationWithHttpInfoAsync (string startPoint = default(string), string endPoint = default(string), string db = default(string), string intermediatePoints = default(string), string returnIntermediatePoints = default(string), string oip = default(string), string destinationSrs = default(string), string optimizeBy = default(string), string returnDistance = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string language = default(string), string directionsStyle = default(string), string segmentGeometryStyle = default(string), string primaryNameOnly = default(string), string majorRoads = default(string), string historicTrafficTimeBucket = default(string), string returnDirectionGeometry = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/routing/v1/route/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (startPoint != null) localVarQueryParams.Add("startPoint", Configuration.ApiClient.ParameterToString(startPoint)); // query parameter
           if (endPoint != null) localVarQueryParams.Add("endPoint", Configuration.ApiClient.ParameterToString(endPoint)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (intermediatePoints != null) localVarQueryParams.Add("intermediatePoints", Configuration.ApiClient.ParameterToString(intermediatePoints)); // query parameter
           if (returnIntermediatePoints != null) localVarQueryParams.Add("returnIntermediatePoints", Configuration.ApiClient.ParameterToString(returnIntermediatePoints)); // query parameter
           if (oip != null) localVarQueryParams.Add("oip", Configuration.ApiClient.ParameterToString(oip)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
           if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
           if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
           if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
           if (directionsStyle != null) localVarQueryParams.Add("directionsStyle", Configuration.ApiClient.ParameterToString(directionsStyle)); // query parameter
           if (segmentGeometryStyle != null) localVarQueryParams.Add("segmentGeometryStyle", Configuration.ApiClient.ParameterToString(segmentGeometryStyle)); // query parameter
           if (primaryNameOnly != null) localVarQueryParams.Add("primaryNameOnly", Configuration.ApiClient.ParameterToString(primaryNameOnly)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (returnDirectionGeometry != null) localVarQueryParams.Add("returnDirectionGeometry", Configuration.ApiClient.ParameterToString(returnDirectionGeometry)); // query parameter
           if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
           if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
           if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
           if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
           if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
           if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
           if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
           if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
           if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
           if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
           if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
            
        }

        /// <summary>
        /// Get Cost Matrix By Address. Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        public TravelCostMatrixResponse GetTravelCostMatrixByAddress (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = GetTravelCostMatrixByAddressWithHttpInfo(startAddresses, endAddresses, country, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cost Matrix By Address. Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        public ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByAddressWithHttpInfo (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {

            var localVarPath = "/routing/v1/travelcostmatrix/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startAddresses != null) localVarQueryParams.Add("startAddresses", Configuration.ApiClient.ParameterToString(startAddresses)); // query parameter
            if (endAddresses != null) localVarQueryParams.Add("endAddresses", Configuration.ApiClient.ParameterToString(endAddresses)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
            if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
            if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
            if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
            if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
            
        }

        /// <summary>
        /// Get Cost Matrix By Address. Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        public async System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByAddressAsync (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = await GetTravelCostMatrixByAddressWithHttpInfoAsync(startAddresses, endAddresses, country, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cost Matrix By Address. Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAddresses">Start locations in text based addresses. (optional)</param>
        /// <param name="endAddresses">End locations in text based addresses. (optional)</param>
        /// <param name="country">3 Digit ISO country code. (optional, default to &quot;USA&quot;)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByAddressWithHttpInfoAsync (string startAddresses = default(string), string endAddresses = default(string), string country = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/routing/v1/travelcostmatrix/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (startAddresses != null) localVarQueryParams.Add("startAddresses", Configuration.ApiClient.ParameterToString(startAddresses)); // query parameter
           if (endAddresses != null) localVarQueryParams.Add("endAddresses", Configuration.ApiClient.ParameterToString(endAddresses)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
           if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
           if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
           if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
           if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
           if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
           if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
           if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
           if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
           if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
           if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
           if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
           if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

        /// <summary>
        /// Get Cost Matrix By Location. Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>TravelCostMatrixResponse</returns>
        public TravelCostMatrixResponse GetTravelCostMatrixByLocation (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = GetTravelCostMatrixByLocationWithHttpInfo(startPoints, endPoints, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cost Matrix By Location. Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <returns>ApiResponse of TravelCostMatrixResponse</returns>
        public ApiResponse<TravelCostMatrixResponse> GetTravelCostMatrixByLocationWithHttpInfo (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string))
        {

            var localVarPath = "/routing/v1/travelcostmatrix/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startPoints != null) localVarQueryParams.Add("startPoints", Configuration.ApiClient.ParameterToString(startPoints)); // query parameter
            if (endPoints != null) localVarQueryParams.Add("endPoints", Configuration.ApiClient.ParameterToString(endPoints)); // query parameter
            if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
            if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
            if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
            if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
            if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
            if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
            if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
            if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
            if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
            if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
            if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
            if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
            if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
            if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
            if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
            if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
            if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
            if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
            if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
            
        }

        /// <summary>
        /// Get Cost Matrix By Location. Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TravelCostMatrixResponse</returns>
        public async System.Threading.Tasks.Task<TravelCostMatrixResponse> GetTravelCostMatrixByLocationAsync (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TravelCostMatrixResponse> localVarResponse = await GetTravelCostMatrixByLocationWithHttpInfoAsync(startPoints, endPoints, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cost Matrix By Location. Accepts latitude &amp; longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startPoints">The address to be searched. (optional)</param>
        /// <param name="endPoints">The address to be searched. (optional)</param>
        /// <param name="db">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="optimizeBy">Specifies whether routes should be optimized by time or distance. (optional, default to &quot;time&quot;)</param>
        /// <param name="returnDistance">Specifies whether distance needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="destinationSrs">Specifies the desired coordinate system of returned routes. (optional, default to &quot;epsg:4326&quot;)</param>
        /// <param name="distanceUnit">Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard). (optional, default to &quot;m&quot;)</param>
        /// <param name="returnTime">Specifies whether time needs to be returned in response. (optional, default to &quot;true&quot;)</param>
        /// <param name="timeUnit">Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond). (optional, default to &quot;min&quot;)</param>
        /// <param name="majorRoads">Whether to include all roads in routes calculation or just major roads. (optional, default to &quot;false&quot;)</param>
        /// <param name="returnOptimalRoutesOnly">Specifies whether to return only the optimized route for each start and end point combination. (optional, default to &quot;true&quot;)</param>
        /// <param name="historicTrafficTimeBucket">Specifies whether routing calculation uses the historic traffic speeds. (optional, default to &quot;None&quot;)</param>
        /// <param name="useCvr">This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs. (optional, default to &quot;N&quot;)</param>
        /// <param name="looseningBarrierRestrictions">Specifies that barriers will be removed when determining the route. (optional, default to &quot;Y&quot;)</param>
        /// <param name="vehicleType">vehicle type. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="weight">Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="weightUnit">The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton). (optional, default to &quot;kg&quot;)</param>
        /// <param name="height">Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="heightUnit">The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="length">Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="lengthUnit">The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="width">Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route. (optional, default to &quot;&quot;)</param>
        /// <param name="widthUnit">The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile). (optional, default to &quot;ft&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TravelCostMatrixResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TravelCostMatrixResponse>> GetTravelCostMatrixByLocationWithHttpInfoAsync (string startPoints = default(string), string endPoints = default(string), string db = default(string), string optimizeBy = default(string), string returnDistance = default(string), string destinationSrs = default(string), string distanceUnit = default(string), string returnTime = default(string), string timeUnit = default(string), string majorRoads = default(string), string returnOptimalRoutesOnly = default(string), string historicTrafficTimeBucket = default(string), string useCvr = default(string), string looseningBarrierRestrictions = default(string), string vehicleType = default(string), string weight = default(string), string weightUnit = default(string), string height = default(string), string heightUnit = default(string), string length = default(string), string lengthUnit = default(string), string width = default(string), string widthUnit = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/routing/v1/travelcostmatrix/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (startPoints != null) localVarQueryParams.Add("startPoints", Configuration.ApiClient.ParameterToString(startPoints)); // query parameter
           if (endPoints != null) localVarQueryParams.Add("endPoints", Configuration.ApiClient.ParameterToString(endPoints)); // query parameter
           if (db != null) localVarQueryParams.Add("db", Configuration.ApiClient.ParameterToString(db)); // query parameter
           if (optimizeBy != null) localVarQueryParams.Add("optimizeBy", Configuration.ApiClient.ParameterToString(optimizeBy)); // query parameter
           if (returnDistance != null) localVarQueryParams.Add("returnDistance", Configuration.ApiClient.ParameterToString(returnDistance)); // query parameter
           if (destinationSrs != null) localVarQueryParams.Add("destinationSrs", Configuration.ApiClient.ParameterToString(destinationSrs)); // query parameter
           if (distanceUnit != null) localVarQueryParams.Add("distanceUnit", Configuration.ApiClient.ParameterToString(distanceUnit)); // query parameter
           if (returnTime != null) localVarQueryParams.Add("returnTime", Configuration.ApiClient.ParameterToString(returnTime)); // query parameter
           if (timeUnit != null) localVarQueryParams.Add("timeUnit", Configuration.ApiClient.ParameterToString(timeUnit)); // query parameter
           if (majorRoads != null) localVarQueryParams.Add("majorRoads", Configuration.ApiClient.ParameterToString(majorRoads)); // query parameter
           if (returnOptimalRoutesOnly != null) localVarQueryParams.Add("returnOptimalRoutesOnly", Configuration.ApiClient.ParameterToString(returnOptimalRoutesOnly)); // query parameter
           if (historicTrafficTimeBucket != null) localVarQueryParams.Add("historicTrafficTimeBucket", Configuration.ApiClient.ParameterToString(historicTrafficTimeBucket)); // query parameter
           if (useCvr != null) localVarQueryParams.Add("useCvr", Configuration.ApiClient.ParameterToString(useCvr)); // query parameter
           if (looseningBarrierRestrictions != null) localVarQueryParams.Add("looseningBarrierRestrictions", Configuration.ApiClient.ParameterToString(looseningBarrierRestrictions)); // query parameter
           if (vehicleType != null) localVarQueryParams.Add("vehicleType", Configuration.ApiClient.ParameterToString(vehicleType)); // query parameter
           if (weight != null) localVarQueryParams.Add("weight", Configuration.ApiClient.ParameterToString(weight)); // query parameter
           if (weightUnit != null) localVarQueryParams.Add("weightUnit", Configuration.ApiClient.ParameterToString(weightUnit)); // query parameter
           if (height != null) localVarQueryParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // query parameter
           if (heightUnit != null) localVarQueryParams.Add("heightUnit", Configuration.ApiClient.ParameterToString(heightUnit)); // query parameter
           if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
           if (lengthUnit != null) localVarQueryParams.Add("lengthUnit", Configuration.ApiClient.ParameterToString(lengthUnit)); // query parameter
           if (width != null) localVarQueryParams.Add("width", Configuration.ApiClient.ParameterToString(width)); // query parameter
           if (widthUnit != null) localVarQueryParams.Add("widthUnit", Configuration.ApiClient.ParameterToString(widthUnit)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTravelCostMatrixByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TravelCostMatrixResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TravelCostMatrixResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TravelCostMatrixResponse)));
            
        }

    }
}