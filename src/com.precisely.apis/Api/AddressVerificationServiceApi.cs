/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressVerificationServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetCityStateProvince
        /// </summary>
        /// <remarks>
        /// GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>GetCityStateProvinceAPIResponse</returns>
        GetCityStateProvinceAPIResponse GetCityStateProvince (GetCityStateProvinceAPIRequest inputAddress);

        /// <summary>
        /// GetCityStateProvince
        /// </summary>
        /// <remarks>
        /// GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of GetCityStateProvinceAPIResponse</returns>
        ApiResponse<GetCityStateProvinceAPIResponse> GetCityStateProvinceWithHttpInfo (GetCityStateProvinceAPIRequest inputAddress);
        /// <summary>
        /// GetPostalCodes
        /// </summary>
        /// <remarks>
        /// GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>GetPostalCodesAPIResponse</returns>
        GetPostalCodesAPIResponse GetPostalCodes (GetPostalCodesAPIRequest inputAddress);

        /// <summary>
        /// GetPostalCodes
        /// </summary>
        /// <remarks>
        /// GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of GetPostalCodesAPIResponse</returns>
        ApiResponse<GetPostalCodesAPIResponse> GetPostalCodesWithHttpInfo (GetPostalCodesAPIRequest inputAddress);
        /// <summary>
        /// ValidateMailingAddress
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressResponse</returns>
        ValidateMailingAddressResponse ValidateMailingAddress (ValidateMailingAddressRequest inputAddress);

        /// <summary>
        /// ValidateMailingAddress
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressResponse</returns>
        ApiResponse<ValidateMailingAddressResponse> ValidateMailingAddressWithHttpInfo (ValidateMailingAddressRequest inputAddress);
        /// <summary>
        /// ValidateMailingAddressPremium
        /// </summary>
        /// <remarks>
        /// ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressPremiumResponse</returns>
        ValidateMailingAddressPremiumResponse ValidateMailingAddressPremium (ValidateMailingAddressPremiumRequest inputAddress);

        /// <summary>
        /// ValidateMailingAddressPremium
        /// </summary>
        /// <remarks>
        /// ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressPremiumResponse</returns>
        ApiResponse<ValidateMailingAddressPremiumResponse> ValidateMailingAddressPremiumWithHttpInfo (ValidateMailingAddressPremiumRequest inputAddress);
        /// <summary>
        /// ValidateMailingAddressPro
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressProResponse</returns>
        ValidateMailingAddressProResponse ValidateMailingAddressPro (ValidateMailingAddressProRequest inputAddress);

        /// <summary>
        /// ValidateMailingAddressPro
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressProResponse</returns>
        ApiResponse<ValidateMailingAddressProResponse> ValidateMailingAddressProWithHttpInfo (ValidateMailingAddressProRequest inputAddress);
        /// <summary>
        /// ValidateMailingAddressUSCAN
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressUSCANAPIResponse</returns>
        ValidateMailingAddressUSCANAPIResponse ValidateMailingAddressUSCAN (ValidateMailingAddressUSCANAPIRequest inputAddress);

        /// <summary>
        /// ValidateMailingAddressUSCAN
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressUSCANAPIResponse</returns>
        ApiResponse<ValidateMailingAddressUSCANAPIResponse> ValidateMailingAddressUSCANWithHttpInfo (ValidateMailingAddressUSCANAPIRequest inputAddress);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// GetCityStateProvince
        /// </summary>
        /// <remarks>
        /// GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCityStateProvinceAPIResponse</returns>
        System.Threading.Tasks.Task<GetCityStateProvinceAPIResponse> GetCityStateProvinceAsync (GetCityStateProvinceAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetCityStateProvince
        /// </summary>
        /// <remarks>
        /// GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCityStateProvinceAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCityStateProvinceAPIResponse>> GetCityStateProvinceWithHttpInfoAsync (GetCityStateProvinceAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetPostalCodes
        /// </summary>
        /// <remarks>
        /// GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPostalCodesAPIResponse</returns>
        System.Threading.Tasks.Task<GetPostalCodesAPIResponse> GetPostalCodesAsync (GetPostalCodesAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GetPostalCodes
        /// </summary>
        /// <remarks>
        /// GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPostalCodesAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPostalCodesAPIResponse>> GetPostalCodesWithHttpInfoAsync (GetPostalCodesAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ValidateMailingAddress
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressResponse</returns>
        System.Threading.Tasks.Task<ValidateMailingAddressResponse> ValidateMailingAddressAsync (ValidateMailingAddressRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ValidateMailingAddress
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressResponse>> ValidateMailingAddressWithHttpInfoAsync (ValidateMailingAddressRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ValidateMailingAddressPremium
        /// </summary>
        /// <remarks>
        /// ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressPremiumResponse</returns>
        System.Threading.Tasks.Task<ValidateMailingAddressPremiumResponse> ValidateMailingAddressPremiumAsync (ValidateMailingAddressPremiumRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ValidateMailingAddressPremium
        /// </summary>
        /// <remarks>
        /// ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressPremiumResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressPremiumResponse>> ValidateMailingAddressPremiumWithHttpInfoAsync (ValidateMailingAddressPremiumRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ValidateMailingAddressPro
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressProResponse</returns>
        System.Threading.Tasks.Task<ValidateMailingAddressProResponse> ValidateMailingAddressProAsync (ValidateMailingAddressProRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ValidateMailingAddressPro
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressProResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressProResponse>> ValidateMailingAddressProWithHttpInfoAsync (ValidateMailingAddressProRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ValidateMailingAddressUSCAN
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressUSCANAPIResponse</returns>
        System.Threading.Tasks.Task<ValidateMailingAddressUSCANAPIResponse> ValidateMailingAddressUSCANAsync (ValidateMailingAddressUSCANAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// ValidateMailingAddressUSCAN
        /// </summary>
        /// <remarks>
        /// ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressUSCANAPIResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressUSCANAPIResponse>> ValidateMailingAddressUSCANWithHttpInfoAsync (ValidateMailingAddressUSCANAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressVerificationServiceApi : IAddressVerificationServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressVerificationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressVerificationServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressVerificationServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddressVerificationServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressVerificationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressVerificationServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// GetCityStateProvince GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>GetCityStateProvinceAPIResponse</returns>
        public GetCityStateProvinceAPIResponse GetCityStateProvince (GetCityStateProvinceAPIRequest inputAddress)
        {
             ApiResponse<GetCityStateProvinceAPIResponse> localVarResponse = GetCityStateProvinceWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetCityStateProvince GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of GetCityStateProvinceAPIResponse</returns>
        public ApiResponse<GetCityStateProvinceAPIResponse> GetCityStateProvinceWithHttpInfo (GetCityStateProvinceAPIRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->GetCityStateProvince");

            var localVarPath = "/addressverification/v1/getcitystateprovince/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCityStateProvince", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GetCityStateProvinceAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GetCityStateProvinceAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCityStateProvinceAPIResponse)));
            
            
        }

        /// <summary>
        /// GetCityStateProvince GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCityStateProvinceAPIResponse</returns>
        public async System.Threading.Tasks.Task<GetCityStateProvinceAPIResponse> GetCityStateProvinceAsync (GetCityStateProvinceAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCityStateProvinceAPIResponse> localVarResponse = await GetCityStateProvinceWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetCityStateProvince GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCityStateProvinceAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCityStateProvinceAPIResponse>> GetCityStateProvinceWithHttpInfoAsync (GetCityStateProvinceAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->GetCityStateProvince");

            var localVarPath = "/addressverification/v1/getcitystateprovince/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCityStateProvince", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GetCityStateProvinceAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GetCityStateProvinceAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCityStateProvinceAPIResponse)));
            
        }

        /// <summary>
        /// GetPostalCodes GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>GetPostalCodesAPIResponse</returns>
        public GetPostalCodesAPIResponse GetPostalCodes (GetPostalCodesAPIRequest inputAddress)
        {
             ApiResponse<GetPostalCodesAPIResponse> localVarResponse = GetPostalCodesWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetPostalCodes GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of GetPostalCodesAPIResponse</returns>
        public ApiResponse<GetPostalCodesAPIResponse> GetPostalCodesWithHttpInfo (GetPostalCodesAPIRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->GetPostalCodes");

            var localVarPath = "/addressverification/v1/getpostalcodes/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPostalCodes", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GetPostalCodesAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GetPostalCodesAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPostalCodesAPIResponse)));
            
            
        }

        /// <summary>
        /// GetPostalCodes GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPostalCodesAPIResponse</returns>
        public async System.Threading.Tasks.Task<GetPostalCodesAPIResponse> GetPostalCodesAsync (GetPostalCodesAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetPostalCodesAPIResponse> localVarResponse = await GetPostalCodesWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetPostalCodes GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPostalCodesAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPostalCodesAPIResponse>> GetPostalCodesWithHttpInfoAsync (GetPostalCodesAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->GetPostalCodes");

            var localVarPath = "/addressverification/v1/getpostalcodes/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPostalCodes", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GetPostalCodesAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GetPostalCodesAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPostalCodesAPIResponse)));
            
        }

        /// <summary>
        /// ValidateMailingAddress ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressResponse</returns>
        public ValidateMailingAddressResponse ValidateMailingAddress (ValidateMailingAddressRequest inputAddress)
        {
             ApiResponse<ValidateMailingAddressResponse> localVarResponse = ValidateMailingAddressWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ValidateMailingAddress ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressResponse</returns>
        public ApiResponse<ValidateMailingAddressResponse> ValidateMailingAddressWithHttpInfo (ValidateMailingAddressRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddress");

            var localVarPath = "/addressverification/v1/validatemailingaddress/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressResponse)));
            
            
        }

        /// <summary>
        /// ValidateMailingAddress ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMailingAddressResponse> ValidateMailingAddressAsync (ValidateMailingAddressRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMailingAddressResponse> localVarResponse = await ValidateMailingAddressWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ValidateMailingAddress ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressResponse>> ValidateMailingAddressWithHttpInfoAsync (ValidateMailingAddressRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddress");

            var localVarPath = "/addressverification/v1/validatemailingaddress/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressResponse)));
            
        }

        /// <summary>
        /// ValidateMailingAddressPremium ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressPremiumResponse</returns>
        public ValidateMailingAddressPremiumResponse ValidateMailingAddressPremium (ValidateMailingAddressPremiumRequest inputAddress)
        {
             ApiResponse<ValidateMailingAddressPremiumResponse> localVarResponse = ValidateMailingAddressPremiumWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ValidateMailingAddressPremium ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressPremiumResponse</returns>
        public ApiResponse<ValidateMailingAddressPremiumResponse> ValidateMailingAddressPremiumWithHttpInfo (ValidateMailingAddressPremiumRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressPremium");

            var localVarPath = "/addressverification/v1/validatemailingaddresspremium/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressPremium", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressPremiumResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressPremiumResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressPremiumResponse)));
            
            
        }

        /// <summary>
        /// ValidateMailingAddressPremium ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressPremiumResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMailingAddressPremiumResponse> ValidateMailingAddressPremiumAsync (ValidateMailingAddressPremiumRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMailingAddressPremiumResponse> localVarResponse = await ValidateMailingAddressPremiumWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ValidateMailingAddressPremium ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressPremiumResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressPremiumResponse>> ValidateMailingAddressPremiumWithHttpInfoAsync (ValidateMailingAddressPremiumRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressPremium");

            var localVarPath = "/addressverification/v1/validatemailingaddresspremium/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressPremium", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressPremiumResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressPremiumResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressPremiumResponse)));
            
        }

        /// <summary>
        /// ValidateMailingAddressPro ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressProResponse</returns>
        public ValidateMailingAddressProResponse ValidateMailingAddressPro (ValidateMailingAddressProRequest inputAddress)
        {
             ApiResponse<ValidateMailingAddressProResponse> localVarResponse = ValidateMailingAddressProWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ValidateMailingAddressPro ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressProResponse</returns>
        public ApiResponse<ValidateMailingAddressProResponse> ValidateMailingAddressProWithHttpInfo (ValidateMailingAddressProRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressPro");

            var localVarPath = "/addressverification/v1/validatemailingaddresspro/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressPro", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressProResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressProResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressProResponse)));
            
            
        }

        /// <summary>
        /// ValidateMailingAddressPro ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressProResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMailingAddressProResponse> ValidateMailingAddressProAsync (ValidateMailingAddressProRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMailingAddressProResponse> localVarResponse = await ValidateMailingAddressProWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ValidateMailingAddressPro ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressProResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressProResponse>> ValidateMailingAddressProWithHttpInfoAsync (ValidateMailingAddressProRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressPro");

            var localVarPath = "/addressverification/v1/validatemailingaddresspro/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressPro", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressProResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressProResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressProResponse)));
            
        }

        /// <summary>
        /// ValidateMailingAddressUSCAN ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ValidateMailingAddressUSCANAPIResponse</returns>
        public ValidateMailingAddressUSCANAPIResponse ValidateMailingAddressUSCAN (ValidateMailingAddressUSCANAPIRequest inputAddress)
        {
             ApiResponse<ValidateMailingAddressUSCANAPIResponse> localVarResponse = ValidateMailingAddressUSCANWithHttpInfo(inputAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ValidateMailingAddressUSCAN ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <returns>ApiResponse of ValidateMailingAddressUSCANAPIResponse</returns>
        public ApiResponse<ValidateMailingAddressUSCANAPIResponse> ValidateMailingAddressUSCANWithHttpInfo (ValidateMailingAddressUSCANAPIRequest inputAddress)
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressUSCAN");

            var localVarPath = "/addressverification/v1/validatemailingaddressuscan/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressUSCAN", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressUSCANAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressUSCANAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressUSCANAPIResponse)));
            
            
        }

        /// <summary>
        /// ValidateMailingAddressUSCAN ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ValidateMailingAddressUSCANAPIResponse</returns>
        public async System.Threading.Tasks.Task<ValidateMailingAddressUSCANAPIResponse> ValidateMailingAddressUSCANAsync (ValidateMailingAddressUSCANAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ValidateMailingAddressUSCANAPIResponse> localVarResponse = await ValidateMailingAddressUSCANWithHttpInfoAsync(inputAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ValidateMailingAddressUSCAN ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ValidateMailingAddressUSCANAPIResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidateMailingAddressUSCANAPIResponse>> ValidateMailingAddressUSCANWithHttpInfoAsync (ValidateMailingAddressUSCANAPIRequest inputAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'inputAddress' is set
            if (inputAddress == null)
                throw new ApiException(400, "Missing required parameter 'inputAddress' when calling AddressVerificationServiceApi->ValidateMailingAddressUSCAN");

            var localVarPath = "/addressverification/v1/validatemailingaddressuscan/results.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputAddress != null && inputAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputAddress; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateMailingAddressUSCAN", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<ValidateMailingAddressUSCANAPIResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ValidateMailingAddressUSCANAPIResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidateMailingAddressUSCANAPIResponse)));
            
        }

    }
}