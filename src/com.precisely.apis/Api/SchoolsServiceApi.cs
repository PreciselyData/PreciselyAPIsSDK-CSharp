/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <returns>SchoolsNearByResponse</returns>
        SchoolsNearByResponse GetSchoolsByAddress (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string));

        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        ApiResponse<SchoolsNearByResponse> GetSchoolsByAddressWithHttpInfo (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsByAddressAsync (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search Nearby Schools by Address
        /// </summary>
        /// <remarks>
        /// Search Nearby Schools by Address
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsByAddressWithHttpInfoAsync (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchoolsServiceApi : ISchoolsServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public SchoolsServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchoolsServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <returns>SchoolsNearByResponse</returns>
        public SchoolsNearByResponse GetSchoolsByAddress (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string))
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = GetSchoolsByAddressWithHttpInfo(address, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <returns>ApiResponse of SchoolsNearByResponse</returns>
        public ApiResponse<SchoolsNearByResponse> GetSchoolsByAddressWithHttpInfo (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SchoolsServiceApi->GetSchoolsByAddress");

            var localVarPath = "/schools/v1/school/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
            if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
            if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
            if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
            if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
            if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
            
        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SchoolsNearByResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsNearByResponse> GetSchoolsByAddressAsync (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SchoolsNearByResponse> localVarResponse = await GetSchoolsByAddressWithHttpInfoAsync(address, edLevel, schoolType, schoolSubType, gender, assignedSchoolsOnly, districtSchoolsOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, maxCandidates, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Nearby Schools by Address Search Nearby Schools by Address
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="edLevel">Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools  (optional)</param>
        /// <param name="schoolType">Single digit code for schoolTypes applicable values are PRI and PUB (optional)</param>
        /// <param name="schoolSubType">Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education) (optional)</param>
        /// <param name="gender">Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only (optional)</param>
        /// <param name="assignedSchoolsOnly">Single digit code for assignedSchoolOnly applicable values are  Y/N  (optional)</param>
        /// <param name="districtSchoolsOnly">Single digit code for districtSchoolOnly applicable values are Y/N  (optional)</param>
        /// <param name="searchRadius">Search Radius within which schools are searched (optional)</param>
        /// <param name="searchRadiusUnit">Search Radius unit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelTime">Travel Time based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelTimeUnit">Travel Time unit applicable values are minutes,hours,seconds,milliseconds  (optional)</param>
        /// <param name="travelDistance">Travel Distance based on ‘travelMode’ within which schools are searched. (optional)</param>
        /// <param name="travelDistanceUnit">Travel distanceUnit applicable values are feet,kilometers,miles,meters (optional)</param>
        /// <param name="travelMode">Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving (optional)</param>
        /// <param name="maxCandidates">Max result to search  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SchoolsNearByResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsNearByResponse>> GetSchoolsByAddressWithHttpInfoAsync (string address, string edLevel = default(string), string schoolType = default(string), string schoolSubType = default(string), string gender = default(string), string assignedSchoolsOnly = default(string), string districtSchoolsOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string maxCandidates = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SchoolsServiceApi->GetSchoolsByAddress");

            var localVarPath = "/schools/v1/school/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (edLevel != null) localVarQueryParams.Add("edLevel", Configuration.ApiClient.ParameterToString(edLevel)); // query parameter
           if (schoolType != null) localVarQueryParams.Add("schoolType", Configuration.ApiClient.ParameterToString(schoolType)); // query parameter
           if (schoolSubType != null) localVarQueryParams.Add("schoolSubType", Configuration.ApiClient.ParameterToString(schoolSubType)); // query parameter
           if (gender != null) localVarQueryParams.Add("gender", Configuration.ApiClient.ParameterToString(gender)); // query parameter
           if (assignedSchoolsOnly != null) localVarQueryParams.Add("assignedSchoolsOnly", Configuration.ApiClient.ParameterToString(assignedSchoolsOnly)); // query parameter
           if (districtSchoolsOnly != null) localVarQueryParams.Add("districtSchoolsOnly", Configuration.ApiClient.ParameterToString(districtSchoolsOnly)); // query parameter
           if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
           if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<SchoolsNearByResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (SchoolsNearByResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsNearByResponse)));
            
        }

    }
}