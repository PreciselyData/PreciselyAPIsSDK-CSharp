/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressAutocompleteServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Address Autocomplete Search
        /// </summary>
        /// <remarks>
        /// Performs search to retrieve list of places by input text and location vicinity.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <returns>TypeaheadLocations</returns>
        TypeaheadLocations SearchV2 (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string));

        /// <summary>
        /// Address Autocomplete Search
        /// </summary>
        /// <remarks>
        /// Performs search to retrieve list of places by input text and location vicinity.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <returns>ApiResponse of TypeaheadLocations</returns>
        ApiResponse<TypeaheadLocations> SearchV2WithHttpInfo (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Address Autocomplete Search
        /// </summary>
        /// <remarks>
        /// Performs search to retrieve list of places by input text and location vicinity.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TypeaheadLocations</returns>
        System.Threading.Tasks.Task<TypeaheadLocations> SearchV2Async (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Address Autocomplete Search
        /// </summary>
        /// <remarks>
        /// Performs search to retrieve list of places by input text and location vicinity.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TypeaheadLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeaheadLocations>> SearchV2WithHttpInfoAsync (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressAutocompleteServiceApi : IAddressAutocompleteServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAutocompleteServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressAutocompleteServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAutocompleteServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddressAutocompleteServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAutocompleteServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressAutocompleteServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Address Autocomplete Search Performs search to retrieve list of places by input text and location vicinity.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <returns>TypeaheadLocations</returns>
        public TypeaheadLocations SearchV2 (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string))
        {
             ApiResponse<TypeaheadLocations> localVarResponse = SearchV2WithHttpInfo(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber, searchOnUnitInfo, searchOnPOBox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Address Autocomplete Search Performs search to retrieve list of places by input text and location vicinity.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <returns>ApiResponse of TypeaheadLocations</returns>
        public ApiResponse<TypeaheadLocations> SearchV2WithHttpInfo (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string))
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling AddressAutocompleteServiceApi->SearchV2");

            var localVarPath = "/typeahead/v1/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (matchOnAddressNumber != null) localVarQueryParams.Add("matchOnAddressNumber", Configuration.ApiClient.ParameterToString(matchOnAddressNumber)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
            if (returnAdminAreasOnly != null) localVarQueryParams.Add("returnAdminAreasOnly", Configuration.ApiClient.ParameterToString(returnAdminAreasOnly)); // query parameter
            if (includeRangesDetails != null) localVarQueryParams.Add("includeRangesDetails", Configuration.ApiClient.ParameterToString(includeRangesDetails)); // query parameter
            if (searchType != null) localVarQueryParams.Add("searchType", Configuration.ApiClient.ParameterToString(searchType)); // query parameter
            if (searchOnAddressNumber != null) localVarQueryParams.Add("searchOnAddressNumber", Configuration.ApiClient.ParameterToString(searchOnAddressNumber)); // query parameter
            if (searchOnUnitInfo != null) localVarQueryParams.Add("searchOnUnitInfo", Configuration.ApiClient.ParameterToString(searchOnUnitInfo)); // query parameter
            if (searchOnPOBox != null) localVarQueryParams.Add("searchOnPOBox", Configuration.ApiClient.ParameterToString(searchOnPOBox)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchV2", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TypeaheadLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TypeaheadLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeaheadLocations)));
            
            
        }

        /// <summary>
        /// Address Autocomplete Search Performs search to retrieve list of places by input text and location vicinity.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TypeaheadLocations</returns>
        public async System.Threading.Tasks.Task<TypeaheadLocations> SearchV2Async (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TypeaheadLocations> localVarResponse = await SearchV2WithHttpInfoAsync(searchText, latitude, longitude, searchRadius, searchRadiusUnit, maxCandidates, country, matchOnAddressNumber, autoDetectLocation, ipAddress, areaName1, areaName3, postCode, returnAdminAreasOnly, includeRangesDetails, searchType, searchOnAddressNumber, searchOnUnitInfo, searchOnPOBox, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Address Autocomplete Search Performs search to retrieve list of places by input text and location vicinity.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">The input to be searched.</param>
        /// <param name="latitude">Latitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="longitude">Longitude of the location. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="country">Country ISO code. We need to make sure that either Lat/Lng or Country is provided to API (optional)</param>
        /// <param name="matchOnAddressNumber">Option so that we force api to match on address number (optional)</param>
        /// <param name="autoDetectLocation">Option to allow API to detect origin of API request automatically (optional)</param>
        /// <param name="ipAddress"> (optional)</param>
        /// <param name="areaName1">State province of the input to be searched (optional)</param>
        /// <param name="areaName3">City of the input to be searched (optional)</param>
        /// <param name="postCode">Postal Code of the input to be searched (optional)</param>
        /// <param name="returnAdminAreasOnly">if value set &#39;Y&#39; then it will only do a matching on postcode or areaName1, areaName2, areaName3 and areaName4 fields in the data (optional)</param>
        /// <param name="includeRangesDetails">if value set &#39;Y&#39; then display all unit info of ranges, if value set &#39;N&#39; then don&#39;t show ranges (optional)</param>
        /// <param name="searchType">Preference to control search type of interactive requests. (optional)</param>
        /// <param name="searchOnAddressNumber">Preference to search on address number. (optional)</param>
        /// <param name="searchOnUnitInfo">Preference to search on unit info. (optional)</param>
        /// <param name="searchOnPOBox">Specifies whether to enable search for matching on PO Box. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TypeaheadLocations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeaheadLocations>> SearchV2WithHttpInfoAsync (string searchText, string latitude = default(string), string longitude = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string maxCandidates = default(string), string country = default(string), string matchOnAddressNumber = default(string), string autoDetectLocation = default(string), string ipAddress = default(string), string areaName1 = default(string), string areaName3 = default(string), string postCode = default(string), string returnAdminAreasOnly = default(string), string includeRangesDetails = default(string), string searchType = default(string), string searchOnAddressNumber = default(string), string searchOnUnitInfo = default(string), string searchOnPOBox = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
                throw new ApiException(400, "Missing required parameter 'searchText' when calling AddressAutocompleteServiceApi->SearchV2");

            var localVarPath = "/typeahead/v1/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
           if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (matchOnAddressNumber != null) localVarQueryParams.Add("matchOnAddressNumber", Configuration.ApiClient.ParameterToString(matchOnAddressNumber)); // query parameter
           if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
           if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
           if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
           if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
           if (postCode != null) localVarQueryParams.Add("postCode", Configuration.ApiClient.ParameterToString(postCode)); // query parameter
           if (returnAdminAreasOnly != null) localVarQueryParams.Add("returnAdminAreasOnly", Configuration.ApiClient.ParameterToString(returnAdminAreasOnly)); // query parameter
           if (includeRangesDetails != null) localVarQueryParams.Add("includeRangesDetails", Configuration.ApiClient.ParameterToString(includeRangesDetails)); // query parameter
           if (searchType != null) localVarQueryParams.Add("searchType", Configuration.ApiClient.ParameterToString(searchType)); // query parameter
           if (searchOnAddressNumber != null) localVarQueryParams.Add("searchOnAddressNumber", Configuration.ApiClient.ParameterToString(searchOnAddressNumber)); // query parameter
           if (searchOnUnitInfo != null) localVarQueryParams.Add("searchOnUnitInfo", Configuration.ApiClient.ParameterToString(searchOnUnitInfo)); // query parameter
           if (searchOnPOBox != null) localVarQueryParams.Add("searchOnPOBox", Configuration.ApiClient.ParameterToString(searchOnPOBox)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchV2", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<TypeaheadLocations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (TypeaheadLocations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeaheadLocations)));
            
        }

    }
}