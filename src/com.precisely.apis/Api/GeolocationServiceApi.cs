/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 17.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeolocationServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Location By IP Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <returns>GeoLocationIpAddr</returns>
        GeoLocationIpAddr GetLocationByIPAddress (string ipAddress);

        /// <summary>
        /// Location By IP Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <returns>ApiResponse of GeoLocationIpAddr</returns>
        ApiResponse<GeoLocationIpAddr> GetLocationByIPAddressWithHttpInfo (string ipAddress);
        /// <summary>
        /// Location by WiFi Access Point.
        /// </summary>
        /// <remarks>
        /// This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <returns>GeoLocationAccessPoint</returns>
        GeoLocationAccessPoint GetLocationByWiFiAccessPoint (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string));

        /// <summary>
        /// Location by WiFi Access Point.
        /// </summary>
        /// <remarks>
        /// This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <returns>ApiResponse of GeoLocationAccessPoint</returns>
        ApiResponse<GeoLocationAccessPoint> GetLocationByWiFiAccessPointWithHttpInfo (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Location By IP Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GeoLocationIpAddr</returns>
        System.Threading.Tasks.Task<GeoLocationIpAddr> GetLocationByIPAddressAsync (string ipAddress, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Location By IP Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GeoLocationIpAddr)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoLocationIpAddr>> GetLocationByIPAddressWithHttpInfoAsync (string ipAddress, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Location by WiFi Access Point.
        /// </summary>
        /// <remarks>
        /// This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GeoLocationAccessPoint</returns>
        System.Threading.Tasks.Task<GeoLocationAccessPoint> GetLocationByWiFiAccessPointAsync (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Location by WiFi Access Point.
        /// </summary>
        /// <remarks>
        /// This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GeoLocationAccessPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoLocationAccessPoint>> GetLocationByWiFiAccessPointWithHttpInfoAsync (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeolocationServiceApi : IGeolocationServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeolocationServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public GeolocationServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeolocationServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Location By IP Address. This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <returns>GeoLocationIpAddr</returns>
        public GeoLocationIpAddr GetLocationByIPAddress (string ipAddress)
        {
             ApiResponse<GeoLocationIpAddr> localVarResponse = GetLocationByIPAddressWithHttpInfo(ipAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Location By IP Address. This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <returns>ApiResponse of GeoLocationIpAddr</returns>
        public ApiResponse<GeoLocationIpAddr> GetLocationByIPAddressWithHttpInfo (string ipAddress)
        {
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling GeolocationServiceApi->GetLocationByIPAddress");

            var localVarPath = "/geolocation/v1/location/byipaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByIPAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GeoLocationIpAddr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoLocationIpAddr) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoLocationIpAddr)));
            
            
        }

        /// <summary>
        /// Location By IP Address. This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GeoLocationIpAddr</returns>
        public async System.Threading.Tasks.Task<GeoLocationIpAddr> GetLocationByIPAddressAsync (string ipAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GeoLocationIpAddr> localVarResponse = await GetLocationByIPAddressWithHttpInfoAsync(ipAddress, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Location By IP Address. This service accepts an IP address and returns the location coordinates corresponding to that IP address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipAddress">This is the ip address of network connected device. It must be a standard IPv4 octet and a valid external address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GeoLocationIpAddr)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoLocationIpAddr>> GetLocationByIPAddressWithHttpInfoAsync (string ipAddress, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipAddress' when calling GeolocationServiceApi->GetLocationByIPAddress");

            var localVarPath = "/geolocation/v1/location/byipaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByIPAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GeoLocationIpAddr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoLocationIpAddr) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoLocationIpAddr)));
            
        }

        /// <summary>
        /// Location by WiFi Access Point. This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <returns>GeoLocationAccessPoint</returns>
        public GeoLocationAccessPoint GetLocationByWiFiAccessPoint (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string))
        {
             ApiResponse<GeoLocationAccessPoint> localVarResponse = GetLocationByWiFiAccessPointWithHttpInfo(mac, ssid, rsid, speed, accessPoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Location by WiFi Access Point. This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <returns>ApiResponse of GeoLocationAccessPoint</returns>
        public ApiResponse<GeoLocationAccessPoint> GetLocationByWiFiAccessPointWithHttpInfo (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string))
        {

            var localVarPath = "/geolocation/v1/location/byaccesspoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mac != null) localVarQueryParams.Add("mac", Configuration.ApiClient.ParameterToString(mac)); // query parameter
            if (ssid != null) localVarQueryParams.Add("ssid", Configuration.ApiClient.ParameterToString(ssid)); // query parameter
            if (rsid != null) localVarQueryParams.Add("rsid", Configuration.ApiClient.ParameterToString(rsid)); // query parameter
            if (speed != null) localVarQueryParams.Add("speed", Configuration.ApiClient.ParameterToString(speed)); // query parameter
            if (accessPoint != null) localVarQueryParams.Add("accessPoint", Configuration.ApiClient.ParameterToString(accessPoint)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByWiFiAccessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GeoLocationAccessPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoLocationAccessPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoLocationAccessPoint)));
            
            
        }

        /// <summary>
        /// Location by WiFi Access Point. This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GeoLocationAccessPoint</returns>
        public async System.Threading.Tasks.Task<GeoLocationAccessPoint> GetLocationByWiFiAccessPointAsync (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GeoLocationAccessPoint> localVarResponse = await GetLocationByWiFiAccessPointWithHttpInfoAsync(mac, ssid, rsid, speed, accessPoint, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Location by WiFi Access Point. This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mac">This should be the 48 bit mac address (or BSSID) of wireless access point. Accepted format is Six groups of two hexadecimal digits, separated by hyphens (-) or colons. (optional)</param>
        /// <param name="ssid">The service set identifier for wi-fi access point. It should be alphanumeric with maximum 32 characters. (optional)</param>
        /// <param name="rsid">This is the received signal strength indicator from particular wi-fi access point. It should be a number from -113 to 0 and the unit of this strength is dBm. (optional)</param>
        /// <param name="speed">This is the connection speed for wi-fi. It should be a number from 0 to 6930 and the unit should be Mbps. (optional)</param>
        /// <param name="accessPoint">This is the JSON based list of wifi access points in the vicinity of device to be located. This parameter is helpful in case, multiple wifi points are visible and we want to make sure that the location of device is best calculated considering all the access points location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GeoLocationAccessPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoLocationAccessPoint>> GetLocationByWiFiAccessPointWithHttpInfoAsync (string mac = default(string), string ssid = default(string), string rsid = default(string), string speed = default(string), string accessPoint = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/geolocation/v1/location/byaccesspoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (mac != null) localVarQueryParams.Add("mac", Configuration.ApiClient.ParameterToString(mac)); // query parameter
           if (ssid != null) localVarQueryParams.Add("ssid", Configuration.ApiClient.ParameterToString(ssid)); // query parameter
           if (rsid != null) localVarQueryParams.Add("rsid", Configuration.ApiClient.ParameterToString(rsid)); // query parameter
           if (speed != null) localVarQueryParams.Add("speed", Configuration.ApiClient.ParameterToString(speed)); // query parameter
           if (accessPoint != null) localVarQueryParams.Add("accessPoint", Configuration.ApiClient.ParameterToString(accessPoint)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationByWiFiAccessPoint", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<GeoLocationAccessPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoLocationAccessPoint) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoLocationAccessPoint)));
            
        }

    }
}