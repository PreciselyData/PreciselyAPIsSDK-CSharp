/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 10.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityProfilesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Identities By Address
        /// </summary>
        /// <remarks>
        /// Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>IdentityResponse</returns>
        IdentityResponse GetIdentityByAddress (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Identities By Address
        /// </summary>
        /// <remarks>
        /// Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of IdentityResponse</returns>
        ApiResponse<IdentityResponse> GetIdentityByAddressWithHttpInfo (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Identity By Email
        /// </summary>
        /// <remarks>
        /// Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        Identity GetIdentityByEmail (string email, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Identity By Email
        /// </summary>
        /// <remarks>
        /// Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        ApiResponse<Identity> GetIdentityByEmailWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null);
        /// <summary>
        /// Identity By Twitter
        /// </summary>
        /// <remarks>
        /// Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        Identity GetIdentityByTwitter (string twitter, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Identity By Twitter
        /// </summary>
        /// <remarks>
        /// Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        ApiResponse<Identity> GetIdentityByTwitterWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Identities By Address
        /// </summary>
        /// <remarks>
        /// Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of IdentityResponse</returns>
        System.Threading.Tasks.Task<IdentityResponse> GetIdentityByAddressAsync (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);

        /// <summary>
        /// Identities By Address
        /// </summary>
        /// <remarks>
        /// Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (IdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityResponse>> GetIdentityByAddressAsyncWithHttpInfo (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null);
        /// <summary>
        /// Identity By Email
        /// </summary>
        /// <remarks>
        /// Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        System.Threading.Tasks.Task<Identity> GetIdentityByEmailAsync (string email, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Identity By Email
        /// </summary>
        /// <remarks>
        /// Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByEmailAsyncWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null);
        /// <summary>
        /// Identity By Twitter
        /// </summary>
        /// <remarks>
        /// Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        System.Threading.Tasks.Task<Identity> GetIdentityByTwitterAsync (string twitter, string confidence = null, string theme = null, string filter = null);

        /// <summary>
        /// Identity By Twitter
        /// </summary>
        /// <remarks>
        /// Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByTwitterAsyncWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityProfilesServiceApi : IIdentityProfilesServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProfilesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityProfilesServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProfilesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityProfilesServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Identities By Address Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>IdentityResponse</returns>
        public IdentityResponse GetIdentityByAddress (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<IdentityResponse> localVarResponse = GetIdentityByAddressWithHttpInfo(address, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identities By Address Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of IdentityResponse</returns>
        public ApiResponse< IdentityResponse > GetIdentityByAddressWithHttpInfo (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling IdentityProfilesServiceApi->GetIdentityByAddress");

            var localVarPath = "/identityprofiles/v1/identity/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (IdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityResponse)));
            
        }

        /// <summary>
        /// Identities By Address Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of IdentityResponse</returns>
        public async System.Threading.Tasks.Task<IdentityResponse> GetIdentityByAddressAsync (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
             ApiResponse<IdentityResponse> localVarResponse = await GetIdentityByAddressAsyncWithHttpInfo(address, confidence, maxCandidates, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identities By Address Accepts an Address as input and returns rich localized Identity profiles, demographics, lifestyle segmentations, neighborhood names, property ownership &amp; values, and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="maxCandidates">Number of identities returned in response (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (IdentityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityResponse>> GetIdentityByAddressAsyncWithHttpInfo (string address, string confidence = null, string maxCandidates = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling IdentityProfilesServiceApi->GetIdentityByAddress");

            var localVarPath = "/identityprofiles/v1/identity/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (IdentityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityResponse)));
            
        }

        /// <summary>
        /// Identity By Email Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        public Identity GetIdentityByEmail (string email, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = GetIdentityByEmailWithHttpInfo(email, confidence, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identity By Email Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        public ApiResponse< Identity > GetIdentityByEmailWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling IdentityProfilesServiceApi->GetIdentityByEmail");

            var localVarPath = "/identityprofiles/v1/identity/byemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Identity By Email Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        public async System.Threading.Tasks.Task<Identity> GetIdentityByEmailAsync (string email, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = await GetIdentityByEmailAsyncWithHttpInfo(email, confidence, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identity By Email Accepts an Email address as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">This specifies the email address</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByEmailAsyncWithHttpInfo (string email, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling IdentityProfilesServiceApi->GetIdentityByEmail");

            var localVarPath = "/identityprofiles/v1/identity/byemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Identity By Twitter Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Identity</returns>
        public Identity GetIdentityByTwitter (string twitter, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = GetIdentityByTwitterWithHttpInfo(twitter, confidence, theme, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identity By Twitter Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>ApiResponse of Identity</returns>
        public ApiResponse< Identity > GetIdentityByTwitterWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'twitter' is set
            if (twitter == null)
                throw new ApiException(400, "Missing required parameter 'twitter' when calling IdentityProfilesServiceApi->GetIdentityByTwitter");

            var localVarPath = "/identityprofiles/v1/identity/bytwitter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (twitter != null) localVarQueryParams.Add("twitter", Configuration.ApiClient.ParameterToString(twitter)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByTwitter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

        /// <summary>
        /// Identity By Twitter Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of Identity</returns>
        public async System.Threading.Tasks.Task<Identity> GetIdentityByTwitterAsync (string twitter, string confidence = null, string theme = null, string filter = null)
        {
             ApiResponse<Identity> localVarResponse = await GetIdentityByTwitterAsyncWithHttpInfo(twitter, confidence, theme, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identity By Twitter Accepts a Twiiter handle as input and returns rich localized Identity profiles and social affinity insights from twitter, linkedin, and more along with education, job history and other identity information.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="twitter">Twitter handle of the identity.</param>
        /// <param name="confidence">To adjust quality threshold of data returned. Default is HIGH (optional)</param>
        /// <param name="theme">theme parameter for filtering results (optional)</param>
        /// <param name="filter">filter params (optional)</param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityByTwitterAsyncWithHttpInfo (string twitter, string confidence = null, string theme = null, string filter = null)
        {
            // verify the required parameter 'twitter' is set
            if (twitter == null)
                throw new ApiException(400, "Missing required parameter 'twitter' when calling IdentityProfilesServiceApi->GetIdentityByTwitter");

            var localVarPath = "/identityprofiles/v1/identity/bytwitter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (twitter != null) localVarQueryParams.Add("twitter", Configuration.ApiClient.ParameterToString(twitter)); // query parameter
            if (confidence != null) localVarQueryParams.Add("confidence", Configuration.ApiClient.ParameterToString(confidence)); // query parameter
            if (theme != null) localVarQueryParams.Add("theme", Configuration.ApiClient.ParameterToString(theme)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityByTwitter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Identity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Identity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Identity)));
            
        }

    }
}
