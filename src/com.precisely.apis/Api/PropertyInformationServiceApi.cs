/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyInformationServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Parcel Boundary By Address
        /// </summary>
        /// <remarks>
        /// Accepts address as input and returns property parcel boundary around that address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        ParcelBoundary GetParcelBoundaryByAddress (string address, string accept = null);

        /// <summary>
        /// Get Parcel Boundary By Address
        /// </summary>
        /// <remarks>
        /// Accepts address as input and returns property parcel boundary around that address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        ApiResponse<ParcelBoundary> GetParcelBoundaryByAddressWithHttpInfo (string address, string accept = null);
        /// <summary>
        /// Get Parcel Boundary By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        ParcelBoundary GetParcelBoundaryByLocation (string longitude, string latitude, string accept = null);

        /// <summary>
        /// Get Parcel Boundary By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        ApiResponse<ParcelBoundary> GetParcelBoundaryByLocationWithHttpInfo (string longitude, string latitude, string accept = null);
        /// <summary>
        /// PropertyV2 Attributes By Address.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>PropertyInfoResponse</returns>
        PropertyInfoResponse GetPropertyAttributesByAddress (string address = null, string attributeFilter = null);

        /// <summary>
        /// PropertyV2 Attributes By Address.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>ApiResponse of PropertyInfoResponse</returns>
        ApiResponse<PropertyInfoResponse> GetPropertyAttributesByAddressWithHttpInfo (string address = null, string attributeFilter = null);
        /// <summary>
        /// PropertyV2 Attributes By Address Batch.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>PropertyInfoResponses</returns>
        PropertyInfoResponses GetPropertyAttributesByAddressBatch (PropertyInfoAddressRequest body = null);

        /// <summary>
        /// PropertyV2 Attributes By Address Batch.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PropertyInfoResponses</returns>
        ApiResponse<PropertyInfoResponses> GetPropertyAttributesByAddressBatchWithHttpInfo (PropertyInfoAddressRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Parcel Boundary By Address
        /// </summary>
        /// <remarks>
        /// Accepts address as input and returns property parcel boundary around that address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByAddressAsync (string address, string accept = null);

        /// <summary>
        /// Get Parcel Boundary By Address
        /// </summary>
        /// <remarks>
        /// Accepts address as input and returns property parcel boundary around that address.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByAddressAsyncWithHttpInfo (string address, string accept = null);
        /// <summary>
        /// Get Parcel Boundary By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByLocationAsync (string longitude, string latitude, string accept = null);

        /// <summary>
        /// Get Parcel Boundary By Location
        /// </summary>
        /// <remarks>
        /// Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByLocationAsyncWithHttpInfo (string longitude, string latitude, string accept = null);
        /// <summary>
        /// PropertyV2 Attributes By Address.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>Task of PropertyInfoResponse</returns>
        System.Threading.Tasks.Task<PropertyInfoResponse> GetPropertyAttributesByAddressAsync (string address = null, string attributeFilter = null);

        /// <summary>
        /// PropertyV2 Attributes By Address.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>Task of ApiResponse (PropertyInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyInfoResponse>> GetPropertyAttributesByAddressAsyncWithHttpInfo (string address = null, string attributeFilter = null);
        /// <summary>
        /// PropertyV2 Attributes By Address Batch.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PropertyInfoResponses</returns>
        System.Threading.Tasks.Task<PropertyInfoResponses> GetPropertyAttributesByAddressBatchAsync (PropertyInfoAddressRequest body = null);

        /// <summary>
        /// PropertyV2 Attributes By Address Batch.
        /// </summary>
        /// <remarks>
        /// GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyInfoResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyInfoResponses>> GetPropertyAttributesByAddressBatchAsyncWithHttpInfo (PropertyInfoAddressRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertyInformationServiceApi : IPropertyInformationServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInformationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyInformationServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInformationServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertyInformationServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Parcel Boundary By Address Accepts address as input and returns property parcel boundary around that address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        public ParcelBoundary GetParcelBoundaryByAddress (string address, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = GetParcelBoundaryByAddressWithHttpInfo(address, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Parcel Boundary By Address Accepts address as input and returns property parcel boundary around that address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        public ApiResponse< ParcelBoundary > GetParcelBoundaryByAddressWithHttpInfo (string address, string accept = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PropertyInformationServiceApi->GetParcelBoundaryByAddress");

            var localVarPath = "/property/v1/parcelboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Get Parcel Boundary By Address Accepts address as input and returns property parcel boundary around that address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        public async System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByAddressAsync (string address, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = await GetParcelBoundaryByAddressAsyncWithHttpInfo(address, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Parcel Boundary By Address Accepts address as input and returns property parcel boundary around that address.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByAddressAsyncWithHttpInfo (string address, string accept = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PropertyInformationServiceApi->GetParcelBoundaryByAddress");

            var localVarPath = "/property/v1/parcelboundary/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Get Parcel Boundary By Location Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ParcelBoundary</returns>
        public ParcelBoundary GetParcelBoundaryByLocation (string longitude, string latitude, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = GetParcelBoundaryByLocationWithHttpInfo(longitude, latitude, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Parcel Boundary By Location Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>ApiResponse of ParcelBoundary</returns>
        public ApiResponse< ParcelBoundary > GetParcelBoundaryByLocationWithHttpInfo (string longitude, string latitude, string accept = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PropertyInformationServiceApi->GetParcelBoundaryByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PropertyInformationServiceApi->GetParcelBoundaryByLocation");

            var localVarPath = "/property/v1/parcelboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// Get Parcel Boundary By Location Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ParcelBoundary</returns>
        public async System.Threading.Tasks.Task<ParcelBoundary> GetParcelBoundaryByLocationAsync (string longitude, string latitude, string accept = null)
        {
             ApiResponse<ParcelBoundary> localVarResponse = await GetParcelBoundaryByLocationAsyncWithHttpInfo(longitude, latitude, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Parcel Boundary By Location Accepts latitude/longitude as input and returns property parcel boundary around that location.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of Location</param>
        /// <param name="latitude">Latitude of Location</param>
        /// <param name="accept"> (optional)</param>
        /// <returns>Task of ApiResponse (ParcelBoundary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelBoundary>> GetParcelBoundaryByLocationAsyncWithHttpInfo (string longitude, string latitude, string accept = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PropertyInformationServiceApi->GetParcelBoundaryByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PropertyInformationServiceApi->GetParcelBoundaryByLocation");

            var localVarPath = "/property/v1/parcelboundary/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelBoundaryByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelBoundary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (ParcelBoundary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelBoundary)));
            
        }

        /// <summary>
        /// PropertyV2 Attributes By Address. GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>PropertyInfoResponse</returns>
        public PropertyInfoResponse GetPropertyAttributesByAddress (string address = null, string attributeFilter = null)
        {
             ApiResponse<PropertyInfoResponse> localVarResponse = GetPropertyAttributesByAddressWithHttpInfo(address, attributeFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PropertyV2 Attributes By Address. GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>ApiResponse of PropertyInfoResponse</returns>
        public ApiResponse< PropertyInfoResponse > GetPropertyAttributesByAddressWithHttpInfo (string address = null, string attributeFilter = null)
        {

            var localVarPath = "/property/v2/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (attributeFilter != null) localVarQueryParams.Add("attributeFilter", Configuration.ApiClient.ParameterToString(attributeFilter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyAttributesByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PropertyInfoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyInfoResponse)));
            
        }

        /// <summary>
        /// PropertyV2 Attributes By Address. GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>Task of PropertyInfoResponse</returns>
        public async System.Threading.Tasks.Task<PropertyInfoResponse> GetPropertyAttributesByAddressAsync (string address = null, string attributeFilter = null)
        {
             ApiResponse<PropertyInfoResponse> localVarResponse = await GetPropertyAttributesByAddressAsyncWithHttpInfo(address, attributeFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PropertyV2 Attributes By Address. GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">free form address text (optional)</param>
        /// <param name="attributeFilter">Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)</param>
        /// <returns>Task of ApiResponse (PropertyInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyInfoResponse>> GetPropertyAttributesByAddressAsyncWithHttpInfo (string address = null, string attributeFilter = null)
        {

            var localVarPath = "/property/v2/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (attributeFilter != null) localVarQueryParams.Add("attributeFilter", Configuration.ApiClient.ParameterToString(attributeFilter)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyAttributesByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PropertyInfoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyInfoResponse)));
            
        }

        /// <summary>
        /// PropertyV2 Attributes By Address Batch. GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>PropertyInfoResponses</returns>
        public PropertyInfoResponses GetPropertyAttributesByAddressBatch (PropertyInfoAddressRequest body = null)
        {
             ApiResponse<PropertyInfoResponses> localVarResponse = GetPropertyAttributesByAddressBatchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PropertyV2 Attributes By Address Batch. GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PropertyInfoResponses</returns>
        public ApiResponse< PropertyInfoResponses > GetPropertyAttributesByAddressBatchWithHttpInfo (PropertyInfoAddressRequest body = null)
        {

            var localVarPath = "/property/v2/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyAttributesByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyInfoResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PropertyInfoResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyInfoResponses)));
            
        }

        /// <summary>
        /// PropertyV2 Attributes By Address Batch. GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PropertyInfoResponses</returns>
        public async System.Threading.Tasks.Task<PropertyInfoResponses> GetPropertyAttributesByAddressBatchAsync (PropertyInfoAddressRequest body = null)
        {
             ApiResponse<PropertyInfoResponses> localVarResponse = await GetPropertyAttributesByAddressBatchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PropertyV2 Attributes By Address Batch. GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyInfoResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyInfoResponses>> GetPropertyAttributesByAddressBatchAsyncWithHttpInfo (PropertyInfoAddressRequest body = null)
        {

            var localVarPath = "/property/v2/attributes/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyAttributesByAddressBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyInfoResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PropertyInfoResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyInfoResponses)));
            
        }

    }
}
