/*
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlacesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Category Code Metadata.
        /// </summary>
        /// <remarks>
        /// This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <returns>MetadataResponse</returns>
        MetadataResponse GetCategoryCodeMetadata (string categoryCode = default(string), string level = default(string));

        /// <summary>
        /// Category Code Metadata.
        /// </summary>
        /// <remarks>
        /// This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <returns>ApiResponse of MetadataResponse</returns>
        ApiResponse<MetadataResponse> GetCategoryCodeMetadataWithHttpInfo (string categoryCode = default(string), string level = default(string));
        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <returns>Poi</returns>
        Poi GetPOIById (string id);

        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <returns>ApiResponse of Poi</returns>
        ApiResponse<Poi> GetPOIByIdWithHttpInfo (string id);
        /// <summary>
        /// Get POIs By Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        PlacesResponse GetPOIsByAddress (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));

        /// <summary>
        /// Get POIs By Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        ApiResponse<PlacesResponse> GetPOIsByAddressWithHttpInfo (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));
        /// <summary>
        /// GET Points Of Interest By Area.
        /// </summary>
        /// <remarks>
        /// This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <returns>PlacesResponse</returns>
        PlacesResponse GetPOIsByArea (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));

        /// <summary>
        /// GET Points Of Interest By Area.
        /// </summary>
        /// <remarks>
        /// This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        ApiResponse<PlacesResponse> GetPOIsByAreaWithHttpInfo (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));
        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <returns>PlacesResponse</returns>
        PlacesResponse GetPOIsByGeometry (POIByGeometryRequest pOIByGeometryRequest);

        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        ApiResponse<PlacesResponse> GetPOIsByGeometryWithHttpInfo (POIByGeometryRequest pOIByGeometryRequest);
        /// <summary>
        /// Get POIs By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        PlacesResponse GetPOIsByLocation (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));

        /// <summary>
        /// Get POIs By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        ApiResponse<PlacesResponse> GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string));
        /// <summary>
        /// Points Of Interest Count
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <returns>PoiCount</returns>
        PoiCount GetPOIsCount (string contentType, PoiCountRequest poiCountRequest);

        /// <summary>
        /// Points Of Interest Count
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <returns>ApiResponse of PoiCount</returns>
        ApiResponse<PoiCount> GetPOIsCountWithHttpInfo (string contentType, PoiCountRequest poiCountRequest);
        /// <summary>
        /// Get SIC Metadata
        /// </summary>
        /// <remarks>
        /// This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <returns>MetadataResponse</returns>
        MetadataResponse GetSICMetadata (string sicCode = default(string), string level = default(string));

        /// <summary>
        /// Get SIC Metadata
        /// </summary>
        /// <remarks>
        /// This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <returns>ApiResponse of MetadataResponse</returns>
        ApiResponse<MetadataResponse> GetSICMetadataWithHttpInfo (string sicCode = default(string), string level = default(string));
        /// <summary>
        /// Points Of Interest Autocomplete
        /// </summary>
        /// <remarks>
        /// This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        PlacesResponse PoisAutocomplete (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string));

        /// <summary>
        /// Points Of Interest Autocomplete
        /// </summary>
        /// <remarks>
        /// This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        ApiResponse<PlacesResponse> PoisAutocompleteWithHttpInfo (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Category Code Metadata.
        /// </summary>
        /// <remarks>
        /// This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataResponse</returns>
        System.Threading.Tasks.Task<MetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Category Code Metadata.
        /// </summary>
        /// <remarks>
        /// This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetCategoryCodeMetadataWithHttpInfoAsync (string categoryCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Poi</returns>
        System.Threading.Tasks.Task<Poi> GetPOIByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Poi)</returns>
        System.Threading.Tasks.Task<ApiResponse<Poi>> GetPOIByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get POIs By Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        System.Threading.Tasks.Task<PlacesResponse> GetPOIsByAddressAsync (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get POIs By Address.
        /// </summary>
        /// <remarks>
        /// This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByAddressWithHttpInfoAsync (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GET Points Of Interest By Area.
        /// </summary>
        /// <remarks>
        /// This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        System.Threading.Tasks.Task<PlacesResponse> GetPOIsByAreaAsync (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// GET Points Of Interest By Area.
        /// </summary>
        /// <remarks>
        /// This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByAreaWithHttpInfoAsync (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        System.Threading.Tasks.Task<PlacesResponse> GetPOIsByGeometryAsync (POIByGeometryRequest pOIByGeometryRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByGeometryWithHttpInfoAsync (POIByGeometryRequest pOIByGeometryRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get POIs By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        System.Threading.Tasks.Task<PlacesResponse> GetPOIsByLocationAsync (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get POIs By Location.
        /// </summary>
        /// <remarks>
        /// This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByLocationWithHttpInfoAsync (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Points Of Interest Count
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiCount</returns>
        System.Threading.Tasks.Task<PoiCount> GetPOIsCountAsync (string contentType, PoiCountRequest poiCountRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Points Of Interest Count
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoiCount>> GetPOIsCountWithHttpInfoAsync (string contentType, PoiCountRequest poiCountRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get SIC Metadata
        /// </summary>
        /// <remarks>
        /// This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataResponse</returns>
        System.Threading.Tasks.Task<MetadataResponse> GetSICMetadataAsync (string sicCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get SIC Metadata
        /// </summary>
        /// <remarks>
        /// This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetSICMetadataWithHttpInfoAsync (string sicCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Points Of Interest Autocomplete
        /// </summary>
        /// <remarks>
        /// This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        System.Threading.Tasks.Task<PlacesResponse> PoisAutocompleteAsync (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Points Of Interest Autocomplete
        /// </summary>
        /// <remarks>
        /// This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> PoisAutocompleteWithHttpInfoAsync (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlacesServiceApi : IPlacesServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlacesServiceApi(String basePath)
        {
            this.Configuration = new com.precisely.apis.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlacesServiceApi()
        {
            this.Configuration = com.precisely.apis.Client.Configuration.Default;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlacesServiceApi(com.precisely.apis.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.precisely.apis.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.precisely.apis.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Category Code Metadata. This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <returns>MetadataResponse</returns>
        public MetadataResponse GetCategoryCodeMetadata (string categoryCode = default(string), string level = default(string))
        {
             ApiResponse<MetadataResponse> localVarResponse = GetCategoryCodeMetadataWithHttpInfo(categoryCode, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Category Code Metadata. This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <returns>ApiResponse of MetadataResponse</returns>
        public ApiResponse<MetadataResponse> GetCategoryCodeMetadataWithHttpInfo (string categoryCode = default(string), string level = default(string))
        {

            var localVarPath = "/places/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
            
        }

        /// <summary>
        /// Category Code Metadata. This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataResponse</returns>
        public async System.Threading.Tasks.Task<MetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MetadataResponse> localVarResponse = await GetCategoryCodeMetadataWithHttpInfoAsync(categoryCode, level, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Category Code Metadata. This service returns a list of Category codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">4, 6, or 11 digits category code to filter the response. (optional)</param>
        /// <param name="level">1, 2, or 3. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetCategoryCodeMetadataWithHttpInfoAsync (string categoryCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/places/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <returns>Poi</returns>
        public Poi GetPOIById (string id)
        {
             ApiResponse<Poi> localVarResponse = GetPOIByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <returns>ApiResponse of Poi</returns>
        public ApiResponse<Poi> GetPOIByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlacesServiceApi->GetPOIById");

            var localVarPath = "/places/v1/poi/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIById", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<Poi>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Poi) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Poi)));
            
            
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Poi</returns>
        public async System.Threading.Tasks.Task<Poi> GetPOIByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Poi> localVarResponse = await GetPOIByIdWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Poi)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Poi>> GetPOIByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlacesServiceApi->GetPOIById");

            var localVarPath = "/places/v1/poi/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIById", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<Poi>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Poi) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Poi)));
            
        }

        /// <summary>
        /// Get POIs By Address. This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        public PlacesResponse GetPOIsByAddress (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {
             ApiResponse<PlacesResponse> localVarResponse = GetPOIsByAddressWithHttpInfo(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get POIs By Address. This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        public ApiResponse<PlacesResponse> GetPOIsByAddressWithHttpInfo (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {

            var localVarPath = "/places/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
            
        }

        /// <summary>
        /// Get POIs By Address. This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        public async System.Threading.Tasks.Task<PlacesResponse> GetPOIsByAddressAsync (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlacesResponse> localVarResponse = await GetPOIsByAddressWithHttpInfoAsync(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get POIs By Address. This service accepts an address as input and returns nearby points-of-interest places around that address. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be searched. (optional)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByAddressWithHttpInfoAsync (string address = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/places/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
           if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
           if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
           if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
           if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
           if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
           if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
        }

        /// <summary>
        /// GET Points Of Interest By Area. This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <returns>PlacesResponse</returns>
        public PlacesResponse GetPOIsByArea (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {
             ApiResponse<PlacesResponse> localVarResponse = GetPOIsByAreaWithHttpInfo(areaName1, areaName3, postcode1, postcode2, country, name, type, categoryCode, sicCode, maxCandidates, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET Points Of Interest By Area. This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        public ApiResponse<PlacesResponse> GetPOIsByAreaWithHttpInfo (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {

            var localVarPath = "/places/v1/poi/byarea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByArea", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
            
        }

        /// <summary>
        /// GET Points Of Interest By Area. This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        public async System.Threading.Tasks.Task<PlacesResponse> GetPOIsByAreaAsync (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlacesResponse> localVarResponse = await GetPOIsByAreaWithHttpInfoAsync(areaName1, areaName3, postcode1, postcode2, country, name, type, categoryCode, sicCode, maxCandidates, fuzzyOnName, page, matchMode, specificMatchOn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET Points Of Interest By Area. This service accepts city or postcode (alongwith country) and returns points-of-interest places within a city or postcode. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province (optional)</param>
        /// <param name="areaName3">Specifies a city or town name (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension (optional)</param>
        /// <param name="country">Country ISO code (optional)</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByAreaWithHttpInfoAsync (string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string country = default(string), string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/places/v1/poi/byarea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
           if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
           if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
           if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
           if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
           if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
           if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByArea", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <returns>PlacesResponse</returns>
        public PlacesResponse GetPOIsByGeometry (POIByGeometryRequest pOIByGeometryRequest)
        {
             ApiResponse<PlacesResponse> localVarResponse = GetPOIsByGeometryWithHttpInfo(pOIByGeometryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        public ApiResponse<PlacesResponse> GetPOIsByGeometryWithHttpInfo (POIByGeometryRequest pOIByGeometryRequest)
        {
            // verify the required parameter 'pOIByGeometryRequest' is set
            if (pOIByGeometryRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIByGeometryRequest' when calling PlacesServiceApi->GetPOIsByGeometry");

            var localVarPath = "/places/v1/poi/byboundary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIByGeometryRequest != null && pOIByGeometryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIByGeometryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIByGeometryRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByGeometry", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
            
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        public async System.Threading.Tasks.Task<PlacesResponse> GetPOIsByGeometryAsync (POIByGeometryRequest pOIByGeometryRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlacesResponse> localVarResponse = await GetPOIsByGeometryWithHttpInfoAsync(pOIByGeometryRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pOIByGeometryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByGeometryWithHttpInfoAsync (POIByGeometryRequest pOIByGeometryRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pOIByGeometryRequest' is set
            if (pOIByGeometryRequest == null)
                throw new ApiException(400, "Missing required parameter 'pOIByGeometryRequest' when calling PlacesServiceApi->GetPOIsByGeometry");

            var localVarPath = "/places/v1/poi/byboundary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pOIByGeometryRequest != null && pOIByGeometryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pOIByGeometryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOIByGeometryRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByGeometry", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
        }

        /// <summary>
        /// Get POIs By Location. This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        public PlacesResponse GetPOIsByLocation (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {
             ApiResponse<PlacesResponse> localVarResponse = GetPOIsByLocationWithHttpInfo(longitude, latitude, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get POIs By Location. This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        public ApiResponse<PlacesResponse> GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/places/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
            
        }

        /// <summary>
        /// Get POIs By Location. This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        public async System.Threading.Tasks.Task<PlacesResponse> GetPOIsByLocationAsync (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlacesResponse> localVarResponse = await GetPOIsByLocationWithHttpInfoAsync(longitude, latitude, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get POIs By Location. This service accepts latitude/longitude as input and returns nearby points-of-interest places around that location. Additional input features include retrieving data by name, type, standard industrial classifications and category codes, as well as geographic filtering by radius, travel times and travel distances. Response features include JSON as well as CSV download
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="name">Specifies the name of the place (POI) to be searched. Also performs search on partially specified names. It requires minimum 3 characters to search. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional)</param>
        /// <param name="sortBy">Whether to sort the results based on relevance (best match) or by nearest distance from input location. (optional)</param>
        /// <param name="fuzzyOnName">Whether to allow fuzzy seacrh on name input. (optional)</param>
        /// <param name="page">Specifies the page number of results where page size is the value of maxCandidates input in request. (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> GetPOIsByLocationWithHttpInfoAsync (string longitude, string latitude, string name = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string sortBy = default(string), string fuzzyOnName = default(string), string page = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/places/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
           if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
           if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
           if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
           if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
           if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
           if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
        }

        /// <summary>
        /// Points Of Interest Count Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <returns>PoiCount</returns>
        public PoiCount GetPOIsCount (string contentType, PoiCountRequest poiCountRequest)
        {
             ApiResponse<PoiCount> localVarResponse = GetPOIsCountWithHttpInfo(contentType, poiCountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest Count Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <returns>ApiResponse of PoiCount</returns>
        public ApiResponse<PoiCount> GetPOIsCountWithHttpInfo (string contentType, PoiCountRequest poiCountRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PlacesServiceApi->GetPOIsCount");
            // verify the required parameter 'poiCountRequest' is set
            if (poiCountRequest == null)
                throw new ApiException(400, "Missing required parameter 'poiCountRequest' when calling PlacesServiceApi->GetPOIsCount");

            var localVarPath = "/places/v1/poicount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (poiCountRequest != null && poiCountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(poiCountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = poiCountRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsCount", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiCount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiCount)));
            
            
        }

        /// <summary>
        /// Points Of Interest Count Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PoiCount</returns>
        public async System.Threading.Tasks.Task<PoiCount> GetPOIsCountAsync (string contentType, PoiCountRequest poiCountRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PoiCount> localVarResponse = await GetPOIsCountWithHttpInfoAsync(contentType, poiCountRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest Count Accepts a user-defined boundary as input and returns the Count number of POIs within the boundary. Additionally, user can request the count of filtered POIs by name, type, standard industrial classifications and category codes within the given polygon.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="poiCountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PoiCount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoiCount>> GetPOIsCountWithHttpInfoAsync (string contentType, PoiCountRequest poiCountRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PlacesServiceApi->GetPOIsCount");
            // verify the required parameter 'poiCountRequest' is set
            if (poiCountRequest == null)
                throw new ApiException(400, "Missing required parameter 'poiCountRequest' when calling PlacesServiceApi->GetPOIsCount");

            var localVarPath = "/places/v1/poicount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (poiCountRequest != null && poiCountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(poiCountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = poiCountRequest; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsCount", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PoiCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiCount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiCount)));
            
        }

        /// <summary>
        /// Get SIC Metadata This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <returns>MetadataResponse</returns>
        public MetadataResponse GetSICMetadata (string sicCode = default(string), string level = default(string))
        {
             ApiResponse<MetadataResponse> localVarResponse = GetSICMetadataWithHttpInfo(sicCode, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SIC Metadata This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <returns>ApiResponse of MetadataResponse</returns>
        public ApiResponse<MetadataResponse> GetSICMetadataWithHttpInfo (string sicCode = default(string), string level = default(string))
        {

            var localVarPath = "/places/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
            
        }

        /// <summary>
        /// Get SIC Metadata This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataResponse</returns>
        public async System.Threading.Tasks.Task<MetadataResponse> GetSICMetadataAsync (string sicCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MetadataResponse> localVarResponse = await GetSICMetadataWithHttpInfoAsync(sicCode, level, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SIC Metadata This service returns a list of standard industrial classification codes &amp; associated metadata which can then be used as inputs for querying the Points of Interest By Address or Location methods listed above.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">4 or 8 digits SIC code to filter the response. (optional)</param>
        /// <param name="level">1 or 2. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetSICMetadataWithHttpInfoAsync (string sicCode = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/places/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
        }

        /// <summary>
        /// Points Of Interest Autocomplete This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>PlacesResponse</returns>
        public PlacesResponse PoisAutocomplete (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {
             ApiResponse<PlacesResponse> localVarResponse = PoisAutocompleteWithHttpInfo(xForwardedFor, longitude, latitude, searchText, searchOnNameOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, areaName1, areaName3, postcode1, postcode2, ipAddress, autoDetectLocation, type, categoryCode, sicCode, maxCandidates, sortBy, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest Autocomplete This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <returns>ApiResponse of PlacesResponse</returns>
        public ApiResponse<PlacesResponse> PoisAutocompleteWithHttpInfo (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string))
        {

            var localVarPath = "/places/v1/poi/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", this.Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PoisAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
            
        }

        /// <summary>
        /// Points Of Interest Autocomplete This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlacesResponse</returns>
        public async System.Threading.Tasks.Task<PlacesResponse> PoisAutocompleteAsync (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlacesResponse> localVarResponse = await PoisAutocompleteWithHttpInfoAsync(xForwardedFor, longitude, latitude, searchText, searchOnNameOnly, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, areaName1, areaName3, postcode1, postcode2, ipAddress, autoDetectLocation, type, categoryCode, sicCode, maxCandidates, sortBy, matchMode, specificMatchOn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest Autocomplete This service accepts partial text input and returns matching points of interest, sorted by relevance or distance.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Free text which will accept a multi-word string. Combination of POI name and address is possible. (optional)</param>
        /// <param name="searchOnNameOnly"> (optional, default to &quot;N&quot;)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters (default). (optional)</param>
        /// <param name="travelTime">Travel time within which search is performed (POIs which can be reached within travel time). (optional)</param>
        /// <param name="travelTimeUnit">Travel time unit such as minutes (default), hours, seconds or milliseconds. (optional)</param>
        /// <param name="travelDistance">Travel distance within which search is performed (POIs which can be reached within travel distance). (optional)</param>
        /// <param name="travelDistanceUnit">Travel distance unit such as Feet (default), Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelMode">Mode of commute. (optional, default to &quot;driving&quot;)</param>
        /// <param name="country">Country ISO code. (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies a city or town name. (optional)</param>
        /// <param name="postcode1">Specifies the postcode(ZIP code) in the appropriate format for the country. (optional)</param>
        /// <param name="postcode2">Specifies the postcode(ZIP code) extension. (optional)</param>
        /// <param name="ipAddress">IP address which will be used to auto detect the location in order to serve contextually relevant results. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to detect client&#39;s location using IP address. If IP address(below) is not provided and autoDetectLocation is set &#39;True&#39; then IP address will be picked from HTTP request automatically. (optional)</param>
        /// <param name="type">Filters the points of interest (POIs) by place types. (optional)</param>
        /// <param name="categoryCode">Acts as a filter to narrow down and refine POI search results. The category codes are unique 4, 6, or 11 digit numeric values. (optional)</param>
        /// <param name="sicCode">Acts as a filter to narrow down and refine POI search results. The SIC codes are unique 4 or 8 digit numerical values. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">sortBy (optional)</param>
        /// <param name="matchMode">Determine the leniency used to make a match between the input name and the reference data. (optional)</param>
        /// <param name="specificMatchOn">Specifies the field for the Specific Match Mode. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlacesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlacesResponse>> PoisAutocompleteWithHttpInfoAsync (string xForwardedFor = default(string), string longitude = default(string), string latitude = default(string), string searchText = default(string), string searchOnNameOnly = default(string), string searchRadius = default(string), string searchRadiusUnit = default(string), string travelTime = default(string), string travelTimeUnit = default(string), string travelDistance = default(string), string travelDistanceUnit = default(string), string travelMode = default(string), string country = default(string), string areaName1 = default(string), string areaName3 = default(string), string postcode1 = default(string), string postcode2 = default(string), string ipAddress = default(string), string autoDetectLocation = default(string), string type = default(string), string categoryCode = default(string), string sicCode = default(string), string maxCandidates = default(string), string sortBy = default(string), string matchMode = default(string), string specificMatchOn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/places/v1/poi/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

           if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
           if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
           if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
           if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
           if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
           if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
           if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
           if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
           if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
           if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
           if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
           if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
           if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
           if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
           if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
           if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
           if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
           if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
           if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
           if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
           if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
           if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
           if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
           if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
           if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", this.Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PoisAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

           return new ApiResponse<PlacesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PlacesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlacesResponse)));
            
        }

    }
}