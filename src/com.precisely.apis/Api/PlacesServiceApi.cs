/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.precisely.apis.Client;
using com.precisely.apis.Model;

namespace com.precisely.apis.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlacesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>GeoEnrichMetadataResponse</returns>
        GeoEnrichMetadataResponse GetCategoryCodeMetadata (string categoryCode = null, string level = null);

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>ApiResponse of GeoEnrichMetadataResponse</returns>
        ApiResponse<GeoEnrichMetadataResponse> GetCategoryCodeMetadataWithHttpInfo (string categoryCode = null, string level = null);
        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>POIPlaces</returns>
        POIPlaces GetPOIById (string id);

        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>ApiResponse of POIPlaces</returns>
        ApiResponse<POIPlaces> GetPOIByIdWithHttpInfo (string id);
        /// <summary>
        /// Points of Interest By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        GeoEnrichResponse GetPOIsByAddress (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        ApiResponse<GeoEnrichResponse> GetPOIsByAddressWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Points of Interest By Area.
        /// </summary>
        /// <remarks>
        /// Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        GeoEnrichResponse GetPOIsByArea (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Area.
        /// </summary>
        /// <remarks>
        /// Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        ApiResponse<GeoEnrichResponse> GetPOIsByAreaWithHttpInfo (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Pois</returns>
        Pois GetPOIsByBoundary (string accept = null, string contentType = null, POIByGeometryRequest body = null);

        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Pois</returns>
        ApiResponse<Pois> GetPOIsByBoundaryWithHttpInfo (string accept = null, string contentType = null, POIByGeometryRequest body = null);
        /// <summary>
        /// Points of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        GeoEnrichResponse GetPOIsByLocation (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        ApiResponse<GeoEnrichResponse> GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Point of Interests count By Geometry.
        /// </summary>
        /// <remarks>
        /// Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PoiCount</returns>
        PoiCount GetPOIsCount (string contentType = null, PoiCountRequest body = null);

        /// <summary>
        /// Point of Interests count By Geometry.
        /// </summary>
        /// <remarks>
        /// Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PoiCount</returns>
        ApiResponse<PoiCount> GetPOIsCountWithHttpInfo (string contentType = null, PoiCountRequest body = null);
        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>GeoEnrichMetadataResponse</returns>
        GeoEnrichMetadataResponse GetSICMetadata (string sicCode = null, string level = null);

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>ApiResponse of GeoEnrichMetadataResponse</returns>
        ApiResponse<GeoEnrichMetadataResponse> GetSICMetadataWithHttpInfo (string sicCode = null, string level = null);
        /// <summary>
        /// Points of Interest Autocomplete.
        /// </summary>
        /// <remarks>
        /// POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        GeoEnrichResponse PoisAutocomplete (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest Autocomplete.
        /// </summary>
        /// <remarks>
        /// POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        ApiResponse<GeoEnrichResponse> PoisAutocompleteWithHttpInfo (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>Task of GeoEnrichMetadataResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichMetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = null, string level = null);

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first partial digits or full category codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichMetadataResponse>> GetCategoryCodeMetadataAsyncWithHttpInfo (string categoryCode = null, string level = null);
        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>Task of POIPlaces</returns>
        System.Threading.Tasks.Task<POIPlaces> GetPOIByIdAsync (string id);

        /// <summary>
        /// Points Of Interest Details By Id
        /// </summary>
        /// <remarks>
        /// This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>Task of ApiResponse (POIPlaces)</returns>
        System.Threading.Tasks.Task<ApiResponse<POIPlaces>> GetPOIByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Points of Interest By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByAddressAsync (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Address.
        /// </summary>
        /// <remarks>
        /// Accepts address as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByAddressAsyncWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Points of Interest By Area.
        /// </summary>
        /// <remarks>
        /// Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByAreaAsync (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Area.
        /// </summary>
        /// <remarks>
        /// Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByAreaAsyncWithHttpInfo (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Pois</returns>
        System.Threading.Tasks.Task<Pois> GetPOIsByBoundaryAsync (string accept = null, string contentType = null, POIByGeometryRequest body = null);

        /// <summary>
        /// Points Of Interest By Boundary
        /// </summary>
        /// <remarks>
        /// Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Pois)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pois>> GetPOIsByBoundaryAsyncWithHttpInfo (string accept = null, string contentType = null, POIByGeometryRequest body = null);
        /// <summary>
        /// Points of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByLocationAsync (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest By Location.
        /// </summary>
        /// <remarks>
        /// Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByLocationAsyncWithHttpInfo (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);
        /// <summary>
        /// Point of Interests count By Geometry.
        /// </summary>
        /// <remarks>
        /// Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PoiCount</returns>
        System.Threading.Tasks.Task<PoiCount> GetPOIsCountAsync (string contentType = null, PoiCountRequest body = null);

        /// <summary>
        /// Point of Interests count By Geometry.
        /// </summary>
        /// <remarks>
        /// Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PoiCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoiCount>> GetPOIsCountAsyncWithHttpInfo (string contentType = null, PoiCountRequest body = null);
        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>Task of GeoEnrichMetadataResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichMetadataResponse> GetSICMetadataAsync (string sicCode = null, string level = null);

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping
        /// </summary>
        /// <remarks>
        /// Accepts first few partial digits or full SIC codes to filter the response
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichMetadataResponse>> GetSICMetadataAsyncWithHttpInfo (string sicCode = null, string level = null);
        /// <summary>
        /// Points of Interest Autocomplete.
        /// </summary>
        /// <remarks>
        /// POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        System.Threading.Tasks.Task<GeoEnrichResponse> PoisAutocompleteAsync (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);

        /// <summary>
        /// Points of Interest Autocomplete.
        /// </summary>
        /// <remarks>
        /// POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </remarks>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> PoisAutocompleteAsyncWithHttpInfo (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlacesServiceApi : IPlacesServiceApi
    {
        private com.precisely.apis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlacesServiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlacesServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.precisely.apis.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.precisely.apis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>GeoEnrichMetadataResponse</returns>
        public GeoEnrichMetadataResponse GetCategoryCodeMetadata (string categoryCode = null, string level = null)
        {
             ApiResponse<GeoEnrichMetadataResponse> localVarResponse = GetCategoryCodeMetadataWithHttpInfo(categoryCode, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>ApiResponse of GeoEnrichMetadataResponse</returns>
        public ApiResponse< GeoEnrichMetadataResponse > GetCategoryCodeMetadataWithHttpInfo (string categoryCode = null, string level = null)
        {

            var localVarPath = "/places/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichMetadataResponse)));
            
        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>Task of GeoEnrichMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichMetadataResponse> GetCategoryCodeMetadataAsync (string categoryCode = null, string level = null)
        {
             ApiResponse<GeoEnrichMetadataResponse> localVarResponse = await GetCategoryCodeMetadataAsyncWithHttpInfo(categoryCode, level);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns Category Codes with their sub-categories (if exist), descriptions and SIC Codes mapping Accepts first partial digits or full category codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryCode">Specify starting digits or full category code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2,3. If level&#x3D;1, then only 4 digits category codes will be returned, level&#x3D;2 means only 6 digits category codes   will be returned, level&#x3D;3 means only 11 digits category codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return 4 digits and 6 digits category codes. (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichMetadataResponse>> GetCategoryCodeMetadataAsyncWithHttpInfo (string categoryCode = null, string level = null)
        {

            var localVarPath = "/places/v1/metadata/category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryCodeMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichMetadataResponse)));
            
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>POIPlaces</returns>
        public POIPlaces GetPOIById (string id)
        {
             ApiResponse<POIPlaces> localVarResponse = GetPOIByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>ApiResponse of POIPlaces</returns>
        public ApiResponse< POIPlaces > GetPOIByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlacesServiceApi->GetPOIById");

            var localVarPath = "/places/v1/poi/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<POIPlaces>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIPlaces) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIPlaces)));
            
        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>Task of POIPlaces</returns>
        public async System.Threading.Tasks.Task<POIPlaces> GetPOIByIdAsync (string id)
        {
             ApiResponse<POIPlaces> localVarResponse = await GetPOIByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest Details By Id This service returns complete details of a chosen point of interest by an identifier. The identifier could be selected from Autocomplete API response.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">POI unique Identifier. Accepts only numbers.</param>
        /// <returns>Task of ApiResponse (POIPlaces)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<POIPlaces>> GetPOIByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PlacesServiceApi->GetPOIById");

            var localVarPath = "/places/v1/poi/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<POIPlaces>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (POIPlaces) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POIPlaces)));
            
        }

        /// <summary>
        /// Points of Interest By Address. Accepts address as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        public GeoEnrichResponse GetPOIsByAddress (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = GetPOIsByAddressWithHttpInfo(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points of Interest By Address. Accepts address as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        public ApiResponse< GeoEnrichResponse > GetPOIsByAddressWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PlacesServiceApi->GetPOIsByAddress");

            var localVarPath = "/places/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points of Interest By Address. Accepts address as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByAddressAsync (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = await GetPOIsByAddressAsyncWithHttpInfo(address, country, name, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points of Interest By Address. Accepts address as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByAddressAsyncWithHttpInfo (string address, string country = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PlacesServiceApi->GetPOIsByAddress");

            var localVarPath = "/places/v1/poi/byaddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarQueryParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points of Interest By Area. Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        public GeoEnrichResponse GetPOIsByArea (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = GetPOIsByAreaWithHttpInfo(country, areaName3, postcode1, postcode2, name, type, categoryCode, sicCode, maxCandidates, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points of Interest By Area. Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        public ApiResponse< GeoEnrichResponse > GetPOIsByAreaWithHttpInfo (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling PlacesServiceApi->GetPOIsByArea");

            var localVarPath = "/places/v1/poi/byarea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points of Interest By Area. Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByAreaAsync (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = await GetPOIsByAreaAsyncWithHttpInfo(country, areaName3, postcode1, postcode2, name, type, categoryCode, sicCode, maxCandidates, fuzzyOnName, page, matchMode, specificMatchOn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points of Interest By Area. Accepts postcode or city as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country</param>
        /// <param name="areaName3">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode1">Either areaName3 or postcode is required (optional)</param>
        /// <param name="postcode2">postcode extension (optional)</param>
        /// <param name="name">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByAreaAsyncWithHttpInfo (string country, string areaName3 = null, string postcode1 = null, string postcode2 = null, string name = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string fuzzyOnName = null, string page = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling PlacesServiceApi->GetPOIsByArea");

            var localVarPath = "/places/v1/poi/byarea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Pois</returns>
        public Pois GetPOIsByBoundary (string accept = null, string contentType = null, POIByGeometryRequest body = null)
        {
             ApiResponse<Pois> localVarResponse = GetPOIsByBoundaryWithHttpInfo(accept, contentType, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Pois</returns>
        public ApiResponse< Pois > GetPOIsByBoundaryWithHttpInfo (string accept = null, string contentType = null, POIByGeometryRequest body = null)
        {

            var localVarPath = "/places/v1/poi/byboundary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByBoundary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pois>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Pois) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pois)));
            
        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Pois</returns>
        public async System.Threading.Tasks.Task<Pois> GetPOIsByBoundaryAsync (string accept = null, string contentType = null, POIByGeometryRequest body = null)
        {
             ApiResponse<Pois> localVarResponse = await GetPOIsByBoundaryAsyncWithHttpInfo(accept, contentType, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points Of Interest By Boundary Accepts a user-defined boundary as input and returns all Points of Interest within the boundary. Additionally, user can filter the response by name, type, standard industrial classifications and category codes.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Pois)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pois>> GetPOIsByBoundaryAsyncWithHttpInfo (string accept = null, string contentType = null, POIByGeometryRequest body = null)
        {

            var localVarPath = "/places/v1/poi/byboundary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByBoundary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pois>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (Pois) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pois)));
            
        }

        /// <summary>
        /// Points of Interest By Location. Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        public GeoEnrichResponse GetPOIsByLocation (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = GetPOIsByLocationWithHttpInfo(longitude, latitude, searchText, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, searchOnNameOnly, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points of Interest By Location. Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        public ApiResponse< GeoEnrichResponse > GetPOIsByLocationWithHttpInfo (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/places/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points of Interest By Location. Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichResponse> GetPOIsByLocationAsync (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = await GetPOIsByLocationAsyncWithHttpInfo(longitude, latitude, searchText, type, categoryCode, sicCode, maxCandidates, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, sortBy, fuzzyOnName, page, searchOnNameOnly, matchMode, specificMatchOn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points of Interest By Location. Accepts longitude and latitude as an input to retrieve nearby points of interest.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location.</param>
        /// <param name="latitude">Latitude of the location.</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="fuzzyOnName">Allowed values are Y/N. If N, the search on name will not allow fuzziness. (optional)</param>
        /// <param name="page">Will support pagination, by default 1st page with maxCandidates results are returned. (optional)</param>
        /// <param name="searchOnNameOnly">search name description (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> GetPOIsByLocationAsyncWithHttpInfo (string longitude, string latitude, string searchText = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string sortBy = null, string fuzzyOnName = null, string page = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling PlacesServiceApi->GetPOIsByLocation");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling PlacesServiceApi->GetPOIsByLocation");

            var localVarPath = "/places/v1/poi/bylocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (fuzzyOnName != null) localVarQueryParams.Add("fuzzyOnName", Configuration.ApiClient.ParameterToString(fuzzyOnName)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Point of Interests count By Geometry. Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PoiCount</returns>
        public PoiCount GetPOIsCount (string contentType = null, PoiCountRequest body = null)
        {
             ApiResponse<PoiCount> localVarResponse = GetPOIsCountWithHttpInfo(contentType, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Point of Interests count By Geometry. Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PoiCount</returns>
        public ApiResponse< PoiCount > GetPOIsCountWithHttpInfo (string contentType = null, PoiCountRequest body = null)
        {

            var localVarPath = "/places/v1/poicount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoiCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiCount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiCount)));
            
        }

        /// <summary>
        /// Point of Interests count By Geometry. Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PoiCount</returns>
        public async System.Threading.Tasks.Task<PoiCount> GetPOIsCountAsync (string contentType = null, PoiCountRequest body = null)
        {
             ApiResponse<PoiCount> localVarResponse = await GetPOIsCountAsyncWithHttpInfo(contentType, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Point of Interests count By Geometry. Accepts geometry/loc/address as an input to count nearby point of interests.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PoiCount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoiCount>> GetPOIsCountAsyncWithHttpInfo (string contentType = null, PoiCountRequest body = null)
        {

            var localVarPath = "/places/v1/poicount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPOIsCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoiCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (PoiCount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoiCount)));
            
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>GeoEnrichMetadataResponse</returns>
        public GeoEnrichMetadataResponse GetSICMetadata (string sicCode = null, string level = null)
        {
             ApiResponse<GeoEnrichMetadataResponse> localVarResponse = GetSICMetadataWithHttpInfo(sicCode, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>ApiResponse of GeoEnrichMetadataResponse</returns>
        public ApiResponse< GeoEnrichMetadataResponse > GetSICMetadataWithHttpInfo (string sicCode = null, string level = null)
        {

            var localVarPath = "/places/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichMetadataResponse)));
            
        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>Task of GeoEnrichMetadataResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichMetadataResponse> GetSICMetadataAsync (string sicCode = null, string level = null)
        {
             ApiResponse<GeoEnrichMetadataResponse> localVarResponse = await GetSICMetadataAsyncWithHttpInfo(sicCode, level);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns SIC Codes with their Industry Titles and Category Codes mapping Accepts first few partial digits or full SIC codes to filter the response
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sicCode">Specify starting digits or full sic code to filter the response (optional)</param>
        /// <param name="level">Allowed values are 1,2. If level&#x3D;1, then only 4 digits sic codes will be returned, level&#x3D;2 means only 8 digits sic codes will be returned. Multiple comma-separated values will also be accepted. So level&#x3D;&#39;1,2&#39; means return both 4 digits and 8 digits sic codes. (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichMetadataResponse>> GetSICMetadataAsyncWithHttpInfo (string sicCode = null, string level = null)
        {

            var localVarPath = "/places/v1/metadata/sic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (level != null) localVarQueryParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSICMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichMetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichMetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichMetadataResponse)));
            
        }

        /// <summary>
        /// Points of Interest Autocomplete. POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>GeoEnrichResponse</returns>
        public GeoEnrichResponse PoisAutocomplete (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = PoisAutocompleteWithHttpInfo(longitude, latitude, searchText, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, areaName1, areaName3, postcode1, postcode2, ipAddress, autoDetectLocation, type, categoryCode, sicCode, maxCandidates, sortBy, searchOnNameOnly, matchMode, specificMatchOn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Points of Interest Autocomplete. POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>ApiResponse of GeoEnrichResponse</returns>
        public ApiResponse< GeoEnrichResponse > PoisAutocompleteWithHttpInfo (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {

            var localVarPath = "/places/v1/poi/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PoisAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

        /// <summary>
        /// Points of Interest Autocomplete. POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of GeoEnrichResponse</returns>
        public async System.Threading.Tasks.Task<GeoEnrichResponse> PoisAutocompleteAsync (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {
             ApiResponse<GeoEnrichResponse> localVarResponse = await PoisAutocompleteAsyncWithHttpInfo(longitude, latitude, searchText, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, areaName1, areaName3, postcode1, postcode2, ipAddress, autoDetectLocation, type, categoryCode, sicCode, maxCandidates, sortBy, searchOnNameOnly, matchMode, specificMatchOn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Points of Interest Autocomplete. POIs-Autocomplete will return POIs predictions based on the full or partial words specified in the search.The search can then be narrowed based on Location, IP Address or Country along with other supporting filters.
        /// </summary>
        /// <exception cref="com.precisely.apis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">Longitude of the location. (optional)</param>
        /// <param name="latitude">Latitude of the location. (optional)</param>
        /// <param name="searchText">Matched against Name, BrandName and Trade Name. Partial terms are also matched with fuzziness (max edit distance is 1) (optional)</param>
        /// <param name="searchRadius">Radius range within which search is performed. (optional)</param>
        /// <param name="searchRadiusUnit">Radius unit such as Feet, Kilometers, Miles or Meters. (optional)</param>
        /// <param name="travelTime">Specifies the travel time within which method searches for results (POIs which can be reached within travel time)the search boundary in terms of time mentioned in &#39;travelTimeUnit&#39;. The results are retrieved from the polygon formed based on the travel time specified. This means search can be done in the mentioned time results be from the mentioned time. (optional)</param>
        /// <param name="travelTimeUnit">Specifies acceptable time units.Allowed values Minutes,Hours,Seconds and Milliseconds (optional)</param>
        /// <param name="travelDistance">Specifies the search boundary in terms of distance mentioned in &#39;travelDistanceUnit&#39;. The results are retrieved from the polygon formed based on the travel distance specified. (optional)</param>
        /// <param name="travelDistanceUnit">Specifies acceptable time units.Allowed values Feet,Kilometers,Miles and Meters (optional)</param>
        /// <param name="travelMode">Specifies the available mode of commute. This is required when u r trying to do search by travel distance or travel time. Allowed values driving and walking (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <param name="areaName1">Specifies the largest geographical area, typically a state or province. (optional)</param>
        /// <param name="areaName3">Specifies the name of the city or town.  (optional)</param>
        /// <param name="postcode1">Postal Code of the input to be searched (optional)</param>
        /// <param name="postcode2">Postcode2 (optional)</param>
        /// <param name="ipAddress">IP address of network connected device in standard IPv4 octet and a valid external address. (optional)</param>
        /// <param name="autoDetectLocation">Specifies whether to auto-detect location from IP address. If &#39;True&#39; is set, the location is detected from the specified ip address. If &#39;False&#39; is set. the search will happen according to country or location. (optional)</param>
        /// <param name="type">Matched against the content which defines the type of the poi.  (optional)</param>
        /// <param name="categoryCode">Specific Category/Categories Codes for the desired POIs. Accepts a mix of 4 digit (Top Category), 6 digit (Second-Level Category) and 11 digit (Low-Level Category) Category Codes. https://developer.precisely.com/download?CategoryCodes.xlsx  (optional)</param>
        /// <param name="sicCode">Specific SIC Codes/Codes for the desired POIs. Accepts a mix of 4 digit (Top Category) and 8 digit (Low-Level Category) SIC Codes. (optional)</param>
        /// <param name="maxCandidates">Maximum number of POIs that can be retrieved. (optional)</param>
        /// <param name="sortBy">Specifies the order in which POIs are retrieved. (optional, default to distance)</param>
        /// <param name="searchOnNameOnly">specifies search on name (optional)</param>
        /// <param name="matchMode"> (optional)</param>
        /// <param name="specificMatchOn"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoEnrichResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoEnrichResponse>> PoisAutocompleteAsyncWithHttpInfo (string longitude = null, string latitude = null, string searchText = null, string searchRadius = null, string searchRadiusUnit = null, string travelTime = null, string travelTimeUnit = null, string travelDistance = null, string travelDistanceUnit = null, string travelMode = null, string country = null, string areaName1 = null, string areaName3 = null, string postcode1 = null, string postcode2 = null, string ipAddress = null, string autoDetectLocation = null, string type = null, string categoryCode = null, string sicCode = null, string maxCandidates = null, string sortBy = null, string searchOnNameOnly = null, string matchMode = null, string specificMatchOn = null)
        {

            var localVarPath = "/places/v1/poi/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (longitude != null) localVarQueryParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // query parameter
            if (latitude != null) localVarQueryParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // query parameter
            if (searchText != null) localVarQueryParams.Add("searchText", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (searchRadius != null) localVarQueryParams.Add("searchRadius", Configuration.ApiClient.ParameterToString(searchRadius)); // query parameter
            if (searchRadiusUnit != null) localVarQueryParams.Add("searchRadiusUnit", Configuration.ApiClient.ParameterToString(searchRadiusUnit)); // query parameter
            if (travelTime != null) localVarQueryParams.Add("travelTime", Configuration.ApiClient.ParameterToString(travelTime)); // query parameter
            if (travelTimeUnit != null) localVarQueryParams.Add("travelTimeUnit", Configuration.ApiClient.ParameterToString(travelTimeUnit)); // query parameter
            if (travelDistance != null) localVarQueryParams.Add("travelDistance", Configuration.ApiClient.ParameterToString(travelDistance)); // query parameter
            if (travelDistanceUnit != null) localVarQueryParams.Add("travelDistanceUnit", Configuration.ApiClient.ParameterToString(travelDistanceUnit)); // query parameter
            if (travelMode != null) localVarQueryParams.Add("travelMode", Configuration.ApiClient.ParameterToString(travelMode)); // query parameter
            if (country != null) localVarQueryParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // query parameter
            if (areaName1 != null) localVarQueryParams.Add("areaName1", Configuration.ApiClient.ParameterToString(areaName1)); // query parameter
            if (areaName3 != null) localVarQueryParams.Add("areaName3", Configuration.ApiClient.ParameterToString(areaName3)); // query parameter
            if (postcode1 != null) localVarQueryParams.Add("postcode1", Configuration.ApiClient.ParameterToString(postcode1)); // query parameter
            if (postcode2 != null) localVarQueryParams.Add("postcode2", Configuration.ApiClient.ParameterToString(postcode2)); // query parameter
            if (ipAddress != null) localVarQueryParams.Add("ipAddress", Configuration.ApiClient.ParameterToString(ipAddress)); // query parameter
            if (autoDetectLocation != null) localVarQueryParams.Add("autoDetectLocation", Configuration.ApiClient.ParameterToString(autoDetectLocation)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (categoryCode != null) localVarQueryParams.Add("categoryCode", Configuration.ApiClient.ParameterToString(categoryCode)); // query parameter
            if (sicCode != null) localVarQueryParams.Add("sicCode", Configuration.ApiClient.ParameterToString(sicCode)); // query parameter
            if (maxCandidates != null) localVarQueryParams.Add("maxCandidates", Configuration.ApiClient.ParameterToString(maxCandidates)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (searchOnNameOnly != null) localVarQueryParams.Add("searchOnNameOnly", Configuration.ApiClient.ParameterToString(searchOnNameOnly)); // query parameter
            if (matchMode != null) localVarQueryParams.Add("matchMode", Configuration.ApiClient.ParameterToString(matchMode)); // query parameter
            if (specificMatchOn != null) localVarQueryParams.Add("specificMatchOn", Configuration.ApiClient.ParameterToString(specificMatchOn)); // query parameter

            // authentication (oAuth2Password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
                    else if (!String.IsNullOrEmpty(Configuration.OAuthApiKey) && !String.IsNullOrEmpty(Configuration.OAuthSecret))
                    {
                    Configuration.ApiClient.GenerateAndSetAccessToken(Configuration.OAuthApiKey,Configuration.OAuthSecret);
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                    }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PoisAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoEnrichResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x1 => x1.Name, x1 => x1.Value.ToString()),
                (GeoEnrichResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoEnrichResponse)));
            
        }

    }
}
