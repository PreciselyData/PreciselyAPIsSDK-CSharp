/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.precisely.apis.Client;
using com.precisely.apis.Api;
using com.precisely.apis.Model;

namespace com.precisely.apis.Test
{
    /// <summary>
    ///  Class for testing PropertyInformationServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PropertyInformationServiceApiTests
    {
        private PropertyInformationServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PropertyInformationServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PropertyInformationServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' PropertyInformationServiceApi
            Assert.IsInstanceOf(typeof(PropertyInformationServiceApi), instance, "instance is a PropertyInformationServiceApi");
        }

        
        /// <summary>
        /// Test GetParcelBoundaryByAddress
        /// </summary>
        [Test]
        public void GetParcelBoundaryByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string accept = null;
            //var response = instance.GetParcelBoundaryByAddress(address, accept);
            //Assert.IsInstanceOf<ParcelBoundary> (response, "response is ParcelBoundary");
        }
        
        /// <summary>
        /// Test GetParcelBoundaryByLocation
        /// </summary>
        [Test]
        public void GetParcelBoundaryByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string longitude = null;
            //string latitude = null;
            //string accept = null;
            //var response = instance.GetParcelBoundaryByLocation(longitude, latitude, accept);
            //Assert.IsInstanceOf<ParcelBoundary> (response, "response is ParcelBoundary");
        }
        
        /// <summary>
        /// Test GetPropertyAttributesByAddress
        /// </summary>
        [Test]
        public void GetPropertyAttributesByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string attributeFilter = null;
            //var response = instance.GetPropertyAttributesByAddress(address, attributeFilter);
            //Assert.IsInstanceOf<PropertyInfoResponse> (response, "response is PropertyInfoResponse");
        }
        
        /// <summary>
        /// Test GetPropertyAttributesByAddressBatch
        /// </summary>
        [Test]
        public void GetPropertyAttributesByAddressBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PropertyInfoAddressRequest body = null;
            //var response = instance.GetPropertyAttributesByAddressBatch(body);
            //Assert.IsInstanceOf<PropertyInfoResponses> (response, "response is PropertyInfoResponses");
        }
        
    }

}
