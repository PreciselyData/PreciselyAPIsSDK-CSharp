/* 
 * Precisely APIs
 *
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 10.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.precisely.apis.Client;
using com.precisely.apis.Api;
using com.precisely.apis.Model;

namespace com.precisely.apis.Test
{
    /// <summary>
    ///  Class for testing RoutingServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RoutingServiceApiTests
    {
        private RoutingServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RoutingServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RoutingServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' RoutingServiceApi
            Assert.IsInstanceOf(typeof(RoutingServiceApi), instance, "instance is a RoutingServiceApi");
        }

        
        /// <summary>
        /// Test GetRouteByAddress
        /// </summary>
        [Test]
        public void GetRouteByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startAddress = null;
            //string endAddress = null;
            //string db = null;
            //string country = null;
            //string intermediateAddresses = null;
            //string oip = null;
            //string destinationSrs = null;
            //string optimizeBy = null;
            //string returnDistance = null;
            //string distanceUnit = null;
            //string returnTime = null;
            //string timeUnit = null;
            //string language = null;
            //string directionsStyle = null;
            //string segmentGeometryStyle = null;
            //string primaryNameOnly = null;
            //string majorRoads = null;
            //string historicTrafficTimeBucket = null;
            //string returnDirectionGeometry = null;
            //string useCvr = null;
            //string looseningBarrierRestrictions = null;
            //string vehicleType = null;
            //string weight = null;
            //string weightUnit = null;
            //string height = null;
            //string heightUnit = null;
            //string length = null;
            //string lengthUnit = null;
            //string width = null;
            //string widthUnit = null;
            //string returnIntermediatePoints = null;
            //var response = instance.GetRouteByAddress(startAddress, endAddress, db, country, intermediateAddresses, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, returnIntermediatePoints);
            //Assert.IsInstanceOf<GeoRouteResponse> (response, "response is GeoRouteResponse");
        }
        
        /// <summary>
        /// Test GetRouteByLocation
        /// </summary>
        [Test]
        public void GetRouteByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startPoint = null;
            //string endPoint = null;
            //string db = null;
            //string intermediatePoints = null;
            //string oip = null;
            //string destinationSrs = null;
            //string optimizeBy = null;
            //string returnDistance = null;
            //string distanceUnit = null;
            //string returnTime = null;
            //string timeUnit = null;
            //string language = null;
            //string directionsStyle = null;
            //string segmentGeometryStyle = null;
            //string primaryNameOnly = null;
            //string majorRoads = null;
            //string historicTrafficTimeBucket = null;
            //string returnDirectionGeometry = null;
            //string useCvr = null;
            //string looseningBarrierRestrictions = null;
            //string vehicleType = null;
            //string weight = null;
            //string weightUnit = null;
            //string height = null;
            //string heightUnit = null;
            //string length = null;
            //string lengthUnit = null;
            //string width = null;
            //string widthUnit = null;
            //string returnIntermediatePoints = null;
            //var response = instance.GetRouteByLocation(startPoint, endPoint, db, intermediatePoints, oip, destinationSrs, optimizeBy, returnDistance, distanceUnit, returnTime, timeUnit, language, directionsStyle, segmentGeometryStyle, primaryNameOnly, majorRoads, historicTrafficTimeBucket, returnDirectionGeometry, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit, returnIntermediatePoints);
            //Assert.IsInstanceOf<GeoRouteResponse> (response, "response is GeoRouteResponse");
        }
        
        /// <summary>
        /// Test GetTravelCostMatrixByAddress
        /// </summary>
        [Test]
        public void GetTravelCostMatrixByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startAddresses = null;
            //string endAddresses = null;
            //string db = null;
            //string country = null;
            //string optimizeBy = null;
            //string returnDistance = null;
            //string destinationSrs = null;
            //string distanceUnit = null;
            //string returnTime = null;
            //string timeUnit = null;
            //string majorRoads = null;
            //string returnOptimalRoutesOnly = null;
            //string historicTrafficTimeBucket = null;
            //string useCvr = null;
            //string looseningBarrierRestrictions = null;
            //string vehicleType = null;
            //string weight = null;
            //string weightUnit = null;
            //string height = null;
            //string heightUnit = null;
            //string length = null;
            //string lengthUnit = null;
            //string width = null;
            //string widthUnit = null;
            //var response = instance.GetTravelCostMatrixByAddress(startAddresses, endAddresses, db, country, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
            //Assert.IsInstanceOf<TravelCostMatrixResponse> (response, "response is TravelCostMatrixResponse");
        }
        
        /// <summary>
        /// Test GetTravelCostMatrixByLocation
        /// </summary>
        [Test]
        public void GetTravelCostMatrixByLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startPoints = null;
            //string endPoints = null;
            //string db = null;
            //string optimizeBy = null;
            //string returnDistance = null;
            //string destinationSrs = null;
            //string distanceUnit = null;
            //string returnTime = null;
            //string timeUnit = null;
            //string majorRoads = null;
            //string returnOptimalRoutesOnly = null;
            //string historicTrafficTimeBucket = null;
            //string useCvr = null;
            //string looseningBarrierRestrictions = null;
            //string vehicleType = null;
            //string weight = null;
            //string weightUnit = null;
            //string height = null;
            //string heightUnit = null;
            //string length = null;
            //string lengthUnit = null;
            //string width = null;
            //string widthUnit = null;
            //var response = instance.GetTravelCostMatrixByLocation(startPoints, endPoints, db, optimizeBy, returnDistance, destinationSrs, distanceUnit, returnTime, timeUnit, majorRoads, returnOptimalRoutesOnly, historicTrafficTimeBucket, useCvr, looseningBarrierRestrictions, vehicleType, weight, weightUnit, height, heightUnit, length, lengthUnit, width, widthUnit);
            //Assert.IsInstanceOf<TravelCostMatrixResponse> (response, "response is TravelCostMatrixResponse");
        }
        
    }

}
